= V4 Outline MultiLine NoSorting TabWidth=30

H="Project Notes"

********************HEADING******************** 

Project Name: Katherine's P01 [tentative]

Date Started: 2/19

Primary Investigator: Katherine Ornstein
Funding Source: ?

Created by: OKR

Primary Analyst: OKR
Secondary Analyst: ??

Datasets Used: NHATS, NHATS-linked Medicare claims, HRS, HRS Medicare, HRS MAX

Simple Outline:  Looking at the receipt of Home Based Medical Care (HBMC) within people with Dementia 


*/
 
//STATA
// Global Macros use $ symbol to be called. 

//Intermediate Data Path
global intpath "E:\data\HBMC_HRS\int_data"

// Final Data Path
global datapath "E:\nhats\data\Projects\serious_ill\icd910\final_data"

//Working Log files path
global logpath "E:\data\HBMC_HRS\logs"

//Final Logs Path

"E:\data\projects\HBMC_HRS\logs"

//SAS 

/*nhats cleaned path*/
libname nhats 'E:\nhats\data\NHATS cleaned';

/*medicare xwalk and claims path*/
libname medi 'E:\nhats\data\20180625 NHATS CMS Data\merged';


H="********"


H="Data Setup"
use "E:\data\hrs_cleaned\core_00_to_14.dta" , clear 

merge 1:1 id core_year using "E:\data\HBMC_HRS\int_data\hrs_housecalls.dta"

/* Only keeping most recent ivws for people without housecall */

gen hcall = .
preserve
keep if _m==3
replace hcall = 1
drop _m
tempfile hcalls
save `hcalls'
restore

levelsof id if _m==3, local(match)

foreach x of local match {
replace hcall= 1 if id=="`x'"
}

drop _m
drop if hcall==1
gsort id -core_year
by id: keep if _n==1

append using "`hcalls'"

replace hcall = 0 if hcall==.
label var hcall "Medicare House call +/- 90 days of iw"

save "E:\data\HBMC_HRS\int_data\hrs_merged.dta", replace

use "E:\data\HBMC_HRS\int_data\hrs_merged.dta", replace

drop bid_hrs_22

merge 1:1 hhid pn using "E:\data\CMS_DUA_51675_2014\Merged\Stata\xref2015medicare.dta", keepus(BID_HRS_22)
drop if _m==2

gen mcare_claims = 0
replace mcare_claims = 1 if BID_HRS_22!=""
label var mcare_claims "Has Medicare Claims"
cap drop _m

merge 1:1 hhid pn using "E:\data\CMS_DUA_51675_2014\Medicaid_merged\MedicaidXref2012.dta", keepus(bid_hrs_23)
drop if _m==2

gen maid_claims = 0
replace maid_claims = 1 if _m==3
label var maid_claims "Has Medicaid Claims"
drop _m

merge 1:1 id using "E:\data\HBMC_HRS\int_data\any_maid_hh.dta", keepus(maid_hh)
replace maid_hh = 0 if maid_hh==.
label var maid_hh "Has any Medicaid HH claim"
drop _m

rename *, l

save "E:\data\HBMC_HRS\int_data\hrs_merged2.dta", replace 

use "E:\data\CMS_DUA_51675_2014\Merged\Stata\hh_1998_2015.dta", clear
keep bid_hrs_22
duplicates drop

tempfile mcarehh
save `mcarehh'

use "E:\data\HBMC_HRS\int_data\hrs_merged2.dta", replace 


preserve
keep if bid_hrs_22==""
tempfile applater
save `applater'
restore 

drop if bid_hrs_22==""

merge 1:m bid_hrs_22 using "`mcarehh'", keepus(bid_hrs_22)
drop if _m==2

gen mcare_hh = .
replace mcare_hh = 1 if _m==3

append using "`applater'"

replace mcare_hh = 0 if mcare_hh==.
label var mcare_hh "Has any Medicare HH claim"
drop _m

save "E:\data\HBMC_HRS\int_data\hrs_merged2.dta", replace  

/* Merge with rest. tracker for demographics */

use "E:\data\HBMC_HRS\int_data\hrs_merged2.dta", replace  

merge m:1 hhid pn using "E:\data\hrs_cleaned\restr_tracker_v2014.dta", keepus(birth_date hisp_eth white black degree gender)
drop if _m==2
drop _m

cap drop female
gen female = 0 if gender!=.
replace female = 1 if gender==2

gen age = ((c_ivw_date - birth_date)/365.25)
replace age = ceil(age)

gen livealone = 0 if hhm!=. & nhres!=1
replace livealone = 1 if hhm==0

gen adl_dep_core = 0 if adl_index_core!=.
replace adl_dep_core = 1 if  adl_index_core>0 & adl_index_core!=.
label var adl_dep_core "ADL dependent at core"

gen iadl_dep_core = 0 if iadl_ind_core!=.
replace iadl_dep_core = 1 if  iadl_ind_core>0 & iadl_ind_core!=.
label var iadl_dep_core "IADL dependent at core"

gen all = 1

replace hseduc = 0
replace hseduc = 1 if degree>0


local ivars female married hisp_eth black white nhres nhres_2yr resspouse livealone adl_dep_core iadl_dep_core adl_sp_helper iadl_sp_helper hh_worker hseduc srh_pf cesd_tot_ge3
local cvars reschil comor_in_hrs age networth_adj2012 
local ivars2 mcare_claims maid_claims maid_hh mcare_hh

local rd: word count `ivars' `cvars' `ivars2' 1

mat tab1=J(`rd', 2, .)
mat stars=J(`rd',2,0)

local r = 1

foreach x of local ivars {


sum `x' if hcall==1
mat tab1[`r',1] = r(mean)*100

sum `x' if hcall==0
mat tab1[`r',2] = r(mean)*100

tab `x' hcall, chi2
mat stars[`r',2] = (r(p)<.01) + (r(p)<0.05)

local ++r

}

foreach x of local cvars {

sum `x' if hcall==1
mat tab1[`r',1] = r(mean)

sum `x' if hcall==0
mat tab1[`r',2] = r(mean)

ttest `x', by(hcall)
mat stars[`r',2] = (r(p)<.01) + (r(p)<0.05)
local ++r
}

foreach x of local ivars2 {

sum `x' if hcall==1
mat tab1[`r',1] = r(mean)*100

sum `x' if hcall==0
mat tab1[`r',2] = r(mean)*100

tab `x' hcall, chi2
mat stars[`r',2] = (r(p)<.01) + (r(p)<0.05)

local ++r

}

sum all if hcall==1
mat tab1[`r',1] = r(N)

sum all if hcall==0
mat tab1[`r',2] = r(N)

mat rownames tab1 = `ivars' `cvars' `ivars2' "Sample Size"

frmttable using "E:\projects\HBMC_HRS\logs\table1.doc", replace statmat(tab1) ///
varlabels title("HRS 1998-2014: HBMC based on CPT/POS codes in Medicare Carrier") ctitles("", "HBMC", "No HBMC") sdec(2) ///
annotate(stars) asymbol(*,**) ///
note("These are unique people, and only survey data from their most recent HRS interview was used. Housecalls are +/- 90 days of ivw date. *p<0.05, **p<0.01")


H="HRS - Data pull"
libname hrs 'E:\data\hrs_cleaned';
libname maid 'E:\data\CMS_DUA_51675_2014\Medicaid_merged';
libname medcare 'E:\data\CMS_DUA_51675_2014\Merged\SAS';

proc import datafile="E:\data\CMS_DUA_51675_2014\Medicaid_merged\MedicaidXref2012_old.dta" out=medicaidxwalk dbms=stata replace; run;

proc import datafile="E:\data\HBMC_HRS\int_data\hrs_incident_dem.dta" out=firstdem dbms=stata replace; run;


proc sql; /* Community dwelling with any dementia  */
create table hrs_firstdem as select a.*, b.first_dem
from hrs.core_00_to_14 a
inner join firstdem b
on a.id=b.id and a.nhres<1;
quit;

proc sql;
create table hrs_firstdem2 as select a.*, b.bid_hrs_23, c.bid_hrs_22
from hrs.core_00_to_14 a
left join medicaidxwalk b
on a.id=b.id
left join medcare.Xref2015medicare c
on a.id=c.hhidpn;
quit;


proc export data=hrs_firstdem2 outfile="E:\data\HBMC_HRS\int_data\hrs_core_dementiaonly.dta" dbms=stata replace; run;

proc sql;
create table hrs_medicaid as select a.*, b.bid_hrs_23
from hrs_firstdem a
inner join medicaidxwalk b
on a.id=b.id;
quit;

data ot_file;
set maid.hrs_max_ot_99_12;
beg_dos = input(put(beginning_date_of_service,8.),YYMMDD8.);
end_dos = input(put(ending_date_of_service,8.),YYMMDD8.);
admit_year = year(beg_dos);
where msis_type_of_service in:(30,51,13,31,33,26,38,54); *home health claims code;
run;

proc freq data=ot_file; tables beginning_date_of_service beg_dos / missprint; run;

proc freq data=ot_file; tables msis_type_of_service / missprint; run;

proc sql;
create table hrs_medicaid_hh as select a.id, a.core_year, a.bid_hrs_23, b.beg_dos, b.end_dos, b.msis_type_of_service, b.admit_year
from hrs_medicaid a
inner join ot_file b
on a.bid_hrs_23=b.bid_hrs_23 and b.admit_year=a.core_year;
quit;

proc freq data=hrs_medicaid_hh; tables msis_type_of_service; run;

data hrs_medicaid_hh;
set hrs_medicaid_hh;
if msis_type_of_service=13 then medicaid_hh = 1;
if msis_type_of_service=26 then medicaid_trn = 1;
if msis_type_of_service=30 then medicaid_pc = 1;
if msis_type_of_service=31 then medicaid_tcm = 1;
if msis_type_of_service=33 then medicaid_reh = 1;
if msis_type_of_service=38 then medicaid_pdn = 1;
if msis_type_of_service ne . then medicaid_hbmc = 1;
run;

proc sql; /* sample size for hh per year */
create table hh_annual as select distinct bid_hrs_23, core_year,
sum(medicaid_hh) as medicaid_hh,
sum(medicaid_trn) as medicaid_trn,
sum(medicaid_pc) as medicaid_pc,
sum(medicaid_tcm) as medicaid_tcm,
sum(medicaid_reh) as medicaid_reh,
sum(medicaid_pdn) as medicaid_pdn,
sum(medicaid_hbmc) as medicaid_hbmc
from hrs_medicaid_hh group by bid_hrs_23, core_year;
quit;

data hh_annual2;
set hh_annual;
array list medicaid_hh--medicaid_hbmc;
do over list;
if list>=1 then list=1;
end;
run;

proc sort data=hh_annual2 nodupkey; by bid_hrs_23 core_year; run;

proc export data=hh_annual2 outfile="E:\data\HBMC_HRS\int_data\medicaid_hh_annual.dta" dbms=stata replace; run; /*annualized medicaid hh */


/* Merge with Medicare crosswalk */

proc sql;
create table hrs_mcare as select a.*, b.bid_hrs_22
from hrs.core_00_to_14 a
inner join medcare.xref2015medicare b
on a.id=b.hhidpn;
quit;

/* Check for cpt and pos codes in carrier file */

* Split carrier file into half due to size;
data carrier_06 (keep = bid_hrs_22 admit_date disch_date admit_year hcpcs_cd PLCRVC01-PLCRVC13);
set medcare.pb_1998_2015;
array dx hcpscd01--hcpscd13;
do over dx;
hcpcs_cd = dx;
output;
end;
where admit_year<=2006;
run;

data carrier_06 (drop = PLCRVC01-PLCRVC13);
set carrier_06;
cptcodes1 = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
posflag = 0;
array dx PLCRVC01-PLCRVC13;
do over dx;
if dx in:(12,13,14) then posflag =1;
end;
run;

data carrier_06;
set carrier_06;
cptflag = 0;
if 99341<=cptcodes1<=99350 or 99324<=cptcodes1<=99328 or 99334<=cptcodes1<=99337 then cptflag = 1;
run; 

data carrier_06;
set carrier_06;
where cptflag=1 or posflag = 1;
run;

proc sort data=carrier_06 nodupkey; by bid_hrs_22 admit_date disch_date; run;

* other half;

data carrier_15 (keep = bid_hrs_22 admit_date disch_date admit_year hcpcs_cd PLCRVC01-PLCRVC13);
set medcare.pb_1998_2015;
array dx hcpscd01--hcpscd13;
do over dx;
hcpcs_cd = dx;
output;
end;
where 2007<=admit_year<=2015;
run;

data carrier_15 (drop = PLCRVC01-PLCRVC13);
set carrier_15;
cptcodes1 = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
posflag = 0;
array dx PLCRVC01-PLCRVC13;
do over dx;
if dx in:(12,13,14) then posflag =1;
end;
run;

data carrier_15;
set carrier_15;
cptflag = 0;
if 99341<=cptcodes1<=99350 or 99324<=cptcodes1<=99328 or 99334<=cptcodes1<=99337 then cptflag = 1;
run; 

data carrier_15;
set carrier_15;
where cptflag=1 or posflag = 1;
run;

proc sort data=carrier_15 nodupkey; by bid_hrs_22 admit_date disch_date; run;

data carrier2;
set carrier_06 carrier_15;
by bid_hrs_22;
if cptflag=1 and posflag=1 then housecall = 1;
admit_year = year(admit_date);
run;

proc sql;
create table carrier3_dem as select a.*, b.core_year
from carrier2 a
inner join hrs_firstdem2 b
on a.bid_hrs_22=b.bid_hrs_22 and a.admit_year=b.core_year;
quit;


proc sql; /* collapse into single row per person per year */
create table mcare_annual as select distinct bid_hrs_22, core_year,
sum(cptflag) as cpt_flag,
sum(posflag) as pos_flag,
sum(housecall) as both_flag
from carrier3_dem group by bid_hrs_22, core_year;
quit;

proc sort data=mcare_annual out=mcare_total nodupkey; by bid_hrs_22; run; 

data mcare_annual;
set mcare_annual;
if cpt_flag>=1 then cpt_flag=1;
if pos_flag>=1 then pos_flag=1;
if both_flag>=1 then both_flag=1;
run;

proc sort data=mcare_annual nodupkey; by bid_hrs_22 core_year; run;

proc export data=mcare_annual outfile="E:\data\HBMC_HRS\int_data\medicare_carrier_annual.dta" dbms=stata replace; run;

/* Medicare home health */

data hrs_hh (keep = bid_hrs_22 claim_id_hrs_22 admit_date disch_date admit_year per_part_b val_cd01-val_cd36  typesrvc);
set medcare.hh_1998_2015;
if typesrvc = "2" then per_part_b = 1;
run;

data hrs_hh (drop = val_cd01-val_cd36);
set hrs_hh;
hh_val_a = 0;
hh_val_b = 0;
array val val_cd01--val_cd36;
do over val;
if val in:("62","64") then hh_val_a = 1;
if val in:("63","65") then hh_val_b = 1;
end;
run;


proc freq data=hrs_hh; tables hh_val_a * admit_year hh_val_b * admit_year; run;

proc sql;
create table hrs_hh2 as select a.*, b.core_year
from hrs_hh a
inner join hrs_firstdem2 b
on a.bid_hrs_22=b.bid_hrs_22 and a.admit_year=b.core_year;
quit;

proc sql; /*unique people per year */
create table hrs_hh_annual as select bid_hrs_22, core_year,
count(admit_year ne .) as num_hh_claim,
count(per_part_b) as per_part_b,
sum(hh_val_a) as hh_val_a,
sum(hh_val_b) as hh_val_b
from hrs_hh2 group by bid_hrs_22, core_year;
quit;

data hrs_hh_annual;
set hrs_hh_annual;
hh_claim = 1;
hh_part_b = 0;
hh_val_p_b = 0;
hh_val_p_a = 0;
if per_part_b>0 then hh_part_b = 1;
if hh_val_b > 0 then hh_val_p_b = 1;
if hh_val_a > 0 then hh_val_p_a = 1;
run;

proc sort data=hrs_hh_annual nodupkey; by bid_hrs_22 core_year; run;

proc export data=hrs_hh_annual outfile="E:\data\HBMC_HRS\int_data\medicare_hh_annual.dta" dbms=stata replace; run;

/* Merge back with HRS dataset */

proc sql;
create table hh_join as select a.*, b.*, c.cpt_flag, c.both_flag, d.hh_claim, d.num_hh_claim, d.per_part_b, d.hh_part_b, d.hh_val_b, d.hh_val_p_b, d.hh_val_a, d.hh_val_p_a
from hrs_firstdem2 a 
left join hh_annual2 b
on a.bid_hrs_23=b.bid_hrs_23 and a.core_year=b.core_year
left join mcare_annual c
on a.bid_hrs_22=c.bid_hrs_22 and a.core_year=c.core_year
left join hrs_hh_annual d
on a.bid_hrs_22=d.bid_hrs_22 and a.core_year=d.core_year;
quit;

proc export data=hh_join outfile="E:\data\HBMC_HRS\int_data\hrs_p01.dta" dbms=stata replace; run;

H="HRS - Determining FFS "
/* Stata Code */

use "E:\data\HBMC_HRS\int_data\hrs_p01.dta", replace

cap drop _m
merge 1:1 id core_year using "E:\data\hrs_public_2014\dementia\pdem_withvarnames_00_14.dta", keepus(pdem)


gen dementia = 0
replace dementia = 1 if pdem>=0.5 & pdem!=.

keep id bid_hrs_22 c_ivw_date c_ivw_month c_ivw_year dementia

rename c_ivw_month index_month
rename c_ivw_year index_year
rename c_ivw_date index_date

keep if dementia==1

saveold "E:\data\HBMC_HRS\int_data\index_dates.dta", version(12) replace

/* SAS Code */

libname medi  'E:\data\CMS_DUA_51675_2014\Merged\SAS';
libname proj_int "E:\data\HBMC_HRS\int_data";
 
proc import datafile="E:\data\HBMC_HRS\int_data\index_dates.dta" out=proj_int.index dbms=stata replace; run;

/*sort claims denominator file*/

proc sort data=medi.bqsf_1998_2015 out=dn  nodupkey;
by bid_hrs_22 start_dt;
run;

proc sort data=proj_int.index out=index1 nodupkey;
by bid_hrs_22 index_year;
run;

/*get dn just for interview year*/

proc sql; 
create table dn_index_quarter as select
a.*,b.ab_mo_cnt,b.start_dt,b.end_dt,b.hmo_mo
from index1 a inner join
dn b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22)) 
and b.start_dt<=a.index_date<=b.end_dt;
quit;


data all_insurance_0 (rename=(hmo_mo=hmo0 ab_mo_cnt=ab0));
set dn_index_quarter;
ffs0=ab_mo_cnt>=1 & hmo_mo=0;
set dn_index_quarter;
format index_date date9.;
run;

data all_insurance_0b;
set all_insurance_0;
ab_mos0=ab0;
if ffs0=1 then ffs_mos0=ab_mos0;
if ffs0=0 then ffs_mos0=0;
run;


%macro insyrs(numyrs=);
%let y=%eval(&numyrs.*4);
%do i=1 %to &y.;

%let l=%eval(&i.-1);
proc sql; 
create table dn&i. as select
a.*,b.ab_mo_cnt,b.start_dt,b.end_dt,b.hmo_mo
from index1 a inner join
dn b
on trim(left(a.bid_hrs_22))=trim(left(b.bid_hrs_22)) 
and b.start_dt<=a.index_date-(&i.*(365.25/4))<=end_dt;
quit;

data all_insurance_&i.(rename=(hmo_mo=hmo&i. ab_mo_cnt=ab&i.)); 
set dn&i.;
ffs&i.=ab_mo_cnt>=1 & hmo_mo=0;
format index_date date9.;
run;

proc sql;
create table all_insurance_&i.2 as select * from
all_insurance_&l.b a
left join
all_insurance_&i. b
on a.bid_hrs_22=b.bid_hrs_22;
quit;

data all_insurance_&i.b (drop=ab_mos&l. ffs_mos&l.);
set all_insurance_&i.2;
ab_mos&i.=ab_mos&l.+ab&i.;
if ffs&i.=. then ffs&i.=0;
if ffs&l.=0 then ffs&i.=0;
if ffs&i.=1 then ffs_mos&i.=ab&i.+ffs_mos&l.;
if ffs&i.=0 then ffs_mos&i.=ffs_mos&l.;
run;

%end;

data all_insurance;
set all_insurance_&y.b;
cont_ffs_n_mos=ffs_mos&y.;
run;
%mend;




%insyrs(numyrs=1);


data proj_int.ffs_before;
set all_insurance;
run;

proc export data=proj_int.ffs_before outfile="E:\data\HBMC_HRS\int_data\ffs_before.dta" replace; run;

H="HRS - P01 Sample Size"
use "E:\data\HBMC_HRS\int_data\hrs_p01.dta", replace

cap drop _m
merge 1:1 id core_year using "E:\data\hrs_public_2014\dementia\pdem_withvarnames_00_14.dta", keepus(pdem)

gen dementia = 0
replace dementia = 1 if pdem>=0.5 & pdem!=.

replace both_flag = 0
replace both_flag = 1 if cpt_flag==1

drop _m

local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen index_date = c_ivw_date

drop if c_ivw_date==.
merge 1:1 id index_date using "E:\data\HBMC_HRS\int_data\ffs_before.dta", keepus(cont_ffs_n_mos)
drop _m

gen has_medicaid =0
replace has_medicaid = 1 if bid_hrs_23!=""
label var has_medicaid "Has Medicaid Claims"

gen dem_maid = 0
replace dem_maid = 1 if dementia==1 & has_medicaid==1
label var dem_maid "Has Dementia & Medicaid"

gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.
label var ffs_6m "Has >=6m of Medicare FFS prior to ivw"

gen has_medicare = 0
replace has_medicare = 1 if bid_hrs_22!=""
label var has_medicare "Has Medicare Claims"

local needem medicaid_hh medicaid_trn medicaid_pc medicaid_tcm medicaid_reh medicaid_pdn medicaid_hbmc

foreach x of local needem { /* restricting columns to dementia + mediciad */
replace `x' = 0 if dem_maid==0
}

gen dem_ffs = 0
replace dem_ffs = 1 if dementia==1 & ffs_6m==1


local cvars all dementia dem_maid medicaid_hh medicaid_trn medicaid_pc medicaid_tcm medicaid_reh medicaid_pdn medicaid_hbmc // hh_claim both_flag
local full: word count `cvars'
mat tab1=J(9,`full',.)
local r = 1
local c = 1

preserve
keep if nhres==0

forvalues i=1998(2)2014 {

	foreach x of local cvars {
	
sum `x' if core_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}

mat rownames tab1 = "1998" "2000" "2002" "2004" "2006" "2008" "2010" "2012" "2014" 

frmttable using `logpath'\HRS_P01_SampleSize_`date'.doc, replace statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia: Medicaid HBCS Breakdown") ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + Medicaid", "Medicaid HH" "Transport" "Personal Care" "Targeted Case Mang." "Rehab Services" "Priv. Duty Nurse" "Any HBCS") sdec(0) ///
note("Medicaid HCBS Utilization restricted to people with Dementia") 

foreach x of varlist medicaid_hbmc hh_claim both_flag {
replace `x' = 0 if dem_ffs==0
}


local cvars all dementia dem_ffs medicaid_hbmc hh_claim both_flag
local full: word count `cvars'
mat tab1=J(9,`full',.)
local r = 1
local c = 1

forvalues i=1998(2)2014 {

	foreach x of local cvars {
	
sum `x' if core_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}

mat rownames tab1 = "1998" "2000" "2002" "2004" "2006" "2008" "2010" "2012" "2014" 

frmttable using `logpath'\HRS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia: Prevalence Sample Size") ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Any Medicaid HCBS" "Medicare HH" "Medicare HBMC" ) sdec(0) ///
note("Medicare/Medicaid Utilization restricted to people with Dementia & 6m Medicare FFS prior to ivw")

restore

/* Identifying Incident Dementia + Community Dwelling */

cap drop _m

merge m:1 id using "E:\data\hrs_cleaned\death_date_2014.dta", keepus(death_year death_all)
drop if _m==2
drop _m

gen year = core_year
merge 1:1 id year using "E:\data\hrs_cleaned\helper_hours_2016.dta", keepus(n_i n_f)
drop if _m==2
drop _m


preserve
keep if dementia==1 & nhres==0
gsort id core_year
by id: gen firstdem = 1 if _n==1 // incident dementia
keep if firstdem==1
rename core_year incident_year
tempfile firstdem
save `firstdem'
restore

preserve
keep if both_flag==1
keep id
duplicates drop
gen any_mc_hbmc = 1
tempfile any
save `any'
restore

preserve
keep if medicaid_hbmc==1
keep id 
duplicates drop
gen any_md_hbmc = 1
tempfile any2
save `any2'
restore


merge m:1 id using "`firstdem'", keepus(incident_year)
drop _m
drop if core_year<incident_year
merge m:1 id using "`any'", keepus(any_mc_hbmc)
drop if _m==2
drop _m

merge m:1 id using "`any2'", keepus(any_md_hbmc)
drop if _m==2
drop _m

gsort id core_year
by id: gen dwave = _n

gen informal = 0
replace informal = 1 if n_i>0 & n_i!=.
label var informal "Any unpaid helpers"

gen formal = 0
replace formal = 1 if n_f>0 & n_f!=.
label var formal "Any paid helpers"

gen anyhelp = 0
replace anyhelp = 1 if formal==1 | informal==1
label var anyhelp "Any Paid/Unpaid Helpers"

gen nohelp = 0
replace nohelp = 1 if anyhelp==0
label var nohelp "No Helpers" 

label var both_flag "Medicare HBMC in calendar year"
label var any_mc_hbmc "Any Medicare HBMC 1998-2015"
label var any_md_hbmc "Any Medicaid HH/HCBS 1999-2012"
label var medicaid_hbmc "Medicaid HH/HCBS in calendar year"

gen any_hbmc = 0
replace any_hbmc = 1 if any_mc_hbmc==1 | any_md_hbmc==1
label var any_hbmc "Any Medicare HBMC or Medicaid HH/HCBS 1998-2015"

label var all "# at Risk (Unqiue People)"
label var hh_claim "Medicare HH claim in calendar year"
label var medicaid_hh "Medicaid HH claim in calendar year"
gsort id -core_year

by id: gen death_sy = 1 if death_year==core_year
label var death_sy "Died after ivw in the same calendar year"
by id: gen death_ny = 1 if (death_year>core_year & _n==1 & death_year!=.)
label var death_ny "Last observed ivw, dies year(s) after ivw"

gsort id core_year
by id: gen obs=_n
by id: gen ltf = 1 if obs==_n & obs[_n+1]==.



local ivars death_sy death_ny nhres informal formal anyhelp nohelp both_flag hh_claim medicaid_hh has_medicare has_medicaid medicaid_hbmc any_mc_hbmc any_md_hbmc any_hbmc all

local full: word count `ivars'
mat tab1=J(`full',9,.)
local r=1
local c=1

foreach x of local ivars {
	forvalues i=1/9 {
	sum `x' if dwave==`i'
	mat tab1[`r',`c']=r(sum)
	local ++c
	}
	
	local c = 1
	local ++r
	}
	
mat rownames tab1 = `ivars'

frmttable using `logpath'\HRS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia: Following People from Incident Dementia") ctitles("Variables", "Year 1", "Year 3", "Year 5", "Year 7", "Year 9", "Year 11", "Year 13", "Year 15", "Year 17") sdec(0) ///
note("Each Year represents a HRS core interview, which occurs every 2 years. Sample is pulled from HRS 1998-2014 core interviews.")


local ivars death_sy death_ny nhres informal formal anyhelp nohelp both_flag hh_claim medicaid_hh has_medicare has_medicaid medicaid_hbmc any_mc_hbmc any_md_hbmc any_hbmc all

gen keepvar = 0

levelsof id if dwave==1 & ffs_6m==1, local(index) 

foreach x of local index {

replace keepvar = 1 if id=="`x'"

}

keep if keepvar==1






local full: word count `ivars'
mat tab1=J(`full',9,.)
local r=1
local c=1

foreach x of local ivars {
	forvalues i=1/9 {
	sum `x' if dwave==`i'
	mat tab1[`r',`c']=r(sum)
	local ++c
	}
	
	local c = 1
	local ++r
	}
	
mat rownames tab1 = `ivars'

frmttable using `logpath'\HRS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia + 6m FFS at Incident: Following People from Incident Dementia") ctitles("Variables", "Year 1", "Year 3", "Year 5", "Year 7", "Year 9", "Year 11", "Year 13", "Year 15", "Year 17") sdec(0) ///
note("Each Year represents a HRS core interview, which occurs every 2 years. Sample is pulled from HRS 1998-2014 core interviews.")





replace both_flag = 0 if nhres==1
replace hh_claim = 0 if nhres==1 | both_flag==1
replace anyhelp = 0 if nhres==1 | both_flag==1 | hh_claim==1

gen no_support = 1
replace no_support = 0 if nhres==1 | both_flag==1 | hh_claim==1 | anyhelp==1 

gen death = 0
replace death = 1 if death_sy==1 | death_ny==1

label var ltf "Loss to follow-up"

local ivars nhres both_flag hh_claim anyhelp no_support all 
local ivars2 death

local full: word count `ivars' `ivars2'
mat tab1=J(`full',9,.)
local r=1
local c=1

foreach x of local ivars {
	forvalues i=1/9 {
	sum `x' if dwave==`i'
	mat tab1[`r',`c']=r(sum)
	local ++c
	}
	
	local c = 1
	local ++r
	}

	
	local c = 2

forvalues i = 2/9 {
	
sum death if dwave==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}



mat rownames tab1 = `ivars' `ivars2'

frmttable using `logpath'\HRS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia + 6m FFS at Incident: Following People from Incident Dementia") ctitles("Variables", "Year 1", "Year 3", "Year 5", "Year 7", "Year 9", "Year 11", "Year 13", "Year 15", "Year 17") sdec(0) ///
note("Each Year represents a HRS core interview, which occurs every 2 years. Missing Interviews are not counted as loss to followup.")




H="NHATS - Sample Pull"
libname claims "E:\nhats\data\NHATS CMS DUA 28016\Merged\SAS";
libname cumu "E:\nhats\data\NHATS CMS DUA 28016\Cumulative";


data nhats_hh (keep = bene_id admit_year admit_date disch_date clm_srvc_clsfctn_type_cd per_part_b val_cd_part_a val_cd_part_b)  ;
set claims.hh_09_17;
admit_year = year(admit_date);
if clm_srvc_clsfctn_type_cd="2" then per_part_b = 1;
run;

proc freq data=nhats_hh; tables clm_srvc_clsfctn_type_cd; run;


proc sql; /*unique people per year */
create table nhats_hh_annual as select bene_id, admit_year,
count(admit_year ne .) as num_hh_claim,
count(per_part_b) as per_part_b,
sum(val_cd_part_a) as val_cd_part_a,
sum(val_cd_part_b) as val_cd_part_b
/* clm_hha_tot_visit_cnt as clm_hha_tot_visit_cnt */
from nhats_hh group by bene_id, admit_year;
quit;

proc freq data=nhats_hh_annual; tables per_part_b; run;

proc sort data=nhats_hh_annual out=nhats_hh_total nodupkey; by bene_id; run; /* unique people */

data nhats_hh_annual;
set nhats_hh_annual;
hh_claim = 1;
hh_part_b = 0;
if per_part_b>0 then hh_part_b = 1;
hh_val_a = 0;
hh_val_b = 0;
if val_cd_part_a>0 then hh_val_a = 1;
if val_cd_part_b>0 then hh_val_b = 1;
run;

proc freq data=nhats_hh_annual; tables hh_claim hh_part_b; run;

/*
proc sql;
create table nhats_hh_annual2 as select distinct admit_year,
sum(hh_claim) as mc_hh_claim
from nhats_hh_annual group by admit_year;
quit;

data nhats_hh_total;
set nhats_hh_total;
hh_claim = 1;
admit_year = 2018;
run;

proc sql;
create table nhats_hh_total2 as select distinct admit_year,
sum(hh_claim) as mc_hh_claim
from nhats_hh_total group by admit_year;
quit;

data nhats_hh_annual3;
set nhats_hh_annual2 nhats_hh_total2;
by admit_year;
run; 


proc export data=nhats_hh_annual3 outfile="E:\data\HBMC_HRS\int_data\nhats_hh.dta" dbms=stata replace; run;

*/



/********** Identifying house calls ************/

/* Identifying house calls */

data carrier;
set claims.pb_09_17;
admit_year = year(admit_date);
array dx hcpcscd1--hcpcscd13;
do over dx;
hcpcs_cd=dx;
output;
end;
run;

data carrier1;
set carrier;
cptcodes1 = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
run;

data carrier1;
set carrier1;
cpt1flag = 0;
if 99341<=cptcodes1<=99350 or 99324<=cptcodes1<=99328 or 99334<=cptcodes1<=99337 then cpt1flag = 1;
run;

proc sort data=carrier1 nodupkey; by bene_id clm_id; run;

data carrierline (keep = bene_id clm_id LINE_PLACE_OF_SRVC_CD cptcodes);
set cumu.bcarrier_line_j_09_17;
cptcodes = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
run;

data carrierline;
set carrierline;
if 99341<=cptcodes<=99350 or 99324<=cptcodes<=99328 or 99334<=cptcodes<=99337 then cptflag=1;
if LINE_PLACE_OF_SRVC_CD in:(12,13,14) then posflag=1;
run;

proc freq data=carrierline; tables cptflag posflag; run;

data linecalls;
set carrierline;
where cptflag = 1 or posflag = 1;
run;

proc sql;
create table carrier2 as select a.*, b.*
from carrier1 a
full outer join linecalls b
on a.bene_id=b.bene_id and a.clm_id = b.clm_id;
quit;

data carrier2;
set carrier2;
where cptflag = 1 or cpt1flag = 1 or posflag = 1;
admit_year = year(admit_date);
run;

proc sort data=carrier2 nodupkey; by bene_id clm_id; run;

proc sort data=carrier2 out=carrier3 nodupkey; by bene_id; run;

proc freq data=carrier2; tables cptflag cpt1flag; run;

data carrier2;
set carrier2;
both_flag = 0;
if (cptflag=1 or cpt1flag=1) and posflag=1 then both_flag =1;
if (cptflag=1 or cpt1flag=1) then cptflag=1;
run;

proc sql;
create table pb_annual as select distinct bene_id, admit_year,
sum(cptflag) as cptflag,
sum(posflag) as posflag,
sum(both_flag) as both_flag
from carrier2
group by bene_id, admit_year;
quit;

data pb_annual;
set pb_annual;
if cptflag>=1 then cptflag=1;
if posflag>=1 then posflag=1;
if both_flag>=1 then both_flag=1;
run;

proc sql;
create table nhats as select a.*, b.cptflag, b.both_flag
from nhats_hh_annual a
left join pb_annual b 
on a.bene_id=b.bene_id and a.admit_year=b.admit_year;
quit;

data nhats (rename=(admit_year=index_year));
set nhats;
run;

proc export data=nhats outfile="E:\data\HBMC_HRS\int_data\nhats_claims.dta" replace; run;

H="NHATS - Sample Size Table"
use "E:\nhats\data\Projects\serious_ill\final_data\serious_ill_nhats_sample.dta" , clear

gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.

merge 1:1 bene_id index_year using "E:\data\HBMC_HRS\int_data\nhats_claims.dta"
drop if _m==2

replace both_flag = 0
replace both_flag = 1 if cptflag==1 


local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen dem_ffs = 0
replace dem_ffs = 1 if prob_dem==1 & ffs_6m==1 

gen both_hbmc = 0
replace both_hbmc = 1 if reg_doc_homevisit==1 | both_flag==1

gen unrestr_hbmc = both_hbmc



foreach x of varlist reg_doc_homevisit hh_claim both_flag both_hbmc {
replace `x' = 0 if dem_ffs==0
}

local cvars all prob_dem dem_ffs reg_doc_homevisit hh_claim both_flag both_hbmc


local full: word count `cvars'
mat tab1=J(6,`full',.)
local r = 1
local c = 1

preserve
keep if community_dwelling==1

forvalues i=2011/2016 {

	foreach x of local cvars {
	
sum `x' if index_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}

mat rownames tab1 ="2011" "2012" "2013" "2014" "2015" "2016"



frmttable using `logpath'\NHATS_P01_SampleSize_`date'.doc, replace statmat(tab1) ///
varlabels title("Community Dwelling NHATS 2011-2016: Prevelance/Cross-Section ") ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Self Report HBMC", "Medicare HH", "Medicare HBMC", "Self-Report or Medicare HBMC") sdec(0) ///
note("Utilization/Self Report restricted to Dementia + 6m FFS. Medicare HBMC not restricted by POS.")

restore
tempfile nhats
save `nhats'


/*Over time analysis */

use "E:\nhats\data\Projects\serious_ill\final_data\serious_ill_nhats_sample.dta", replace

keep if wave==1
gen old_cohort = 1
label var old_cohort "Original Cohort in Wave 1"
tempfile old

save `old'

use `nhats', clear
cap drop _m
merge m:1 spid using "`old'", keepus(old_cohort) update replace
drop if _m==2
drop _m

replace old_cohort = 0 if old_cohort==.

egen total_unrestr_hbmc = count(unrestr_hbmc)


replace wave=1 if old_cohort==0 & wave==5
replace wave=2 if old_cohort==0 & wave==6

gsort spid wave
preserve
keep if prob_dem==1
by spid: gen firstdem = 1 if _n==1
gen anydem =1
keep if community_dwelling==1
keep spid wave firstdem anydem
tempfile firstdem
save `firstdem'
keep if firstdem==1
rename wave inc_wave
duplicates drop spid, force
tempfile anydem
save `anydem'

restore

cap drop _m
merge 1:1 spid wave using "`firstdem'", keepus(firstdem)
cap drop _m
merge m:1 spid using "`anydem'", keepus(anydem inc_wave) 
keep if _m==3


drop if wave<inc_wave

gsort spid wave

by spid: gen dwave = _n

/*
levelsof spid if community_dwelling==1 & wave==1, local(keep)


gen keeplist =0
foreach x of local keep {
replace keeplist = 1 if spid==`x'
}
keep if keeplist==1
*/

gen informal = 0
replace informal = 1 if ind_family_helper==1 | otherinformal_help_ind==1

gen anyhelp = 0
replace anyhelp = 1 if paid_help_ind==1 | informal==1

label var informal "Any unpaid helpers"
label var anyhelp "Any Paid/Unpaid Helpers"
label var both_flag "Medicare HBMC"
label var all "# at Risk (Unique People)"

preserve
tempfile hbmc
keep if both_flag==1
gen any_hbmc = 1
keep spid any_hbmc
duplicates drop spid, force
save `hbmc'
restore

preserve
tempfile hbmc2
keep if both_hbmc==1
gen any_bothhbmc = 1
keep spid any_bothhbmc
duplicates drop spid, force
save `hbmc2'
restore


cap drop _m
merge m:1 spid using "`hbmc'", keepus(any_hbmc) 
drop _m
merge m:1 spid using "`hbmc2'", keepus(any_bothhbmc)
drop _m
label var any_hbmc "Any Medicare HBMC 2011-16"
label var any_bothhbmc "Self Report or Medicare HBMC 2011-16"
label var reg_doc_homevisit "Self Report HBMC"
label var both_hbmc "Self Report or Medicare HBMC"

gsort spid -index_year

by spid: gen death_sy = 1 if death_year==index_year
label var death_sy "Died after ivw in the same calendar year"
by spid: gen death_ny = 1 if (death_year>index_year & _n==1 & death_year!=.)
label var death_ny "Last observed ivw, dies year(s) after ivw"
local ivars death_sy death_ny nhres informal ind_paid_helper ind_no_helpers anyhelp both_flag reg_doc_homevisit any_hbmc both_hbmc any_bothhbmc all
label var hh_claim "Medicare HH Claim"

gsort spid index_year
by spid: gen obs=_n
by spid: gen ltf = 1 if obs==_n & obs[_n+1]==.



local full: word count `ivars'
mat tab1=J(`full', 6,.)
local r = 1
local c = 1
 

 
foreach x of local ivars {

forvalues i = 1/6 {
	
sum `x' if dwave==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}

mat rownames tab1 = `ivars'

mat list tab1

frmttable using `logpath'\NHATS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("NHATS 2011-2016: Following People from Incident Dementia+Community Dwelling") ctitles("Variables", "Year 1", "Year 2", "Year 3", "Year 4", "Year 5", "Year 6") sdec(0) ///
note("People must be community dwelling at incident wave only (Year 1). Medicare HBMC not restricted by POS")


gen keeplist = 0

levelsof spid if ffs_6m==1 & dwave==1, local(keeplist)

foreach x of local keeplist {

replace keeplist = 1 if spid==`x'
}

keep if keeplist==1


local ivars death_sy death_ny nhres informal ind_paid_helper ind_no_helpers anyhelp both_flag reg_doc_homevisit hh_claim any_hbmc both_hbmc any_bothhbmc all

local full: word count `ivars'
mat tab1=J(`full', 6,.)
local r = 1
local c = 1
 

 
foreach x of local ivars {

forvalues i = 1/6 {
	
sum `x' if dwave==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}

mat rownames tab1 = `ivars'

mat list tab1

frmttable using `logpath'\NHATS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("NHATS 2011-2016: Following People from Incident Dementia+Community Dwelling+6m FFS") ctitles("Variables", "Year 1", "Year 2", "Year 3", "Year 4", "Year 5", "Year 6") sdec(0) ///
note("People must be community dwelling and >=6m FFS at incident wave only (Year 1). Medicare HBMC not restricted by POS.")



replace both_hbmc = 0 if nhres==1
replace hh_claim = 0 if nhres==1 | both_hbmc==1
replace anyhelp = 0 if nhres==1 | both_hbmc==1 | hh_claim==1


gen death = 0
replace death = 1 if death_sy==1 | death_ny==1
label var death "Died"


gen no_support = 1
replace no_support = 0 if nhres==1 | both_hbmc==1 | hh_claim==1 | anyhelp==1

label var ltf "Loss to followup"

local ivars nhres both_hbmc hh_claim anyhelp no_support all 
local ivars2 death

local full: word count `ivars' `ivars2'
mat tab1=J(`full', 6,.)
local r = 1
local c = 1
 

 
foreach x of local ivars {

forvalues i = 1/6 {
	
sum `x' if dwave==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}


local c = 2

forvalues i = 1/5 {
	
sum death if dwave==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}



mat rownames tab1 = `ivars' `ivars2'

mat list tab1

frmttable using `logpath'\NHATS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("NHATS 2011-2016: Following People from Incident Dementia+Community Dwelling+6m FFS") ctitles("Variables", "Year 1", "Year 2", "Year 3", "Year 4", "Year 5", "Year 6") sdec(0) ///
note("People must be community dwelling and >=6m FFS at incident wave only (Year 1). Medicare HBMC not restricted by POS. Categories are Mutually Exclusive.")

use `nhats', clear
keep if community_dwelling==1

replace unrestr_hbmc = . if unrestr_hbmc==0

mat tab1 = J(3,3,.)

sum unrestr_hbmc
mat tab1[1,1]=r(sum)

sum unrestr_hbmc if prob_dem==1
mat tab1[2,1]=r(sum)

sum unrestr_hbmc if prob_dem==1 & ffs_6m==1
mat tab1[3,1]=r(sum) 

sum all
mat tab1[1,2]=r(sum)

*sum all if prob_dem==1
mat tab1[2,2]=r(sum)

*sum all if prob_dem==1 & ffs_6m==1
mat tab1[3,2]=r(sum) 

mat tab1[1,3] = (tab1[1,1]/tab1[1,2])*1000 
mat tab1[2,3] = (tab1[2,1]/tab1[1,2])*1000
mat tab1[3,3] = (tab1[3,1]/tab1[1,2])*1000

mat rownames tab1 = "Community Dwelling HBMC" "Community Dwelling HBMC: Dementia" "Community Dwelling HBMC: Dementia 6m FFS"
frmttable using `logpath'\NHATS_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("NHATS 2011-2016: HBMC Per Person Wave") ctitles("Variables", "Categories", "# HBMC", "# Person Waves at Risk", "Per 1000 Person Waves") sdec(2) ///
note("HBMC = Medicare or Self Report")

H="BOTH - Sample Size Table"
/********* NHATS ***********/ 

use "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", clear

gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.

merge 1:1 bene_id index_year using "E:\data\HBMC_HRS\int_data\nhats_claims.dta"
drop if _m==2
keep if community_dwelling==1

replace hh_part_b = hh_val_b // replacing type service with value code for binary part b indicator
replace per_part_b = val_cd_part_b
replace prob_dem = 0 if prob_dem==.

replace both_flag = 0
replace hh_claim = 0 if hh_claim==.
replace num_hh_claim = 0 if num_hh_claim==.
replace per_part_b = 0 if per_part_b==.
replace hh_part_b = 0 if hh_part_b==.
replace both_flag = 1 if cptflag==1 


local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen dem_ffs = 0
replace dem_ffs = 1 if prob_dem==1 & ffs_6m==1 

gen both_hbmc = 0
replace both_hbmc = 1 if reg_doc_homevisit==1 | both_flag==1

gen unrestr_hbmc = both_hbmc

gen hbmc_hh = 0
replace hbmc_hh = 1 if both_hbmc==1 & hh_claim==1

gen hbmc_nohh = 0
replace hbmc_nohh = 1 if both_hbmc==1 & hh_claim==0

/*
foreach x of varlist both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim per_part_b {
replace `x' = 0 if dem_ffs==0
}
*/

foreach x of varlist both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim per_part_b {
replace `x' = 0 if prob_dem==0
}




local cvars all prob_dem dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b


local full: word count `cvars'
di "`full'"
mat tab1=J(8,`full',.)
local r = 1
local c = 1



forvalues i=2011/2017 {

	foreach x of local cvars {
	
sum `x' if index_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}
preserve

collapse (sum) num_hh_claim per_part_b, by(spid)
tempfile coll
save `coll'
restore

collapse (max) all prob_dem dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh, by(spid)
merge 1:1 spid using `coll'

local c = 1
foreach x of local cvars {
	
sum `x' 
mat tab1[`r',`c'] = r(sum)

local ++c
}



forvalues i = 1/8 {

mat tab1[`i',10] = tab1[`i',10]/tab1[`i',5]
mat tab1[`i',11] = ((tab1[`i',11]/tab1[`i',9])*100)
}

mat rownames tab1 ="2011" "2012" "2013" "2014" "2015" "2016" "2017" "Unique People"


frmttable using `logpath'\BOTH_P01_SampleSize_`date'.doc, replace statmat(tab1) ///
varlabels title("Community Dwelling NHATS 2011-2017: Prevelance/Cross-Section ") ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Self Report or Claims HBMC", "Medicare HH", "Medicare HH Part B", "HBMC + HH" "HBMC, no HH", "Total # of HHA episodes", "Ave. # of HHA episodes", "% of HHA episodes Part B") sdec(0,0,0,0,0,0,0,0,0,2,2) ///
note("Restricted to Community Dwelling + Dementia at every wave. No FFS restriction. Ave # of HHA episodes is conditional on having a HHA episode.")



use "E:\nhats\data\Projects\serious_ill\int_data\serious_ill_int_dataset1.dta", clear

gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.

merge 1:1 bene_id index_year using "E:\data\HBMC_HRS\int_data\nhats_claims.dta"
drop if _m==2
keep if community_dwelling==1

replace hh_part_b = hh_val_b // replacing type service with value code for binary part b indicator
replace per_part_b = val_cd_part_b
replace prob_dem = 0 if prob_dem==.

replace both_flag = 0
replace hh_claim = 0 if hh_claim==.
replace num_hh_claim = 0 if num_hh_claim==.
replace per_part_b = 0 if per_part_b==.
replace hh_part_b = 0 if hh_part_b==.
replace both_flag = 1 if cptflag==1 


local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen dem_ffs = 0
replace dem_ffs = 1 if prob_dem==1 & ffs_6m==1 

gen both_hbmc = 0
replace both_hbmc = 1 if reg_doc_homevisit==1 | both_flag==1

gen unrestr_hbmc = both_hbmc

gen hbmc_hh = 0
replace hbmc_hh = 1 if both_hbmc==1 & hh_claim==1

gen hbmc_nohh = 0
replace hbmc_nohh = 1 if both_hbmc==1 & hh_claim==0

/*
foreach x of varlist both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim per_part_b {
replace `x' = 0 if dem_ffs==0
}
*/

foreach x of varlist both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim per_part_b {
replace `x' = 0 if dem_ffs==0
}




local cvars all prob_dem dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b


local full: word count `cvars'
di "`full'"
mat tab1=J(8,`full',.)
local r = 1
local c = 1



forvalues i=2011/2017 {

	foreach x of local cvars {
	
sum `x' if index_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}
preserve

collapse (sum) num_hh_claim per_part_b, by(spid)
tempfile coll
save `coll'
restore

collapse (max) all prob_dem dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh, by(spid)
merge 1:1 spid using `coll'

local c = 1
foreach x of local cvars {
	
sum `x' 
mat tab1[`r',`c'] = r(sum)

local ++c
}



forvalues i = 1/8 {

mat tab1[`i',10] = tab1[`i',10]/tab1[`i',5]
mat tab1[`i',11] = ((tab1[`i',11]/tab1[`i',9])*100)
}

mat rownames tab1 ="2011" "2012" "2013" "2014" "2015" "2016" "2017" "Unique People"


frmttable using `logpath'\BOTH_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("Community Dwelling + Dementia + 6m FFS NHATS 2011-2017: Prevelance/Cross-Section ") ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Self Report or Claims HBMC", "Medicare HH", "Medicare HH Part B", "HBMC + HH" "HBMC, no HH", "Total # of HHA episodes", "Ave. # of HHA episodes", "% of HHA episodes Part B") sdec(0,0,0,0,0,0,0,0,0,2,2) ///
note("Restricted to Community Dwelling + Dementia + 6m FFS at every wave. Ave # of HHA episodes is conditional on having a HHA episode.")











/******* HRS *****************/

use "E:\data\HBMC_HRS\int_data\hrs_p01.dta", replace

cap drop _m
merge 1:1 id core_year using "E:\data\hrs_public_2014\dementia\pdem_withvarnames_00_14.dta", keepus(pdem)
keep if nhres==0

replace per_part_b = hh_val_b if core_year>2000
replace hh_part_b = hh_val_p_b if core_year>2000

gen dementia = 0
replace dementia = 1 if pdem>=0.5 & pdem!=.

replace both_flag = 0
replace hh_claim = 0 if hh_claim==.
replace num_hh_claim = 0 if num_hh_claim==.
replace per_part_b = 0 if per_part_b==.
replace hh_part_b = 0 if hh_part_b==.
replace both_flag = 1 if cpt_flag==1 

drop _m

local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen index_date = c_ivw_date

drop if c_ivw_date==.
merge 1:1 id index_date using "E:\data\HBMC_HRS\int_data\ffs_before.dta", keepus(cont_ffs_n_mos)
drop _m

gen both_hbmc = 0
replace both_hbmc = 1 if both_flag==1


gen hbmc_hh = 0
replace hbmc_hh = 1 if both_hbmc==1 & hh_claim==1

gen hbmc_nohh = 0
replace hbmc_nohh = 1 if both_hbmc==1 & hh_claim==0


gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.
label var ffs_6m "Has >=6m of Medicare FFS prior to ivw"

gen has_medicare = 0
replace has_medicare = 1 if bid_hrs_22!=""
label var has_medicare "Has Medicare Claims"


gen dem_ffs = 0
replace dem_ffs = 1 if dementia==1 & ffs_6m==1

/*
foreach x of varlist hh_claim both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b {
replace `x' = 0 if dem_ffs==0
}

*/

foreach x of varlist hh_claim both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b {
replace `x' = 0 if dementia!=1
}



local cvars all dementia dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b
local full: word count `cvars'
mat tab1=J(10,`full',.)
local r = 1
local c = 1

forvalues i=1998(2)2014 {

	foreach x of local cvars {
	
sum `x' if core_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}
preserve

collapse (sum) num_hh_claim per_part_b, by(id)
tempfile coll
save `coll'
restore

collapse (max) all dementia dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh, by(id)
merge 1:1 id using `coll'

local c = 1
foreach x of local cvars {
	
sum `x' 
mat tab1[`r',`c'] = r(sum)

local ++c
}

forvalues i = 1/10 {

mat tab1[`i',10] = tab1[`i',10]/tab1[`i',5]
mat tab1[`i',11] = ((tab1[`i',11]/tab1[`i',9])*100)
}



mat rownames tab1 = "1998" "2000" "2002" "2004" "2006" "2008" "2010" "2012" "2014" "Unqiue People"

frmttable using `logpath'\BOTH_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia: Prevalence Sample Size") ///
ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Medicare HBMC", "Medicare HH", "Medicare HH Part B", "HBMC + HH" "HBMC, no HH", "Total # of HHA episodes", "Ave. # of HHA episodes", "% of HHA episodes Part B") sdec(0,0,0,0,0,0,0,0,0,2,2) ///
note("Restricted to Community Dwelling + Dementia at every wave. No FFS restriction. Ave # of HHA episodes is conditional on having a HHA episode.")



use "E:\data\HBMC_HRS\int_data\hrs_p01.dta", replace

cap drop _m
merge 1:1 id core_year using "E:\data\hrs_public_2014\dementia\pdem_withvarnames_00_14.dta", keepus(pdem)
keep if nhres==0

replace per_part_b = hh_val_b if core_year>2000
replace hh_part_b = hh_val_p_b if core_year>2000

gen dementia = 0
replace dementia = 1 if pdem>=0.5 & pdem!=.

replace both_flag = 0
replace hh_claim = 0 if hh_claim==.
replace num_hh_claim = 0 if num_hh_claim==.
replace per_part_b = 0 if per_part_b==.
replace hh_part_b = 0 if hh_part_b==.
replace both_flag = 1 if cpt_flag==1 

drop _m

local logpath "E:\data\HBMC_HRS\logs"
local date=subinstr("$S_DATE"," ","_",.)

gen all = 1

gen index_date = c_ivw_date

drop if c_ivw_date==.
merge 1:1 id index_date using "E:\data\HBMC_HRS\int_data\ffs_before.dta", keepus(cont_ffs_n_mos)
drop _m

gen both_hbmc = 0
replace both_hbmc = 1 if both_flag==1


gen hbmc_hh = 0
replace hbmc_hh = 1 if both_hbmc==1 & hh_claim==1

gen hbmc_nohh = 0
replace hbmc_nohh = 1 if both_hbmc==1 & hh_claim==0


gen ffs_6m = 0
replace ffs_6m = 1 if cont_ffs_n_mos>=6 & cont_ffs_n_mos!=.
label var ffs_6m "Has >=6m of Medicare FFS prior to ivw"

gen has_medicare = 0
replace has_medicare = 1 if bid_hrs_22!=""
label var has_medicare "Has Medicare Claims"


gen dem_ffs = 0
replace dem_ffs = 1 if dementia==1 & ffs_6m==1


foreach x of varlist hh_claim both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b {
replace `x' = 0 if dem_ffs==0
}


local cvars all dementia dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh num_hh_claim num_hh_claim per_part_b
local full: word count `cvars'
mat tab1=J(10,`full',.)
local r = 1
local c = 1

forvalues i=1998(2)2014 {

	foreach x of local cvars {
	
sum `x' if core_year==`i'
mat tab1[`r',`c'] = r(sum)

local ++c
}

local c = 1
local ++r
}
preserve

collapse (sum) num_hh_claim per_part_b, by(id)
tempfile coll
save `coll'
restore

collapse (max) all dementia dem_ffs both_hbmc hh_claim hh_part_b hbmc_hh hbmc_nohh, by(id)
merge 1:1 id using `coll'

local c = 1
foreach x of local cvars {
	
sum `x' 
mat tab1[`r',`c'] = r(sum)

local ++c
}

forvalues i = 1/10 {

mat tab1[`i',10] = tab1[`i',10]/tab1[`i',5]
mat tab1[`i',11] = ((tab1[`i',11]/tab1[`i',9])*100)
}



mat rownames tab1 = "1998" "2000" "2002" "2004" "2006" "2008" "2010" "2012" "2014" "Unqiue People"

frmttable using `logpath'\BOTH_P01_SampleSize_`date'.doc, addtable statmat(tab1) ///
varlabels title("HRS 1998-2014 with Community Dwelling + Dementia + 6m FFS: Prevalence Sample Size") ///
ctitles("Year", "Full Sample", "Dementia (N)", "Dementia + 6m FFS", "Medicare HBMC", "Medicare HH", "Medicare HH Part B", "HBMC + HH" "HBMC, no HH", "Total # of HHA episodes", "Ave. # of HHA episodes", "% of HHA episodes Part B") sdec(0,0,0,0,0,0,0,0,0,2,2) ///
note("Restricted to Community Dwelling + Dementia + 6m FFS at every wave. Ave # of HHA episodes is conditional on having a HHA episode.")



H="********Extras*************"


H="HHA zipcode"
use "E:\data\hrs_cleaned\core_00_to_14.dta", clear

merge m:1 hhid pn using "E:\data\hrs_cleaned\restr_tracker_v2014.dta", keepus(zipcode00 zipcode02 zipcode04 zipcode06 zipcode08 zipcode10 zipcode12 zipcode14 zipcode98)

keep if _m==3
drop _m

forvalues i = 8(-2)0 {

replace zipcode0`i' ="" if core_year!=200`i' 

}

forvalues i = 14(-2)10 {

replace zipcode`i' ="" if core_year!=20`i' 

}



replace zipcode98 ="" if core_year!=1998 

gen zipcode = ""

forvalues i = 14(-2)10 {

replace zipcode = zipcode`i' if zipcode==""
}

forvalues i=8(-2)0 {

replace zipcode = zipcode0`i' if zipcode==""
}

replace zipcode = zipcode98 if zipcode==""

replace zipcode = "99999" if zipcode==""

merge m:1 zipcode using "E:\data\HBMC_HRS\20190405\HHC_coverage.dta"


H="***************************"


H="Create IAH Flags"
libname hrs 'E:\data\hrs_cleaned';
libname maid 'E:\data\CMS_DUA_51675_2014\Medicaid_merged';
libname medcare 'E:\data\CMS_DUA_51675_2014\Merged\SAS';

proc import datafile="E:\data\CMS_DUA_51675_2014\Medicaid_merged\MedicaidXref2012_old.dta" out=medicaidxwalk dbms=stata replace; run;

proc sql;
create table hrs_medicaid as select a.*, b.bid_hrs_23
from hrs.core_00_to_14 a
inner join medicaidxwalk b
on a.id=b.id;
quit;

data ot_file;
set maid.hrs_max_ot_99_12;
beg_dos = input(put(beginning_date_of_service,8.),YYMMDD8.);
end_dos = input(put(ending_date_of_service,8.),YYMMDD8.);
where msis_type_of_service = 13; *home health claims code;
run;

proc freq data=ot_file; tables beginning_date_of_service beg_dos / missprint; run;

proc freq data=ot_file; tables msis_type_of_service / missprint; run;

proc sql;
create table hrs_medicaid_hh as select a.*, b.beg_dos, b.end_dos, b.msis_type_of_service
from hrs_medicaid a
inner join ot_file b
on a.bid_hrs_23=b.bid_hrs_23; *and -90<=a.c_ivw_date-b.beg_dos<=90;
quit;
run;

proc sort data=hrs_medicaid_hh nodupkey; by bid_hrs_23; run;

/* People with at least 1 Medicaid HH claim 98-2012 */
data hrs_medicaid_hh;
set hrs_medicaid_hh;
maid_hh = 1;
run;

proc export data=hrs_medicaid_hh (keep = id maid_hh) outfile="E:\data\HBMC_HRS\int_data\any_maid_hh.dta" dbms=stata replace; run;

/* Number of Medicaid beneficiaries */
proc sort data=hrs_medicaid nodupkey; by bid_hrs_23; run;

proc export data=hrs_medicaid (keep = id bid_hrs_23) outfile="E:\data\HBMC_HRS\int_data\any_maid.dta" dbms=stata replace; run;


/* Merge with Medicare crosswalk */

proc sql;
create table hrs_mcare as select a.*, b.bid_hrs_22
from hrs.core_00_to_14 a
inner join medcare.xref2015medicare b
on a.id=b.hhidpn;
quit;

/* Check for cpt and pos codes in carrier file */

* Split carrier file into half due to size;
data carrier_06 (keep = bid_hrs_22 admit_date disch_date admit_year hcpcs_cd PLCRVC01-PLCRVC13);
set medcare.pb_1998_2015;
array dx hcpscd01--hcpscd13;
do over dx;
hcpcs_cd = dx;
output;
end;
where admit_year<=2006;
run;

data carrier_06 (drop = PLCRVC01-PLCRVC13);
set carrier_06;
cptcodes1 = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
posflag = 0;
array dx PLCRVC01-PLCRVC13;
do over dx;
if dx in:(12,13,14) then posflag =1;
end;
run;

data carrier_06;
set carrier_06;
cptflag = 0;
if 99341<=cptcodes1<=99350 or 99324<=cptcodes1<=99328 or 99334<=cptcodes1<=99337 then cptflag = 1;
run; 

data carrier_06;
set carrier_06;
where cptflag=1 or posflag = 1;
run;

proc sort data=carrier_06 nodupkey; by bid_hrs_22 admit_date disch_date; run;

* other half;

data carrier_15 (keep = bid_hrs_22 admit_date disch_date admit_year hcpcs_cd PLCRVC01-PLCRVC13);
set medcare.pb_1998_2015;
array dx hcpscd01--hcpscd13;
do over dx;
hcpcs_cd = dx;
output;
end;
where 2007<=admit_year<=2015;
run;

data carrier_15 (drop = PLCRVC01-PLCRVC13);
set carrier_15;
cptcodes1 = input(compress(hcpcs_cd,'ABCDEFGHIJKLMNOPQRSTUVWXYZ/',),8.);
posflag = 0;
array dx PLCRVC01-PLCRVC13;
do over dx;
if dx in:(12,13,14) then posflag =1;
end;
run;

data carrier_15;
set carrier_15;
cptflag = 0;
if 99341<=cptcodes1<=99350 or 99324<=cptcodes1<=99328 or 99334<=cptcodes1<=99337 then cptflag = 1;
run; 

data carrier_15;
set carrier_15;
where cptflag=1 or posflag = 1;
run;


proc sort data=carrier_15 nodupkey; by bid_hrs_22 admit_date disch_date; run;

data carrier2;
set carrier_06 carrier_15;
by bid_hrs_22;
housecall = 1;
run;

/* Merge back with HRS dataset */

proc sql;
create table hrs_housecalls as select a.*, b.housecall
from hrs_mcare a
inner join carrier2 b
on a.bid_hrs_22=b.bid_hrs_22 and -90<=a.c_ivw_date-b.admit_date<=90;
quit;

proc sort data=hrs_housecalls nodupkey; by descending c_ivw_date bid_hrs_22; run;

proc export data=hrs_housecalls (keep = bid_hrs_22 id core_year housecall) outfile="E:\data\HBMC_HRS\int_data\hrs_housecalls.dta" dbms=stata replace; run;



/*
data hrs_medicaid_hh;
set hrs_medicaid_hh;
los = (end_dos - beg_dos) + 1;
run;

proc freq data = hrs_medicaid_hh; tables los; run;


proc sort data=hrs_medicaid_hh nodupkey; by id beg_dos end_dos; run;
proc sort data=hrs_medicaid_hh nodupkey; by id beg_dos; run;

proc sql;
create table total_hhdays as select distinct id, c_ivw_date,
sum(los) as total_hh
from hrs_medicaid_hh
group by id, c_ivw_date;
quit;

proc sql;
create table core_hh as select a.*, b.*
from hrs.core_00_to_14 a
left join total_hhdays b
on a.id=b.id and a.c_ivw_date=b.c_ivw_date;
quit;

proc export data=core_hh outfile="E:\data\HBMC_HRS\core_0014_hbmc.dta" dbms=stata replace; run;


H="Changelog"
4/05/2019 - Created new tables with modified shells to include HHA episodes and % HHA claims paid by Medicare Part B. Omari

3/04/19 - Removed censored/LFU from death classification, and reran tables. Omari

3/01/19 - More tweaks to Sample Size and logitudinal followup. Omari.

2/26/19 - Added 6m FFS restriction to both NHATS and HRS tables.

2/25/19 - Created Incident Dementia tables for HRS + NHATS to show followup data and unique people with HBMC. Omari

2/22/19 - Produced Sample Size tables for NHATS and HRS. Omari