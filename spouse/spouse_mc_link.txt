= V4 Outline MultiLine NoSorting TabWidth=30

H="Spouse with Medicare linkage"
****Note: now begins with dataset created for intensive procedures project created in the file spouse_intensive_pro.txt in the "add'l vars" tab.   *****


Starts with dataset created for the spousal depression outcomes project
created in the file spouse_2012.txt
This ds is created in the "Create additional variables" tab of spouse_2012.txt

This has the Spouse Medicare xwalk id already linked in (s_bid_hrs and s_xwalk_yes)

But now this code adds variables derived from the spouse claims*/

/*data from spouse_2012.txt code - starting point for this work*/
libname spo_fnl 'E:\data\spouse_intensive\int_data';

/*data for this project with spouse medicare variables added in*/
libname spo_mc_i 'E:\data\spouse_claims\data\int_data';
libname spo_mc_f 'E:\data\spouse_claims\data\final_data';

/*2000-2012 medicare claims*/
libname medi 'E:\data\cms_DUA_24548_2012';

/*hrs cleaned & restricted*/
libname hrs_cln 'E:\data\hrs_cleaned'; /*(contains exit, restricted, and core ivw's)*/
libname rand 'E:\data\hrs_public_2012\rand2012\main';

/*dartmouth wage index*/
libname dartm 'E:\data\Dartmouth_misc';
libname dart_wi 'E:\data\Dartmouth_misc\Wage Index';



H="Continuous FFS determination for spouse, pre-death"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;
proc freq; table year; run;

/*assign death year using merged dataset with all r and s info
drop variables not needed for finding insurance status
just keep in those observations where s has a medicare xwalk id*/
proc contents data=spo_fnl.spouse_data; run;
proc freq data=spo_fnl.spouse_data; table s_xwalk_yes; run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age r_claims_dod);
if s_xwalk_yes=1;
r_dod_hrs_claims = r_death_date_e;
r_dod_use_claims=0;
if r_death_date_e=. & r_claims_dod~=. then do;
	r_dod_hrs_claims=r_claims_dod;
	r_dod_use_claims=1;
	end;
r_dod_missing_yes=0;
if r_dod_hrs_claims=. then r_dod_missing_yes=1;
r_death_year=year(r_dod_hrs_claims);
r_death_month=month(r_dod_hrs_claims);
run;

proc freq; table r_death_month r_death_year r_dod_missing_yes r_dod_use_claims; run;

*keep a version with only those with dod and dod 2000-2012 to match claims dates;
data r_sp2;
set r_sp;
if r_dod_missing_yes=0 & 2000<=r_death_year<=2012;
run;


/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

proc freq data=s_dn_death_y;
table r_death_year;
run;

/*who is missing denominator file??*/
proc sql;
create table s_missing_dn as select * from r_sp2 where s_bid_hrs
not in (select BID_hrs_21 from dn_2000_20122); 
quit;

proc sql;
create table s_missing_dn_2 as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a left join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

data s_missing_dn_3;
set s_missing_dn_2;
dn_missing=0;
if year=. then dn_missing=1;
run;

proc freq; table dn_missing; run;

data s_missing_dn_4;
set s_missing_dn_3;
if dn_missing=1;
run;

/*193 of the 297 missing denominator file are <65 when R dies*/
proc freq; table r_death_year s_age; run;

/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),1,r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),1,r_death_month);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
format r_dod_hrs_claims date9.;
run;
proc means n;
var r_death_month;
run;

/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2176 have the -1 year dn file*/
proc sql;
create table s_dn_death_y_bef as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.year-b.year<=1 order by s_bid_hrs,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table s_dn_death_y_2bef as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_bef,
b.year as death_year_2bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_bef a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.death_year_bef-b.year<=1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
s_dn_death_y2 a
left join
s_dn_death_y_bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
s_all_insurance a
left join
s_dn_death_y_2bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_dy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_dy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;

proc sql;
create table spo_mc_i.r_sp_insa as select
a.*, b.part_ab_n_mos as s_part_ab_n_mos, b.non_hmo_d_n_mos as s_non_hmo_d_n_mos,
b.cont_ffs_n_mos as s_cont_ffs_n_mos
from 
spo_fnl.spouse_data a left join 
s_all_insurance3 b
on a.r_id=b.r_id;
quit;





H="Continous FFS determination for spouse, post-death"
/*determine Spouse ffs medicare after R's death using the 
claims denominator files

Several sets of variables created, looking forward p6m, p12m, p18m, p24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age);
if s_xwalk_yes=1;
r_death_year=year(r_death_date_e);
r_death_month=month(r_death_date_e);
run;


*keep a version with only those with dod and dod 2000-2012 to match claims dates;
data r_sp2;
set r_sp;
if 2000<=r_death_year<=2012;
run;

proc sort data=r_sp2 nodupkey; by r_id; run;

/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),r_death_month,13-r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),r_death_month,13-r_death_month);
buyin_at_death=substr(trim(left(buyin12)),r_death_month,1);
hmo_at_death=substr(trim(left(HMOIND12)),r_death_month,1);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
run;


/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2080 have the +1 year dn file*/
proc sql;
create table s_dn_death_y_aft as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_aft,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.year-b.year=-1 order by s_bid_hrs,year;
quit;


/* and the year aftore... 1790 have the +2 year dn file*/
proc sql;
create table s_dn_death_y_2aft as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_aft,
b.year as death_year_2aft,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_aft a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.death_year_aft-b.year=-1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, +1 and +2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_aft,b.HMOIND12 as hmo_aft from
s_dn_death_y2 a
left join
s_dn_death_y_aft b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2aft,b.HMOIND12 as hmo_2aft from
s_all_insurance a
left join
s_dn_death_y_2aft b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year aftore death buy-in and hmo variables
Trim so the final variable _p6m is 6 months post-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months post-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_dy))||trimn(left(buyin_aft))||trimn(left(buyin_2aft));
hmo_2y=trimn(left(hmo_dy))||trimn(left(hmo_aft))||trimn(left(hmo_2aft));

/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p_mos=length(buyin_2y);
if indexc(buyin_2y,"0","1","2","A","B") then part_ab_p_mos=indexc(buyin_2y,"0","1","2","A","B");
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then non_hmo_d_p_mos=length(hmo_2y);
if indexc(hmo_2y,"1","2","4","A","B","C") then non_hmo_d_p_mos=indexc(hmo_2y,"1","2","4","A","B","C");
if indexc(buyin_at_death,"0","1","2","A","B")=1 then part_ab_at_death=0;
if indexc(buyin_at_death,"0","1","2","A","B")=0 then part_ab_at_death=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=1 then hmo_d_at_death=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=0 then hmo_d_at_death=0;

if part_ab_p_mos<=non_hmo_d_p_mos then cont_ffs_p_mos=part_ab_p_mos;
if non_hmo_d_p_mos<part_ab_p_mos then cont_ffs_p_mos=non_hmo_d_p_mos;
run;
/******************************************************************/
/*bring in insurance indicators to full decedent/spouse dataset*/
/******************************************************************/
proc sql;
create table spo_mc_i.r_sp_ins as select
a.*, b.part_ab_p_mos as s_part_ab_p_mos, b.non_hmo_d_p_mos as s_non_hmo_d_p_mos,
b.cont_ffs_p_mos as s_cont_ffs_p_mos, b.part_ab_at_death as s_part_ab_at_death,
b.hmo_d_at_death as s_hmo_d_at_death
from 
spo_mc_i.r_sp_insa a left join 
s_all_insurance3 b
on a.r_id=b.r_id;
quit;


/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.r_sp_ins
outfile="E:\data\spouse_claims\data\int_data\r_sp_ins.dta" replace;
run;


H="6m interval FFS determination for spouse"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;
proc freq; table year; run;

/*assign death year using merged dataset with all r and s info
drop variables not needed for finding insurance status
just keep in those observations where s has a medicare xwalk id*/
proc contents data=spo_fnl.spouse_data; run;
proc freq data=spo_fnl.spouse_data; table s_xwalk_yes; run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age r_claims_dod);
if s_xwalk_yes=1;
r_dod_hrs_claims = r_death_date_e;
r_dod_use_claims=0;
if r_death_date_e=. & r_claims_dod~=. then do;
	r_dod_hrs_claims=r_claims_dod;
	r_dod_use_claims=1;
	end;
r_dod_missing_yes=0;
if r_dod_hrs_claims=. then r_dod_missing_yes=1;
r_death_year=year(r_dod_hrs_claims);
r_death_month=month(r_dod_hrs_claims);
run;

proc freq; table r_death_month r_death_year r_dod_missing_yes r_dod_use_claims; run;

*keep a version with only those with dod and dod 2000-2012 to match claims dates;
data r_sp2;
set r_sp;
if r_dod_missing_yes=0 & 2000<=r_death_year<=2012;
run;

proc sort data=r_sp2 nodupkey; by r_id; run;
proc freq; table s_xwalk_yes; run;

/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

proc freq data=s_dn_death_y;
table r_death_year;
run;

/*who is missing denominator file??*/
proc sql;
create table s_missing_dn as select * from r_sp2 where s_bid_hrs
not in (select BID_hrs_21 from dn_2000_20122); 
quit;

proc sql;
create table s_missing_dn_2 as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a left join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

data s_missing_dn_3;
set s_missing_dn_2;
dn_missing=0;
if year=. then dn_missing=1;
run;

proc freq; table dn_missing; run;

data s_missing_dn_4;
set s_missing_dn_3;
if dn_missing=1;
run;

/*193 of the 297 missing denominator file are <65 when R dies*/
proc freq; table r_death_year s_age; run;

/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),1,r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),1,r_death_month);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
format r_dod_hrs_claims date9.;
run;
proc means n;
var r_death_month;
run;

/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2176 have the -1 year dn file*/
proc sql;
create table s_dn_death_y_bef as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.year-b.year<=1 order by s_bid_hrs,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table s_dn_death_y_2bef as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_bef,
b.year as death_year_2bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_bef a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.death_year_bef-b.year<=1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
s_dn_death_y2 a
left join
s_dn_death_y_bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
s_all_insurance a
left join
s_dn_death_y_2bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_dy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_dy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));

/*create 6 month variables*/
if length(buyin_2y_r)>5 then buyin_6m_r=substr(trim(left(buyin_2y_r)),1,6);
if length(hmo_2y_r)>5 then hmo_6m_r=substr(trim(left(hmo_2y_r)),1,6);

if length(buyin_2y_r)<6 then buyin_6m_r="";
if length(hmo_2y_r)<6 then hmo_6m_r="";

buyin_6m=reverse(trim(buyin_6m_r));
hmo_6m=reverse(trim(hmo_6m_r));

/*create indicator variable for mc coverage 6 mo. 0=no, 1=yes*/
if length(buyin_6m)=6 then do;
if indexc(buyin_6m,"0","1","2","A","B") then part_ab_6m=0;
if indexc(buyin_6m,"0","1","2","A","B")=0 then part_ab_6m=1;
end;
if length(hmo_6m)=6 then do;
if index(hmo_6m,"000000") then hmo_d_6m=0;
if index(hmo_6m,"000000")=0 then hmo_d_6m=1;
end;

/*create 12 month variables*/
if length(buyin_2y_r)>11 then buyin_12m_r=substr(trim(left(buyin_2y_r)),1,12);
if length(hmo_2y_r)>11 then hmo_12m_r=substr(trim(left(hmo_2y_r)),1,12);

if length(buyin_2y_r)<12 then buyin_12m_r="";
if length(hmo_2y_r)<12 then hmo_12m_r="";

buyin_12m=reverse(trim(buyin_12m_r));
hmo_12m=reverse(trim(hmo_12m_r));

/*create indicator variable for mc coverage 12 mo. 0=no, 1=yes*/
if length(buyin_12m)=12 then do;
if indexc(buyin_12m,"0","1","2","A","B") then part_ab_12m=0;
if indexc(buyin_12m,"0","1","2","A","B")=0 then part_ab_12m=1;
end;
if length(hmo_12m)=12 then do;
if index(hmo_12m,"000000000000") then hmo_d_12m=0;
if index(hmo_12m,"000000000000")=0 then hmo_d_12m=1;
end;

/*create 18 month variables*/
if length(buyin_2y_r)>17 then buyin_18m_r=substr(trim(left(buyin_2y_r)),1,18);
if length(hmo_2y_r)>17 then hmo_18m_r=substr(trim(left(hmo_2y_r)),1,18);

if length(buyin_2y_r)<18 then buyin_18m_r="";
if length(hmo_2y_r)<18 then hmo_18m_r="";

buyin_18m=reverse(trim(buyin_18m_r));
hmo_18m=reverse(trim(hmo_18m_r));

/*create indicator variable for mc coverage 18 mo. 0=no, 1=yes*/
if length(buyin_18m)=18 then do;
if indexc(buyin_18m,"0","1","2","A","B") then part_ab_18m=0;
if indexc(buyin_18m,"0","1","2","A","B")=0 then part_ab_18m=1;
end;
if length(hmo_18m)=18 then do;
if index(hmo_18m,"000000000000000000") then hmo_d_18m=0;
if index(hmo_18m,"000000000000000000")=0 then hmo_d_18m=1;
end;

/*create 24 month variables*/
if length(buyin_2y_r)>23 then buyin_24m_r=substr(trim(left(buyin_2y_r)),1,24);
if length(hmo_2y_r)>23 then hmo_24m_r=substr(trim(left(hmo_2y_r)),1,24);

if length(buyin_2y_r)<24 then buyin_24m_r="";
if length(hmo_2y_r)<24 then hmo_24m_r="";

buyin_24m=reverse(trim(buyin_24m_r));
hmo_24m=reverse(trim(hmo_24m_r));

/*create indicator variable for mc coverage 24 mo. 0=no, 1=yes*/
if length(buyin_24m)=24 then do;
if indexc(buyin_24m,"0","1","2","A","B") then part_ab_24m=0;
if indexc(buyin_24m,"0","1","2","A","B")=0 then part_ab_24m=1;
end;
if length(hmo_24m)=24 then do;
if index(hmo_24m,"000000000000000000000000") then hmo_d_24m=0;
if index(hmo_24m,"000000000000000000000000")=0 then hmo_d_24m=1;
end;

label r_dod_hrs_claims = "R DOD from HRS or Claims";
label r_dod_use_claims = "R DOD from Claims (missing in HRS)";
label part_ab_6m = "S MC Parts A and B 6m pre R's death";
label hmo_d_6m = "S HMO 6m pre R's death";
label part_ab_12m = "S MC Parts A and B 12m pre R's death";
label hmo_d_12m = "S HMO 12m pre R's death";
label part_ab_18m = "S MC Parts A and B 18m pre R's death";
label hmo_d_18m = "S HMO 18m pre R's death";
label part_ab_24m = "S MC Parts A and B 24m pre R's death";
label hmo_d_24m = "S HMO 24m pre R's death";

run;

/*46 observations don't have full denominator data re insurance status
either died Before July 2000 or are missing year -1 dn file*/
proc freq;
table part_ab_6m*hmo_d_6m part_ab_12m*hmo_d_12m part_ab_18m*hmo_d_18m part_ab_24m*hmo_d_24m;
run;

data zzzztest;
set s_all_insurance3;
if part_ab_6m=.;
run;
/******************************************************************/
/*******Get Spouse death date from claims ************************/
/******************************************************************/
/*keep just the last entry in the dn file, if died, this will have dod*/
data s_dod_1;
set dn_2000_20122;
by bid_hrs_21;
if last.bid_hrs_21;
run;

/*keep just list of those S's with xwalk id, and R with DOD*/
proc sql;
create table s_dod_2 as select a.s_bid_hrs,a.r_id,b.BENE_DOB as s_claims_dob,
b.DEATH_DT as s_claims_dod from
r_sp2 a left join
s_dod_1 b
on a.s_bid_hrs=b.bid_hrs_21;
quit;

data s_dod_3;
set s_dod_2;
if s_claims_dod="00000000" then s_claims_dod="" ;
label s_claims_dod="S DOD from claims";
label s_claims_dob="S DOB from claims";
/*convert these dates into sas dates*/
s_claims_dod2=input(s_claims_dod,8.);
s_claims_dob2=input(s_claims_dob,8.);
format s_claims_dod2 date9.;
s_claims_dod2=input(put(s_claims_dod2,z8.),yymmdd8.);
format s_claims_dob2 date9.;
s_claims_dob2=input(put(s_claims_dob2,z8.),yymmdd8.);
run;

/*add to the insurance indicators dataset*/
proc sql;
create table s_all_insurance4 as select a.*,b.s_claims_dob2 as s_claims_dob,
b.s_claims_dod2 as s_claims_dod
from s_all_insurance3 a left join
s_dod_3 b
on a.r_id=b.r_id & a.s_bid_hrs=b.s_bid_hrs;
quit;

/******************************************************************/
/*bring in insurance indicators to full decedent/spouse dataset*/
/******************************************************************/
proc sql;
create table spo_mc_i.r_sp_insa as select
a.*, b.r_dod_hrs_claims , b.r_dod_use_claims , 
b.part_ab_6m as s_part_ab_6m , b.hmo_d_6m as s_hmo_d_6m , 
b.part_ab_12m as s_part_ab_12m , b.hmo_d_12m as s_hmo_d_12m ,
b.part_ab_18m as s_part_ab_18m , b.hmo_d_18m as s_hmo_d_18m ,
b.part_ab_24m as s_part_ab_24m , b.hmo_d_24m as s_hmo_d_24m ,
b.s_claims_dob, b.s_claims_dod
from 
spo_fnl.spouse_data a left join 
s_all_insurance4 b
on a.r_id=b.r_id;
quit;

proc freq;
table s_part_ab_6m*s_hmo_d_6m s_part_ab_12m*s_hmo_d_12m 
	s_part_ab_18m*s_hmo_d_18m s_part_ab_24m*s_hmo_d_24m;
run;


/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.r_sp_ins
outfile="E:\data\spouse_claims\data\int_data\r_sp_ins.dta" replace;
run;


H="6m interval FFS determination for spouse after R death"
/*determine Spouse ffs medicare after R's death using the 
claims denominator files

Several sets of variables created, looking forward p6m, p12m, p18m, p24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age);
if s_xwalk_yes=1;
r_death_year=year(r_death_date_e);
r_death_month=month(r_death_date_e);
run;


*keep a version with only those with dod and dod 2000-2012 to match claims dates;
data r_sp2;
set r_sp;
if 2000<=r_death_year<=2012;
run;

proc sort data=r_sp2 nodupkey; by r_id; run;

/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),r_death_month,13-r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),r_death_month,13-r_death_month);
buyin_at_death=substr(trim(left(buyin12)),r_death_month,1);
hmo_at_death=substr(trim(left(HMOIND12)),r_death_month,1);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
run;


/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2080 have the +1 year dn file*/
proc sql;
create table s_dn_death_y_aft as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_aft,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.year-b.year=-1 order by s_bid_hrs,year;
quit;


/* and the year aftore... 1790 have the +2 year dn file*/
proc sql;
create table s_dn_death_y_2aft as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_aft,
b.year as death_year_2aft,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_aft a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.death_year_aft-b.year=-1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, +1 and +2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_aft,b.HMOIND12 as hmo_aft from
s_dn_death_y2 a
left join
s_dn_death_y_aft b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2aft,b.HMOIND12 as hmo_2aft from
s_all_insurance a
left join
s_dn_death_y_2aft b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year aftore death buy-in and hmo variables
Trim so the final variable _p6m is 6 months post-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months post-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_dy))||trimn(left(buyin_aft))||trimn(left(buyin_2aft));
hmo_2y=trimn(left(hmo_dy))||trimn(left(hmo_aft))||trimn(left(hmo_2aft));

/*create indicator variables at death*/
if indexc(buyin_at_death,"0","1","2","A","B")=1 then part_ab_at_death=0;
if indexc(buyin_at_death,"0","1","2","A","B")=0 then part_ab_at_death=1;

if indexc(hmo_at_death,"1","2","4","A","B","C")=1 then hmo_d_at_death=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=0 then hmo_d_at_death=0;

/*create indicator variable for mc coverage 6 mo. 0=no, 1=yes*/
if indexc(buyin_2y,"0","1","2","A","B")<=6 then part_ab_p6m=0;
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p6m=1;
if indexc(buyin_2y,"0","1","2","A","B")>6 then part_ab_p6m=1;

if indexc(buyin_2y,"0","1","2","A","B")<=12 then part_ab_p12m=0;
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p12m=1;
if indexc(buyin_2y,"0","1","2","A","B")>12 then part_ab_p12m=1;

if indexc(buyin_2y,"0","1","2","A","B")<=18 then part_ab_p18m=0;
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p18m=1;
if indexc(buyin_2y,"0","1","2","A","B")>18 then part_ab_p18m=1;

if indexc(buyin_2y,"0","1","2","A","B")<=24 then part_ab_p24m=0;
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p24m=1;
if indexc(buyin_2y,"0","1","2","A","B")>24 then part_ab_p24m=1;

if indexc(hmo_2y,"1","2","4","A","B","C")<=6 then hmo_d_p6m=1;
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then hmo_d_p6m=0;
if indexc(hmo_2y,"1","2","4","A","B","C")>6 then hmo_d_p6m=0;

if indexc(hmo_2y,"1","2","4","A","B","C")<=12 then hmo_d_p12m=1;
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then hmo_d_p12m=0;
if indexc(hmo_2y,"1","2","4","A","B","C")>12 then hmo_d_p12m=0;

if indexc(hmo_2y,"1","2","4","A","B","C")<=18 then hmo_d_p18m=1;
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then hmo_d_p18m=0;
if indexc(hmo_2y,"1","2","4","A","B","C")>18 then hmo_d_p18m=0;

if indexc(hmo_2y,"1","2","4","A","B","C")<=24 then hmo_d_p24m=1;
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then hmo_d_p24m=0;
if indexc(hmo_2y,"1","2","4","A","B","C")>24 then hmo_d_p24m=0;


label part_ab_at_death = "S MC Parts A and B month of R's death";
label hmo_d_at_death = "S HMO month of R's death";
label part_ab_p6m = "S MC Parts A and B p6m post R's death";
label hmo_d_p6m = "S HMO p6m post R's death";
label part_ab_p12m = "S MC Parts A and B p12m post R's death";
label hmo_d_p12m = "S HMO p12m post R's death";
label part_ab_p18m = "S MC Parts A and B p18m post R's death";
label hmo_d_p18m = "S HMO p18m post R's death";
label part_ab_p24m = "S MC Parts A and B p24m post R's death";
label hmo_d_p24m = "S HMO p24m post R's death";

run;






/******************************************************************/
/*bring in insurance indicators to full decedent/spouse dataset*/
/******************************************************************/
proc sql;
create table spo_mc_i.r_sp_insb as select
a.*, b.part_ab_p6m as s_part_ab_p6m , b.hmo_d_p6m as s_hmo_d_p6m , 
b.part_ab_p12m as s_part_ab_p12m , b.hmo_d_p12m as s_hmo_d_p12m ,
b.part_ab_p18m as s_part_ab_p18m , b.hmo_d_p18m as s_hmo_d_p18m ,
b.part_ab_p24m as s_part_ab_p24m , b.hmo_d_p24m as s_hmo_d_p24m ,
b.part_ab_at_death as s_part_ab_at_death , b.hmo_d_at_death as s_hmo_d_at_death
from 
spo_mc_i.r_sp_insa a left join 
s_all_insurance3 b
on a.r_id=b.r_id;
quit;

proc sql;
create table spo_mc_i.r_sp_ins as select * from
spo_mc_i.r_sp_ins a left join 
spo_mc_i.r_sp_insb b
on a.r_id=b.r_id;
quit;


/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.r_sp_ins
outfile="E:\data\spouse_claims\data\int_data\r_sp_ins.dta" replace;
run;


H="Sample size requiring S ffs mc"
/*sample size for Spouse claims data
Requires both R and S to have FFS MC 6m prior to R's death*/

capture log close

clear all
set more off

//Amy's PC
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using "`logpath'\1-HRS_Spouse_claims_xwalk_sample.txt", text replace

cd "`projdatapath'"
use r_sp_ins.dta

gen deced=1	
gen decedinscopeb=deced==1 & year(r_death_date_e)>1999
gen decedinscopea=deced==1 & year(r_death_date_e)<2012 & year(r_death_date_e)>2000
gen decedinscope=deced==1 & year(r_death_date_e)<2011 & year(r_death_date_e)>=2002
gen mar_or_part=r_married_or_part_v2_x 
gen r_s_death=s_death_date_e-r_death_date_e if r_married_or_part_v2_x==1

foreach x in 183 365 548 730 {
	gen dod_`x'=r_s_death<`x'+1 & r_s_death!=. if r_married_or_part_v2==1
}
rename dod_183 dod_6m
rename dod_365 dod_12m
rename *548 *18m
rename *730 *24m

gen year=year(r_death_date_e) 
gen syear=year(s_death_date_e)
gen r_month=month(r_death_date_e)
gen s_month=month(s_death_date_e)


foreach x in s_part_ab_p s_hmo_d_p {
	foreach i in 6 12 18 24 {
		replace `x'`i'=0 if dod_`i'==1
}
	replace `x'6=0 if year==2012 & r_mo>6
	replace `x'18=0 if year==2012 | (year==2011 & r_mo>6)
	replace `x'12=0 if year==2012
	replace `x'24=0 if year>2010
}

foreach x in s_part_ab_ s_hmo_d_ {
	replace `x'6=0 if year==2000 & r_mo<7
	replace `x'18=0 if year==2000 | (year==2001 & r_mo<7)
	replace `x'12=0 if year==2000
	replace `x'24=0 if year<2002
}

//set matrix for sample size determination table
mat deced_core=J(8,1,.)

//all decedents from 2002-2012 exit interviews
sum r_exit_year_x, detail
mat deced_core[1,1]=r(N)

//check of married or partnered decedents
tab r_married_x r_married_or_part_v2_x , missing

gen n1core_ind=.
replace n1core_ind=0 if  r_core_year_n1==.
replace n1core_ind=1 if  r_core_year_n1!=.
tab n1core_ind, missing

//decedents with xwalk
sum r_exit_year_x if r_xwalk_yes==1, detail
mat deced_core[2,1]=r(N)

//with ffs mc last 6 months of life
//have parts a and b coverage and no hmo
gen byte r_ins_ind=.
replace r_ins_ind=1 if r_part_ab_6m==1 & r_hmo_d_6m==0
replace r_ins_ind=0 if r_part_ab_6m!=1 | r_hmo_d_6m!=0
tab r_ins_ind, missing

//decedents with xwalk + ffs mc last 6 months of life
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1, detail
mat deced_core[3,1]=r(N)

//decedents with xwalk + married
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_or_part_v2_x==1, detail
mat deced_core[4,1]=r(N)

//with spouse xwalk id
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_or_part_v2_x==1 & ///
	s_xwalk_yes==1, detail
mat deced_core[5,1]=r(N)

//add spouse has ffs medicare 6 months prior to r's death
//have parts a and b coverage and no hmo

foreach x in 6 12 18 24 {
	gen s_ins_ind_`x'm=s_part_ab_`x'm==1 & s_hmo_d_`x'm==0
	gen s_ins_ind_p`x'm=s_part_ab_p`x'm==1 & s_hmo_d_p`x'm==0
}	

gen s_ins_ind_0m=s_part_ab_0m==1 & s_hmo_d_0m==0

//with spouse ffs medicare
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_or_part_v2_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1, detail
mat deced_core[6,1]=r(N)

sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_or_part_v2_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1 & s_ins_ind_12m==1, detail
mat deced_core[7,1]=r(N)

sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_or_part_v2_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1 & s_ins_ind_12m==1 & s_ins_ind_24m==1, detail
mat deced_core[8,1]=r(N)

mat list deced_core
	
frmttable , statmat(deced_core) ///
	title("2012 sample size estimate - Spouse requires Medicare link") ///
	ctitle("","n") ///
	rtitle("All decedents from exit interviews" \ "With mc xwalk id" \ ///
	"With FFS mc last 6 months of life" \ "Married or partnered at time of death" \ ///
 	"Spouse has mc xwalk id" \ "S has ffs medicare 6 months before R's death" \ ///
	"S has ffs medicare 12m before R's death" \ "S has ffs medicare 24m before R's death") ///
	sdec(0) replace



gen survived=mar_or_part==1 & (r_s_death>0 |s_death_date==.)
gen sp_xwalk=survived==1 & s_xwalk_yes==1
gen insc_ins_0m=s_ins_ind_0m==1 & sp_xwalk==1
gen insc_ins_6m=s_ins_ind_6m==1 & sp_xwalk==1
gen insc_ins_12m=s_ins_ind_12m==1 & sp_xwalk==1
gen insc_ins_18m=s_ins_ind_18m==1 & sp_xwalk==1
gen insc_ins_24m=s_ins_ind_24m==1 & sp_xwalk==1
gen insc_ins_p6m=s_ins_ind_p6m==1 & sp_xwalk==1
gen insc_ins_p12m=s_ins_ind_p12m==1 & sp_xwalk==1
gen insc_ins_p18m=s_ins_ind_p18m==1 & sp_xwalk==1
gen insc_ins_p24m=s_ins_ind_p24m==1 & sp_xwalk==1
gen s_65=sp_xwalk==1 & s_age>64 
gen surv_6m=r_s_death>=183 & survived==1 & sp_xwalk==1 & s_65==1
gen surv_12m=r_s_death>=365 & surv_6m==1 
gen surv_18m=r_s_death>=548 & surv_6m==1
gen surv_24m=r_s_death>=730 & surv_6m==1
gen inscope_n24m=insc_ins_24m & s_65
gen inscope_n18m=insc_ins_18m & s_65
gen inscope_n12m=insc_ins_12m & s_65
gen inscope_n6m=insc_ins_6m & s_65
gen inscope_p6m=insc_ins_p6m & s_65 & survived==1
gen inscope_p12m=insc_ins_p12m & s_65 & survived==1
gen inscope_p18m=insc_ins_p18m & s_65 & survived==1
gen inscope_p24m=insc_ins_p24m & s_65 & survived
gen inscope_wide=insc_ins_0m & s_65 & survived==1
gen inscope_mid=insc_ins_12m==1 & insc_ins_p12m==1 & s_65
gen inscope_narrow=insc_ins_24m==1 & insc_ins_p24m==1  & s_65

label var deced "All decedents from exit interviews 2002-2012"
label var decedinscopea "Decedents with death year 2001-2011"
label var decedinscopeb "Decedents with death year 2000-2012"
label var decedinscope "Decedents with death year 2002-2010"
label var mar_or_part "Married or partnered at time of death"
label var survived "Survived by (partner or) spouse"
label var sp_xwalk "Surviving spouse has Medicare crosswalk id"
label var s_65 "S aged 65+ at R's death"
label var insc_ins_0m "S has ffs medicare the month of R's death"
label var insc_ins_6m "S has ffs medicare 6 months before R's death"
label var insc_ins_12m "S has ffs medicare 12 months before R's death"
label var insc_ins_18m "S has ffs medicare 18 months before R's death"
label var insc_ins_24m "S has ffs medicare 24 months before R's death"
label var insc_ins_p6m "S has ffs medicare 6 months after R's death"
label var insc_ins_p12m "S has ffs medicare 12 months after R's death"
label var insc_ins_p18m "S has ffs medicare 18 months after R's death"
label var insc_ins_p24m "S has ffs medicare 24 months after R's death"

foreach x in 6 12 18 24 {
	label var surv_`x'm "S still alive `x' months after R's death"
}
label var inscope_wide "Widest pool (ffs at R death 2000-2012)"
label var inscope_narrow "Smallest pool (ffs 24m before & after, R death 2002-2010)"
label var inscope_mid "Mid-sized pool (ffs 1yr before & after, R death 2001-2011)"
local samplevars deced decedinscopeb decedinscopea decedinscope mar_or_part survived sp_xwalk ///
s_65 surv_6m surv_12m surv_18m surv_24m insc_ins_0m insc_ins_6m insc_ins_12m ///
insc_ins_18m insc_ins_24m insc_ins_p6m insc_ins_p12m ///
insc_ins_p18m insc_ins_p24m inscope_wide inscope_mid inscope_narrow 

local rn :word count `samplevars'

mat sample=J(`rn',1,.)
local r=1

foreach x of local samplevars {
	sum `x' if `x'==1
	mat sample[`r',1]==r(N)
	local r=`r'+1
}

mat rownames sample=`samplevars'


frmttable using `logpath'\2012_sample_est , statmat(sample) ///
	title("2012 sample size estimate - Spouse requires Medicare link") ///
	ctitle("","n") sdec(0) replace varlabels
	
local samplevars deced r_married_or_part_v2_x

**********************************************************

mat gend=J(3,6,.)
local r=1
local c=1
foreach x in wide mid narrow {
	preserve 
	keep if inscope_`x'==1
	foreach g in 1 0 {
		sum s_age if s_female==`g'
		mat gend[`r',`c']=(r(N)/_N)*100
		mat gend[`r',`c'+1]=r(N)
		mat gend[`r',`c'+2]=r(mean)
		local c=`c'+3
}
	local r=`r'+1
	local c=1
	restore
}

mat rownames gend=inscope_wide inscope_mid inscope_narrow

frmttable using `logpath'\2012_sample_est, statmat(gend) ctitles("" "% Female" ///
"N" "Mean Age" "% Male" "N" "Mean Age") title("Age by gender, by FFS scope") addtable ///
varlabels sdec(2,0,2,2,0,2) 

foreach l of local levels {
di "`l'"
foreach x in 6 12 18 24 {
di "`x' months"
sum dod_`x'm if year==`l'
}
}

levelsof year if year>1999 & year<2013, local(levels)
local rn : word count `levels' n
local r=1 
local c=1

foreach y in dod_ insc_ins_ insc_ins_p {
	mat `y'tab=J(`rn',6,.)
	foreach l of local levels {
		sum deced if year==`l'
		mat `y'tab[`r',`c']=r(N)*r(mean)
		local c=`c'+1
		sum survived if year==`l'
		mat `y'tab[`r',`c']=r(N)*r(mean)
		local c=`c'+1
		foreach x in 6 12 18 24 {
			sum `y'`x'm if year==`l'
			mat `y'tab[`r',`c']=r(N)*r(mean)
			local c=`c'+1

}
		local c=1
		local r=`r'+1
}
	sum deced 
	mat `y'tab[`r',`c']=r(N)*r(mean)
	local c=`c'+1
	sum survived 
	mat `y'tab[`r',`c']=r(N)*r(mean)
	local c=`c'+1
	foreach x in 6 12 18 24 {
		sum `y'`x'm 
		mat `y'tab[`r',`c']=r(N)*r(mean)
		local c=`c'+1		
}
	mat rownames `y'tab=`levels' Total
	local r=1
	local c=1
}

frmttable using `logpath'\2012_sample_est, statmat(dod_tab) ctitles("" "Decedents" "Married/Partnered at death" ///
 "S dod w/i 6m" "S dod w/i 12m" "S dod w/i 18m" "S dod w/i 24m") addtable ///
 title("Surviving spouse survival by year of R death") sdec(0)

frmttable using `logpath'\2012_sample_est, statmat(insc_ins_tab) ctitles("" "Decedents" "Married/Partnered at death" ///
 "S ffs n6m" "S ffs n12m" "S ffs n18m" "S ffs n24m") addtable ///
 title("Surviving spouse FFS pre-death by year of R death") sdec(0)

frmttable using `logpath'\2012_sample_est, statmat(insc_ins_ptab) ctitles("" "Decedents" "Married/Partnered at death" ///
 "S ffs p6m" "S ffs p12m" "S ffs p18m" "S ffs p24m") addtable ///
 title("Surviving spouse FFS after death by year of R death") sdec(0)

mat loss=J(2,5,.)

sum r_death_date_e if survived==1 & year==2000 & r_month<7
mat loss[1,1]=r(N)
sum r_death_date_e if survived==1 & year==2000 & r_month>6
mat loss[1,2]=r(N)
sum r_death_date_e if survived==1 & year==2001 & r_month<7
mat loss[1,3]=r(N)
sum r_death_date_e if survived==1 & year==2001 & r_month>6
mat loss[1,4]=r(N)
sum r_death_date_e if survived==1 & year<2002
mat loss[1,5]=r(N)
sum r_death_date_e if survived==1 & year==2012 & r_month>6
mat loss[2,1]=r(N)
sum r_death_date_e if survived==1 & year==2012 & r_month<7
mat loss[2,2]=r(N)
sum r_death_date_e if survived==1 & year==2011 & r_month>6
mat loss[2,3]=r(N)
sum r_death_date_e if survived==1 & year>2011 & r_month<7
mat loss[2,4]=r(N)
sum r_death_date_e if survived==1 & year>2010
mat loss[2,5]=r(N)

frmttable using `logpath'\2012_sample_est, statmat(loss) ctitles("" "First/last 6 months" ///
"6-12 months" "12-18 months" "18-24 months" "total") rtitles("Deaths at beginning of observation period" \ ///
"Deaths at end of observation period") title("R deaths with surviving spouse at beginning/end of observable timeframe") ///
sdec(0) addtable



log close


H="xxxxstata code to validate ffs"


use r_sp_ins.dta, clear
gen bid_hrs_21=s_bid
duplicates drop bid, force
merge 1:m bid_hrs_21 using  "E:\data\surgery_hysterectomy\int_2012clms\dn_2000_20122.dta", keep(match) nogen
gen r_death_year=year(r_death_date_e)
gen r_death_mo=month(r_death_date_e)

gen npyear=year-r_death_year
drop year
drop if npyear<-2 |npyear>2
tostring npyear, replace
replace npyear="n1" if npyear=="-1"
replace npyear="n2" if npyear=="-2"
replace npyear="p2" if npyear=="2"
replace npyear="p1" if npyear=="1"
replace npyear="n0" if npyear=="0"
gen rhmoind12=reverse(hmoind12)
gen rbuyin12=reverse(buyin12)
reshape wide  can eq_bic obic state_cd cnty_cd bene_zip bene_dob sex race rhmoind12 rbuyin12 ///
age orec crec esrd_ind ms_cd a_trm_cd b_trm_cd a_mo_cnt b_mo_cnt hmo_mo buyin_mo v_dod_sw death_dt rfrnc_yr buyin12 hmoind12 bid_n bid death_year death_month death_day death_date birth_year birth_month birth_day birth_date, i(bid_hrs_21) j(npyear) string

gen posbuyin=buyin12n0+buyin12p1+buyin12p2
gen truncposbuyin=""
forvalues i=1/12 {
replace truncposbuyin=substr(posbuyin,`i',.) if r_death_mo==`i'
}

foreach x in 6 12 18 24 {
gen buyin_p`x'=substr(truncposbuyin,1,`x')
gen buyin_a`x'=substr(truncposbuyin,1,`x')
replace buyin_p`x'="0" if strpos(buyin_p`x',"0")!=0 | strpos(buyin_p`x',"1")!=0 | ///
index(buyin_p`x',"B")!=0 | strpos(buyin_p`x',"2")!=0 | strpos(buyin_p`x',  "A")!=0
replace buyin_p`x'="1" if buyin_p`x'!="0"
destring buyin_p`x', replace
}


gen negbuyin=rbuyin12n0+rbuyin12n1+rbuyin12n2
gen truncnegbuyin=""
forvalues i=1/12 {
replace truncnegbuyin=substr(negbuyin,`i',.) if (13-r_death_mo)==`i'
}
foreach x in 6 12 18 24 {
gen buyin_n`x'=substr(truncnegbuyin,1,`x')
destring buyin_n`x',replace

replace buyin_n`x'="0" if strpos(buyin_n`x',  "0")!=0 | strpos(buyin_n`x',  "1")!=0 | strpos(buyin_n`x',  "B")!=0 | strpos(buyin_n`x',  "2")!=0 | strpos(buyin_n`x',  "A")!=0
replace buyin_n`x'="1" if buyin_n`x'!="0"
destring buyin_n`x', replace
}
gen neghmo=rhmoind12n0+rhmoind12n1+rhmoind12n2
gen truncneghmo=""

forvalues i=1/12 {
replace truncneghmo=substr(neghmo,`i',.) if (13-r_death_mo)==`i'
}
foreach x in 6 12 18 24 {
gen hmo_n`x'=substr(truncneghmo,1,`x')

replace hmo_n`x'="0" if indexnot(hmo_n`x',"0")==0 
replace hmo_n`x'="1" if strpos(hmo_n`x',"1")!=0 | strpos(hmo_n`x',"2")!=0 | strpos(hmo_n`x',"4")!=0 | ///
index(hmo_n`x',"A")!=0 | strpos(hmo_n`x',"B")!=0 |index(hmo_n`x',"C")!=0
destring hmo_n`x', replace
}
gen hmo6m=reverse(hmoind12n0)
	


H="xxxxxxxnext steps notes"
Need to get the following coded up for spouses:
Elix and CC's before and after decedent's death
Medicare spending before and after decedent's death
Utilization, IP, SNF, Hospice use - before and after decedent's death
DOD indicators - died within 1 year / 2 years of spouse's death

Question - Require FFS medicare for spouse during all intervals in order to report it?
Need to determine time windows for spouse variables,
	already have FFS check 6m preceding R's death
	Maybe want to look 2 years before / 2 years after but require FFS medicare indication the whole time??
	Need to see how much that limits the sample and then decided if its a requirement??


From spouse dataset - decedents already have:
Elix last 1 year of life
CC's last 1 year of life
Other Medicare use variables
	Hospice days - last 1 and 2 years of life
	IP days - last 2 years of life
	SNF days - last 2 years of life
 

H="Get S MC claims lists 6, 12 and 24m pre and post R's death"
/*get claims lists, all claims types, for the 6m 12m 18m and 24m before
and after R's death

get consolidated diagnosis list for each S across all claim types for the
6m 12m and 24m before and after death periods*/

/*Get pared down dataset
Limit to those where spouse has ffs medicare 6m prior to r's death
if missing the death date from the restricted dataset, use the claims dod
Keep R's HRS ID so can use to match the R/S combination later on*/
data spo_mc_i.s_r_dod;
set spo_mc_i.r_sp_ins;
if s_xwalk_yes=1 & s_part_ab_at_death=1 & s_hmo_d_at_death=0 ;
ind_dod_yes=0;
if r_death_date_e~=. then ind_dod_yes=1;
keep r_BID_hrs r_id s_BID_hrs r_death_date_e ind_dod_yes;
run;


*check if all obs in this dataset have both r_id (HRS) and s_bid_hrs (claims);
data miss_rid;
set spo_mc_i.s_r_dod;
if r_id=.;
run;

data miss_sid;
set spo_mc_i.s_r_dod;
if s_BID_hrs='';
run;

/**************************************************************************/
/* ************** S Claims Before R's Death  ******************************/
/**************************************************************************/
/*macro to get claims before death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_bef_death=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.s_bid_hrs))
and &days_start<=b.r_death_date_e-a.admit_date<=&days_bef_death ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.s_bid_hrs))
and b.r_death_date_e-a.admit_date>&days_bef_death and b.r_death_date_e-a.disch_date<=&days_bef_death;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
run;
%mend;

/*6m before death*/
%claims(days_start=0,days_bef_death=183,source=hh,suf=6m); /*home health*/
%claims(days_start=0,days_bef_death=183,source=hs,suf=6m); /*hospice*/
%claims(days_start=0,days_bef_death=183,source=mp,suf=6m); /*medpar*/
%claims(days_start=0,days_bef_death=183,source=dm,suf=6m); /*dme*/
%claims(days_start=0,days_bef_death=183,source=op,suf=6m); /*outpatient*/
%claims(days_start=0,days_bef_death=183,source=pb,suf=6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_bef_death=365,source=hh,suf=12m); /*home health*/
%claims(days_start=0,days_bef_death=365,source=hs,suf=12m); /*hospice*/
%claims(days_start=0,days_bef_death=365,source=mp,suf=12m); /*medpar*/
%claims(days_start=0,days_bef_death=365,source=dm,suf=12m); /*dme*/
%claims(days_start=0,days_bef_death=365,source=op,suf=12m); /*outpatient*/
%claims(days_start=0,days_bef_death=365,source=pb,suf=12m); /*carrier*/
/*18m before death*/
%claims(days_start=0,days_bef_death=548,source=hh,suf=18m); /*home health*/
%claims(days_start=0,days_bef_death=548,source=hs,suf=18m); /*hospice*/
%claims(days_start=0,days_bef_death=548,source=mp,suf=18m); /*medpar*/
%claims(days_start=0,days_bef_death=548,source=dm,suf=18m); /*dme*/
%claims(days_start=0,days_bef_death=548,source=op,suf=18m); /*outpatient*/
%claims(days_start=0,days_bef_death=548,source=pb,suf=18m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_bef_death=365*2,source=hh,suf=24m); /*home health*/
%claims(days_start=0,days_bef_death=365*2,source=hs,suf=24m); /*hospice*/
%claims(days_start=0,days_bef_death=365*2,source=mp,suf=24m); /*medpar*/
%claims(days_start=0,days_bef_death=365*2,source=dm,suf=24m); /*dme*/
%claims(days_start=0,days_bef_death=365*2,source=op,suf=24m); /*outpatient*/
%claims(days_start=0,days_bef_death=365*2,source=pb,suf=24m); /*carrier*/

/**************************************************************************/
/* ************** S Claims After R's Death   ******************************/
/**************************************************************************/
/*macro to get claims after death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_aft_death=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.s_bid_hrs))
and &days_start<=a.admit_date - b.r_death_date_e<=&days_aft_death ;
quit;

/*claims that start earlier than R's DOD but span after R's death*/
proc sql;
create table &source._meet_2 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.s_bid_hrs))
and a.admit_date<b.r_death_date_e
and &days_start<=a.disch_date - b.r_death_date_e;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
format disch_date date9.;
format admit_date date9.;
run;
%mend;

/*6m after death*/
%claims(days_start=0,days_aft_death=183,source=hh,suf=p6m); /*home health*/
%claims(days_start=0,days_aft_death=183,source=hs,suf=p6m); /*hospice*/
%claims(days_start=0,days_aft_death=183,source=mp,suf=p6m); /*medpar*/
%claims(days_start=0,days_aft_death=183,source=dm,suf=p6m); /*dme*/
%claims(days_start=0,days_aft_death=183,source=op,suf=p6m); /*outpatient*/
%claims(days_start=0,days_aft_death=183,source=pb,suf=p6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_aft_death=365,source=hh,suf=p12m); /*home health*/
%claims(days_start=0,days_aft_death=365,source=hs,suf=p12m); /*hospice*/
%claims(days_start=0,days_aft_death=365,source=mp,suf=p12m); /*medpar*/
%claims(days_start=0,days_aft_death=365,source=dm,suf=p12m); /*dme*/
%claims(days_start=0,days_aft_death=365,source=op,suf=p12m); /*outpatient*/
%claims(days_start=0,days_aft_death=365,source=pb,suf=p12m); /*carrier*/
/*18m before death*/
%claims(days_start=0,days_aft_death=548,source=hh,suf=p18m); /*home health*/
%claims(days_start=0,days_aft_death=548,source=hs,suf=p18m); /*hospice*/
%claims(days_start=0,days_aft_death=548,source=mp,suf=p18m); /*medpar*/
%claims(days_start=0,days_aft_death=548,source=dm,suf=p18m); /*dme*/
%claims(days_start=0,days_aft_death=548,source=op,suf=p18m); /*outpatient*/
%claims(days_start=0,days_aft_death=548,source=pb,suf=p18m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_aft_death=365*2,source=hh,suf=p24m); /*home health*/
%claims(days_start=0,days_aft_death=365*2,source=hs,suf=p24m); /*hospice*/
%claims(days_start=0,days_aft_death=365*2,source=mp,suf=p24m); /*medpar*/
%claims(days_start=0,days_aft_death=365*2,source=dm,suf=p24m); /*dme*/
%claims(days_start=0,days_aft_death=365*2,source=op,suf=p24m); /*outpatient*/
%claims(days_start=0,days_aft_death=365*2,source=pb,suf=p24m); /*carrier*/

/**************************************************************************/
/* ********************* S Diagnosis Lists   ******************************/
/**************************************************************************/

%macro dx_time_range(range1=, range2=, suf=);
/*pulls just dx codes from carrier claims*/
data pb_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.pb_meet_&suf.(keep=bid_hrs_21 r_id PDGNS_CD DGNSCD01-DGNSCD12 );
array dx PDGNS_CD DGNSCD01-DGNSCD12;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=pb_last_&range2._dx out=pb_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*outpatient claims*/
data op_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.op_meet_&suf.(keep=bid_hrs_21 r_id PDGNS_CD DGNSCD01-DGNSCD25  );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx out=op_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*medpar claims*/
data mp_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.mp_meet_&suf.(keep=bid_hrs_21 r_id AD_DGNS DGNS_CD01-DGNS_CD25 );
array dx D_DGNS DGNS_CD01-DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=mp_last_&range2._dx out=mp_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*dme claims*/
data dm_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.dm_meet_&suf.(keep=bid_hrs_21 r_id PDGNS_CD DGNSCD01-DGNSCD12 );
array dx PDGNS_CD DGNSCD01-DGNSCD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx out=dm_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*home health agency*/
data hh_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.hh_meet_&suf.(keep=bid_hrs_21 r_id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx out=hh_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*hospice*/
data hs_last_&range2._dx(keep=bid_hrs_21 r_id diag);
set spo_mc_i.hs_meet_&suf.(keep=bid_hrs_21 r_id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx out=hs_last_&range2._dx2 nodupkey;
by bid_hrs_21 r_id diag;
run;

/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3;
length diag $7;
set hs_last_&range2._dx2;
run;
data hh_last_&range2._dx3;
length diag $7;
set hh_last_&range2._dx2;
run;
data mp_last_&range2._dx3;
length diag $7;
set mp_last_&range2._dx2;
run;
data dm_last_&range2._dx3;
length diag $7;
set dm_last_&range2._dx2;
run;
data op_last_&range2._dx3;
length diag $7;
set op_last_&range2._dx2;
run;
data pb_last_&range2._dx3;
length diag $7;
set pb_last_&range2._dx2;
run;

data dx_all_last_&range2.;
set hs_last_&range2._dx3
hh_last_&range2._dx3
mp_last_&range2._dx3
dm_last_&range2._dx3
op_last_&range2._dx3
pb_last_&range2._dx3;
run;

proc sort data=dx_all_last_&range2.(where=(diag~="")) out=spo_mc_i.dx_&range1._&range2 nodupkey;
by bid_hrs_21 r_id diag;
run;

%mend;

/*run macro to create data files spo_mc_i.dx_0d_n6m spo_mc_i.dx_0d_n12m and spo_mc_i.dx_0d_n24m */
%dx_time_range(range1=0d, range2=n6m, suf=6m);
%dx_time_range(range1=0d, range2=n12m, suf=12m);
%dx_time_range(range1=0d, range2=n24m, suf=24m);

/*run for dx lists after R's death*/
%dx_time_range(range1=0d, range2=p6m, suf=p6m);
%dx_time_range(range1=0d, range2=p12m, suf=p12m);
%dx_time_range(range1=0d, range2=p24m, suf=p24m);

*check all obs have r_id and bid_hrs_21 (s mc id);
data miss_rid;
set spo_mc_i.dx_0d_n6m;
if r_id=.;
run;

data miss_sid;
set spo_mc_i.dx_0d_n6m;
if bid_hrs_21='';
run;

H="Get S MC claims lists 1m intervals 2yrs pre/post R's death"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

libname spo_mc_i 'E:\data\spouse_claims\data\int_data';

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(source=,equ=,name=);
data spo_mc_i.&source._meet_&name.;
set spo_mc_i.mp_meet_&name.;
if (trim(left(SSLSSNF)))&equ.="N";
run;
%mend;

%mp(source=ip,equ=~,name=24m);
%mp(source=ip,equ=~,name=p24m);
%mp(source=snf,equ=,name=24m);
%mp(source=snf,equ=,name=p24m);

%macro mp_death_dt(source=);
*get claims that overlap with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=admit_date and admit_date~=disch_date;
admit_on_death_date=1;
run;

data &source._meet_disch;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=disch_date and admit_date~=disch_date;
disch_on_death_date=1;
run;

data &source._meet_both;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=disch_date and admit_date=disch_date;
admit_on_death_date=1;
disch_on_death_date=1;
run;




data &source._cost;
set &source._meet_admit &source._meet_disch &source._meet_both;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
&source._paid_by_mc_death_dt=(1/(disch_date-admit_date+1))*&source._paid_by_mc;
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as s_&source._paid_by_mc_death_dt,
sum(admit_on_death_date) as s_&source._admit_dod, sum(disch_on_death_date) as s_&source._disch_dod
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;
%mp_death_dt(source=ip);
%mp_death_dt(source=snf);


%macro claims_death_dt(source=);
*get claims that start with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=admit_date; 
run;



data &source._cost;
set &source._meet_admit;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc_death_dt=rate*(pmt_amt);
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as s_&source._paid_by_mc_death_dt
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;

%claims_death_dt(source=op);
%claims_death_dt(source=pb);
%claims_death_dt(source=hh);
%claims_death_dt(source=hs);
%claims_death_dt(source=dm);

data mc_costs_doda;
merge ip_pay snf_pay op_pay pb_pay hh_pay hs_pay dm_pay ;
s_bid_hrs=bid_hrs_21;
by BID_hrs_21 r_id;
run;


data mc_costs_dod;
set mc_costs_doda (drop=bid_hrs_21);
s_tot_paid_by_mc_death_dt=s_ip_paid_by_mc_death_dt+s_snf_paid_by_mc_death_dt+s_op_paid_by_mc_death_dt +
s_pb_paid_by_mc_death_dt+s_hs_paid_by_mc_death_dt+s_dm_paid_by_mc_death_dt;
run;


%macro mp_claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<disch_date<=win_stop_dt;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_stop_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before and end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>admit_date and
	disch_date>win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_stop_dt-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;



%macro claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, not snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where start of claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt;
run;


/*adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro mp_claims_p(days_start=,days_aft_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=r_death_date_e+&days_aft_death;
win_start_dt=r_death_date_e+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify fraction of claims to be attributed to period after death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start within window but end after window*/
data &source._meet_4;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_end_dt -admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before window but end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>admit_date and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_end_dt -win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;
/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro claims_p(days_start=,days_aft_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=r_death_date_e+&days_aft_death;
win_start_dt=r_death_date_e+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt;
run;


/*adjust for inflation*/
data &source._cost;
set &source._meet_1;
array list pmt_amt;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%macro days_nesting();

%do i=1 %to 24 ;


%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=snf,  name=m&i.);
%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=ip,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=pb,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=op,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hh,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hs,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=dm,  name=m&i.);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=snf,  name=m&i.p);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=ip,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=op,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=pb,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=hh,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=hs,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=dm,  name=m&i.p);


%end;
%mend;

%days_nesting();




%macro merge(l=,source=,time=,p=);
data &source._&time._m1;
set &source._m1&p.;
run;

%do i=2 %to 24 ;
%let l = %eval(&i.-1) ;

data &source._&time._m&i.;
merge &source._&time._m&l. &source._m&i.&p.;
run;
%end;

data &source._&time.;
set &source._&time._m24;
run;
%mend;

%merge(source=ip,time=bef,p=);
%merge(source=ip,time=aft,p=p);
%merge(source=snf,time=bef,p=);
%merge(source=snf,time=aft,p=p);
%merge(source=op,time=bef,p=);
%merge(source=op,time=aft,p=p);
%merge(source=pb,time=bef,p=);
%merge(source=pb,time=aft,p=p);
%merge(source=hh,time=bef,p=);
%merge(source=hh,time=aft,p=p);
%merge(source=hs,time=bef,p=);
%merge(source=hs,time=aft,p=p);
%merge(source=dm,time=bef,p=);
%merge(source=dm,time=aft,p=p);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all;
merge ip_bef snf_bef op_bef pb_bef hh_bef hs_bef dm_bef 
ip_aft snf_aft op_aft pb_aft hh_aft hs_aft dm_aft;
by s_BID_hrs r_id;
run;

%macro total();

data mc_costs_all2;
set mc_costs_all;
%do i=1 %to 24;
s_tot_paid_by_mc_m&i.=s_ip_paid_by_mc_m&i. + s_snf_paid_by_mc_m&i. + s_op_paid_by_mc_m&i. + 
s_pb_paid_by_mc_m&i. + s_hh_paid_by_mc_m&i. + s_hs_paid_by_mc_m&i. + s_dm_paid_by_mc_m&i.;
s_tot_paid_by_mc_m&i.p=s_ip_paid_by_mc_m&i.p + s_snf_paid_by_mc_m&i.p + s_op_paid_by_mc_m&i.p + 
s_pb_paid_by_mc_m&i.p + s_hh_paid_by_mc_m&i.p + s_hs_paid_by_mc_m&i.p + s_dm_paid_by_mc_m&i.p;
%end;
run;
%mend;

%total();

data mc_costs_all3;
merge mc_costs_all2 mc_costs_dod;
by  s_bid_hrs r_id;
run;

/*save permanent dataset*/
data spo_mc_i.mc_costs_monthly;
set mc_costs_all3;
run;

proc export data=spo_mc_i.mc_costs_monthly outfile='E:\data\spouse_claims\data\int_data\mc_costs_monthly.dta' replace; run;

/*merge costs with rest of the spouse dataset*/

proc sql;
create table spo_mc_i.hrs_elix_cc_pay_monthly(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay a 
left join
spo_mc_i.mc_costs_monthly(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;



H="Get S Elixhauser comorbidities"
/*creates indicators for each of the Elixhauser comorbidities
based on the dx codes lists 6, 12, and 24m before and after R's death

resulting dataset is spo_mc_i.hrs_elix*/

/*rename macro - called within the elixhauser macro
to add time suffix to variables

lib=library
dsn=dataset name
pre=suffix to be added to all of the variable names
*/

%macro rename(lib,dsn,pre);
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "Before Renaming All Variables";
run;

proc sql noprint;
select nvar into :num_vars
from dictionary.tables
where libname="&LIB" and
memname="&DSN";
select distinct(name) into :var1-
:var%TRIM(%LEFT(&num_vars))
from dictionary.columns
where libname="&LIB" and
memname="&DSN";
quit;
run;

proc datasets library=&LIB;
modify &DSN;
rename
%do i=1 %to &num_vars;
&&var&i=&&var&i.._&pre 
%end;
;
quit;
run;
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "After Renaming All Variables";
run;
%mend rename;



/*Elixhauser index macro
Note includes additional 2 comorbidities: Dementia and Coronary Artery Disease*/

%macro elixhauser(range1=, range2=);

data dx_31_comor_&range2;
set spo_mc_i.dx_&range1._&range2(rename=(diag=dx_0));
dx=trim(left(dx_0));

if dx~="" then do;

comorbi_1=0;
comorbi_2=0;
comorbi_3=0;
comorbi_4=0;
comorbi_5=0;
comorbi_6=0;
comorbi_7=0;
comorbi_8=0;
comorbi_9=0;
comorbi_10=0;
comorbi_11=0;
comorbi_12=0;
comorbi_13=0;
comorbi_14=0;
comorbi_15=0;
comorbi_16=0;
comorbi_17=0;
comorbi_18=0;
comorbi_19=0;
comorbi_20=0;
comorbi_21=0;
comorbi_22=0;
comorbi_23=0;
comorbi_24=0;
comorbi_25=0;
comorbi_26=0;
comorbi_27=0;
comorbi_28=0;
comorbi_29=0;
comorbi_30=0;
*end of intialize of 30 binary variables;
*add dementia and CAD;
dementia=0;
cad=0;

*do over dx;
	*Congestive Heart Failure;
	if (substr(dx,1,5)='39891' or
		substr(dx,1,5)='40211' or
		substr(dx,1,5)='40291' or
		substr(dx,1,5)='40411' or
		substr(dx,1,5)='40413' or
		substr(dx,1,5)='40491' or
		substr(dx,1,5)='40493' or
		substr(dx,1,3)='428') 
		and comorbi_1=0 
		then comorbi_1=1;*add one binary variables here.;
	*Cardiac Arrhythmias;
	if (substr(dx,1,5)='42610' or
		substr(dx,1,5)='42611' or
		substr(dx,1,5)='42613' or
		substr(dx,1,4)='4262' or
		substr(dx,1,4)='4263' or
		substr(dx,1,4)='4264' or
		substr(dx,1,5)='42650' or
		substr(dx,1,5)='42651' or
		substr(dx,1,5)='42652' or
		substr(dx,1,5)='42653' or
		substr(dx,1,4)='4266' or
		substr(dx,1,4)='4267' or
		substr(dx,1,4)='4268' or
		substr(dx,1,4)='4270' or
		substr(dx,1,4)='4272' or
		substr(dx,1,5)='42731' or
		substr(dx,1,5)='42760' or
		substr(dx,1,4)='4279' or
		substr(dx,1,4)='7850' or
		substr(dx,1,4)='V450' or
		substr(dx,1,4)='V533')
			and comorbi_2=0 
		then comorbi_2=1;
	* Valvular Disease ;
	if (substr(dx,1,5)='09320' or
		substr(dx,1,5)='09321' or
		substr(dx,1,5)='09322' or
		substr(dx,1,5)='09323' or
		substr(dx,1,5)='09324' or
		substr(dx,1,3)='394' or
		substr(dx,1,3)='395' or
		substr(dx,1,3)='396' or
		substr(dx,1,4)='3970' or
		substr(dx,1,4)='3971' or
		substr(dx,1,4)='4240' or
		substr(dx,1,4)='4241' or
		substr(dx,1,4)='4242' or
		substr(dx,1,4)='4243' or
		substr(dx,1,4)='4244' or
		substr(dx,1,4)='4245' or
		substr(dx,1,4)='4246' or
		substr(dx,1,4)='4247' or
		substr(dx,1,4)='4248' or
		substr(dx,1,5)='42490' or
		substr(dx,1,5)='42491' or
		substr(dx,1,4)='7463' or
		substr(dx,1,4)='7464' or
		substr(dx,1,4)='7465' or
		substr(dx,1,4)='7466' or
		substr(dx,1,4)='V422' or
		substr(dx,1,5)='V433')
			and comorbi_3=0 
		then comorbi_3=1;
	*Pulmonary Circulation Disorders;
	if (substr(dx,1,3)='416' or
		substr(dx,1,4)='4179')
			and comorbi_4=0 
		then comorbi_4=1;
	*Peripheral Vascular Disorders;
	if (substr(dx,1,3)='440' or
		substr(dx,1,4)='4412' or
		substr(dx,1,4)='4414' or
		substr(dx,1,4)='4417' or
		substr(dx,1,4)='4419' or
		substr(dx,1,4)='4431' or
		substr(dx,1,4)='4432' or
		substr(dx,1,4)='4438' or
		substr(dx,1,4)='4439' or
		substr(dx,1,4)='4471' or
		substr(dx,1,4)='5571' or
		substr(dx,1,4)='5579' or
		substr(dx,1,4)='V434')
			and comorbi_5=0 
		then comorbi_5=1;
	*Hypertension;
	if ((substr(dx,1,4)='4011' or
		substr(dx,1,4)='4019')) or
	   ((substr(dx,1,5)='40210' or
		substr(dx,1,5)='40290' or
		substr(dx,1,5)='40410' or
		substr(dx,1,5)='40490' or
		substr(dx,1,5)='40511' or
		substr(dx,1,5)='40519' or
		substr(dx,1,5)='40591' or
		substr(dx,1,5)='40599')) 
			and comorbi_6=0 
		then comorbi_6=1;
	*Paralysis;	
	if (substr(dx,1,4)='3420' or
		substr(dx,1,5)='34210' or
		substr(dx,1,5)='34211' or
		substr(dx,1,5)='34212' or
		substr(dx,1,4)='3429' or
		substr(dx,1,3)='343' or
		substr(dx,1,3)='344')
			and comorbi_7=0 
		then comorbi_7=1;
	*Other Neurological Disorders;
	if (substr(dx,1,4)='3319' or
		substr(dx,1,4)='3320' or
		substr(dx,1,4)='3334' or
		substr(dx,1,4)='3335' or
		substr(dx,1,3)='334' or
		substr(dx,1,3)='335' or
		substr(dx,1,3)='340' or
		substr(dx,1,4)='3411' or
		substr(dx,1,4)='3418' or
		substr(dx,1,4)='3419' or
		substr(dx,1,5)='34500' or
		substr(dx,1,5)='34501' or
		substr(dx,1,5)='34510' or
		substr(dx,1,5)='34511' or
		substr(dx,1,4)='3454' or
		substr(dx,1,5)='34550' or
		substr(dx,1,5)='34551' or
		substr(dx,1,4)='3458' or
		substr(dx,1,5)='34590' or
		substr(dx,1,5)='34591' or
		substr(dx,1,4)='3481' or
		substr(dx,1,4)='3483' or
		substr(dx,1,4)='7803' or
		substr(dx,1,4)='7843') 
			and comorbi_8=0 
		then comorbi_8=1;	
	*Chronic Pulmonary Disease;
	if (substr(dx,1,3)='490' or
		substr(dx,1,3)='491' or
		substr(dx,1,3)='492' or
		substr(dx,1,4)='4930' or
		substr(dx,1,4)='4931' or
		substr(dx,1,4)='4932' or
		substr(dx,1,4)='4938' or
		substr(dx,1,5)='49390' or
		substr(dx,1,5)='49391' or
		substr(dx,1,3)='494' or
		substr(dx,1,3)='495' or
		substr(dx,1,3)='496' or
		substr(dx,1,3)='497' or
		substr(dx,1,3)='498' or
		substr(dx,1,3)='499' or
		substr(dx,1,3)='500' or
		substr(dx,1,3)='501' or
		substr(dx,1,3)='502' or
		substr(dx,1,3)='503' or
		substr(dx,1,3)='504' or
		substr(dx,1,3)='505' or
		substr(dx,1,4)='5064') 
			and comorbi_9=0 
		then comorbi_9=1;	
	*Diabetes, uncomplicated;
	if (substr(dx,1,4)='2500' or
		substr(dx,1,4)='2501' or
		substr(dx,1,4)='2502' or
		substr(dx,1,4)='2503') 
			and comorbi_10=0 
		then comorbi_10=1;
	*Diabetes, complicated;
	if (substr(dx,1,4)='2504' or
		substr(dx,1,4)='2505' or
		substr(dx,1,4)='2506' or
		substr(dx,1,4)='2507' or
		substr(dx,1,4)='2509') 
			and comorbi_11=0 
		then comorbi_11=1;
	*Hypothyroidism;
	if (substr(dx,1,3)='243' or
		substr(dx,1,4)='2440' or
		substr(dx,1,4)='2441' or
		substr(dx,1,4)='2442' or
		substr(dx,1,4)='2448' or
		substr(dx,1,4)='2449') 	
			and comorbi_12=0 
		then comorbi_12=1;
	*Renal Failure;
	if (substr(dx,1,5)='40311' or
		substr(dx,1,5)='40391' or
		substr(dx,1,5)='40412' or
		substr(dx,1,5)='40492' or
		substr(dx,1,3)='585' or
		substr(dx,1,3)='586' or
		substr(dx,1,4)='V420' or
		substr(dx,1,4)='V451' or
		substr(dx,1,4)='V560' or
		substr(dx,1,4)='V568') 
			and comorbi_13=0 
		then comorbi_13=1;
	*Liver Disease;
	if (substr(dx,1,5)='07032' or
		substr(dx,1,5)='07033' or
		substr(dx,1,5)='07054' or
		substr(dx,1,4)='4560' or
		substr(dx,1,4)='4561' or
		substr(dx,1,5)='45620' or
		substr(dx,1,5)='45621' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='5714' or
		substr(dx,1,4)='5715' or
		substr(dx,1,4)='5716' or
		substr(dx,1,4)='5718' or
		substr(dx,1,4)='5719' or
		substr(dx,1,4)='5723' or
		substr(dx,1,4)='5728' or
		substr(dx,1,4)='V427') 
			and comorbi_14=0 
		then comorbi_14=1;
	*Peptic Ulcer Disease excluding bleeding;
	if (substr(dx,1,5)='53170' or
		substr(dx,1,5)='53190' or
		substr(dx,1,5)='53270' or
		substr(dx,1,5)='53290' or
		substr(dx,1,5)='53370' or
		substr(dx,1,5)='53390' or
		substr(dx,1,5)='53470' or
		substr(dx,1,5)='53490' or
		substr(dx,1,5)='V1271') 
			and comorbi_15=0 
		then comorbi_15=1;
	*AIDS;
	if (substr(dx,1,3)='042' or
		substr(dx,1,3)='043' or
		substr(dx,1,3)='044') 
			and comorbi_16=0 
		then comorbi_16=1;
	*Lymphoma;
	if (substr(dx,1,3)='200' or
		substr(dx,1,4)='201' or
		substr(dx,1,4)='2020' or
		substr(dx,1,4)='2021' or
		substr(dx,1,4)='2022' or
		substr(dx,1,4)='2023' or
		substr(dx,1,4)='2025' or
		substr(dx,1,4)='2026' or
		substr(dx,1,4)='2027' or
		substr(dx,1,4)='2028' or
		substr(dx,1,4)='2029' or
		substr(dx,1,4)='2030' or
		substr(dx,1,4)='2038' or
		substr(dx,1,4)='2386' or
		substr(dx,1,4)='2733' or
		substr(dx,1,4)='V1071' or
		substr(dx,1,4)='V1072' or
		substr(dx,1,4)='V1079')
			and comorbi_17=0 
		then comorbi_17=1;
	*Metastatic Cancer;
	if (substr(dx,1,3)='196' or
		substr(dx,1,3)='197' or
		substr(dx,1,3)='198' or
		substr(dx,1,4)='199') 
			and comorbi_18=0 
		then comorbi_18=1;	
	*Solid Tumor without Metastisis;
	if (substr(dx,1,2)='14' or
		substr(dx,1,2)='15' or
		substr(dx,1,2)='16' or
		substr(dx,1,3)='170' or
		substr(dx,1,3)='171' or
		substr(dx,1,3)='172' or
		substr(dx,1,3)='174' or
		substr(dx,1,3)='175' or
		substr(dx,1,3)='179' or
		substr(dx,1,2)='18' or
		substr(dx,1,3)='190' or
		substr(dx,1,3)='191' or
		substr(dx,1,3)='192' or
		substr(dx,1,3)='193' or
		substr(dx,1,3)='194' or
		substr(dx,1,3)='195' or
		substr(dx,1,3)='V10')
			and comorbi_19=0 
		then comorbi_19=1;
	*Rheumatoid Arthritis/Collagen Vascular Diseases;
	if (substr(dx,1,4)='7010' or
		substr(dx,1,3)='710' or
		substr(dx,1,3)='714' or
		substr(dx,1,3)='720' or
		substr(dx,1,3)='725') 
			and comorbi_20=0 
		then comorbi_20=1;
	*Coagulopathy;
	if (substr(dx,1,3)='286' or
		substr(dx,1,4)='2871' or
		substr(dx,1,4)='2873' or
		substr(dx,1,4)='2874' or
		substr(dx,1,4)='2875') 
			and comorbi_21=0 
		then comorbi_21=1;
	*Obesity;
	if (substr(dx,1,4)='2780')  
			and comorbi_22=0 
		then comorbi_22=1;
	*Weight Loss;
	if (substr(dx,1,3)='260' or
		substr(dx,1,3)='261' or
		substr(dx,1,3)='262' or
		substr(dx,1,3)='263') 
			and comorbi_23=0 
		then comorbi_23=1;	
	*Fluid and Electrolyte Disorders;
	if (substr(dx,1,3)='276') 
			and comorbi_24=0 
		then comorbi_24=1;
	*Blood Loss Anemia;
	if (substr(dx,1,4)='2800') 
			and comorbi_25=0 
		then comorbi_25=1;
	*Deficiency Anemias;
	if (substr(dx,1,4)='2801' or
		substr(dx,1,4)='2808' or
		substr(dx,1,4)='2809' or
		substr(dx,1,4)='2859') 
			and comorbi_26=0 
		then comorbi_26=1;
	*Alcohol Abuse;
	if (substr(dx,1,4)='2911' or
		substr(dx,1,4)='2912' or
		substr(dx,1,4)='2915' or
		substr(dx,1,4)='2918' or
		substr(dx,1,4)='2919' or
		substr(dx,1,4)='3039' or
		substr(dx,1,4)='3050' or
		substr(dx,1,4)='V113') 
			and comorbi_27=0 
		then comorbi_27=1;
	*Drug Abuse;
	if (substr(dx,1,4)='2920' or
		substr(dx,1,5)='29282' or
		substr(dx,1,5)='29283' or
		substr(dx,1,5)='29284' or
		substr(dx,1,5)='29289' or
		substr(dx,1,4)='2929' or
		substr(dx,1,3)='304' or
		substr(dx,1,4)='3052' or
		substr(dx,1,4)='3053' or
		substr(dx,1,4)='3054' or
		substr(dx,1,4)='3055' or
		substr(dx,1,4)='3056' or
		substr(dx,1,4)='3057' or
		substr(dx,1,4)='3058' or
		substr(dx,1,4)='3059')
			and comorbi_28=0 
		then comorbi_28=1;	
	*Psychoses;
	if (substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,4)='2991') 
			and comorbi_29=0 
		then comorbi_29=1;
	*Depression;
	if (substr(dx,1,4)='3004' or
		substr(dx,1,5)='30112' or
		substr(dx,1,4)='3090' or
		substr(dx,1,4)='3091' or
		substr(dx,1,3)='311')
			and comorbi_30=0 
		then comorbi_30=1;


	*Dementia;
	if (substr(dx,1,4) in ('3310','3311','3312','2900','2901',
             '2902','2903','2912','2948','2949') or
		substr(dx,1,5) in ('29410','29411','29040','29041','29042','29043')) 
		and dementia=0 
          then dementia=1;

	*CAD coronary artery disease;
	if (substr(dx,1,4) in ('4140','4142','4143','4148','4149') or 
		substr(dx,1,3) in ('410','411','412','413') or
		substr(dx,1,5) in ('V4581','V4582'))
		and cad=0 
          then cad=1;

/* CAD list
410.00-410.92
411.0-411.89
412
413.0-413.9
414.00-414.07
414.2
414.3
414.8
414.9
V45.81
V45.82 */

end;
run;


/*check sums of each comorbidity for each ID*/
proc sql;
create table com_test1_&range2 as
select distinct BID_hrs_21, r_id,
sum(comorbi_1) as com_1,
sum(comorbi_2) as com_2,
sum(comorbi_3) as com_3,
sum(comorbi_4) as com_4,
sum(comorbi_5) as com_5,
sum(comorbi_6) as com_6,
sum(comorbi_7) as com_7,
sum(comorbi_8) as com_8,
sum(comorbi_9) as com_9,
sum(comorbi_10) as com_10,
sum(comorbi_11) as com_11,
sum(comorbi_12) as com_12,
sum(comorbi_13) as com_13,
sum(comorbi_14) as com_14,
sum(comorbi_15) as com_15,
sum(comorbi_16) as com_16,
sum(comorbi_17) as com_17,
sum(comorbi_18) as com_18,
sum(comorbi_19) as com_19,
sum(comorbi_20) as com_20,
sum(comorbi_21) as com_21,
sum(comorbi_22) as com_22,
sum(comorbi_23) as com_23,
sum(comorbi_24) as com_24,
sum(comorbi_25) as com_25,
sum(comorbi_26) as com_26,
sum(comorbi_27) as com_27,
sum(comorbi_28) as com_28,
sum(comorbi_29) as com_29,
sum(comorbi_30) as com_30,
sum(dementia) as com_31,
sum(cad) as com_32
from dx_31_comor_&range2
group by BID_hrs_21, r_id;
quit;

/*define comorbidities as binary indicators*/
data comorbidity_&range2.(keep=BID_hrs_21 r_id 
	s_comorb_1-s_comorb_32 s_comorb_all);
set com_test1_&range2;
array list_com com_1-com_30 com_31 com_32;
array list_com_bin s_comorb_1-s_comorb_30 s_comorb_31 s_comorb_32;

/*note this defines comorbidity 31 = dementia & 32 = cad*/
do over list_com;
  list_com_bin=0;

  if list_com>0 then do;
    list_com_bin=1;
   end;

end;

/*define aggregate comorbidity as sum of 30 individual indicator vars.
note: CAD not included in this aggregate score*/
s_comorb_all=s_comorb_1+s_comorb_2+s_comorb_3+s_comorb_4+s_comorb_5+s_comorb_6+
s_comorb_7+s_comorb_8+s_comorb_9+s_comorb_10+s_comorb_11+s_comorb_12+s_comorb_13+
s_comorb_14+s_comorb_15+s_comorb_16+s_comorb_17+s_comorb_18+s_comorb_19+s_comorb_20+
s_comorb_21+s_comorb_22+s_comorb_23+s_comorb_24+s_comorb_25+s_comorb_26+s_comorb_27+
s_comorb_28+s_comorb_29+s_comorb_30+s_comorb_31;
run;


proc sort data=comorbidity_&range2. nodupkey;
by BID_hrs_21 r_id;
run;

/*merges with list of s's with xwalk id, dod & ffs mc 6m before R's death*/
proc sql;
create table ids_w_xwalk_&range2._1(drop=BID_hrs_212 r_id2) as
select a.s_bid_hrs,a.r_id,b.* 
from spo_mc_i.s_r_dod a 
left join
comorbidity_&range2.(rename=(BID_hrs_21=BID_hrs_212) rename=(r_id=r_id2))  b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_212)) and
	a.r_id=b.r_id2;
quit;

/*if comorbidity=null, set to zero for this group with the ffs mc 6m*/
data spo_mc_i.elix_&range1._&range2;
set ids_w_xwalk_&range2._1;
array list s_comorb_1-s_comorb_32 s_comorb_all;
do over list;
	if list=. then list=0;
	end;

label s_comorb_1 ="Congestive Heart Failure";
label s_comorb_2 ="Cardiac Arrhythmias";
label s_comorb_3 ="Valvular Disease";
label s_comorb_4 ="Pulmonary Circulation Disorders";
label s_comorb_5 ="Peripheral Vascular Disorders";
label s_comorb_6 ="Hypertension";
label s_comorb_7 ="Paralysis";
label s_comorb_8 ="Other Neurological Disorders";
label s_comorb_9 ="Chronic Pulmonary Disease";
label s_comorb_10 ="Diabetes, uncomplicated";
label s_comorb_11 ="Diabetes, complicated";
label s_comorb_12 ="Hypothyroidism";
label s_comorb_13 ="Renal Failure";
label s_comorb_14 ="Liver Disease";
label s_comorb_15 ="Peptic Ulcer Disease excluding bleeding";
label s_comorb_16 ="AIDS";
label s_comorb_17 ="Lymphoma";
label s_comorb_18 ="Metastatic Cancer";
label s_comorb_19 ="Solid Tumor without Metastisis";
label s_comorb_20 ="Rheumatoid Arthritis/Collagen Vascular Diseases";
label s_comorb_21 ="Coagulopathy";
label s_comorb_22 ="Obesity";
label s_comorb_23 ="Weight Loss";
label s_comorb_24 ="Fluid and Electrolyte Disorders";
label s_comorb_25 ="Blood Loss Anemia";
label s_comorb_26 ="Deficiency Anemias";
label s_comorb_27 ="Alcohol Abuse";
label s_comorb_28 ="Drug Abuse";
label s_comorb_29 ="Psychoses";
label s_comorb_30 ="Depression";
label s_comorb_31 ="Dementia";
label s_comorb_32 ="Coronary Artery Disease";

run;

data test;
set spo_mc_i.elix_&range1._&range2;
run;

/*calls rename macro*/
%rename(WORK,TEST,&range1._&range2);

/*rename r&s BID variables*/
data spo_mc_i.elix_&range1._&range2._2
	(rename =(r_id_&range1._&range2=r_id)
	rename =(s_BID_hrs_&range1._&range2=s_BID_hrs));
set test;
keep s_BID_hrs_&range1._&range2 r_id_&range1._&range2 s_comorb:;
run;

proc sort data=spo_mc_i.elix_&range1._&range2._2;
by s_bid_hrs r_id;
run;

%mend;

/*run macro to get elixhauser comorbidities 6, 12, 24m pre and post death
resulting datasets are spo_int.elix_0d_x#m_2
x = n=before, p=after death
# = 6, 12, or 24 for time window (months) 
have r_id and s_bid_hrs to merge back to dataset*/
%elixhauser(range1=0d, range2=n6m);
%elixhauser(range1=0d, range2=n12m);
%elixhauser(range1=0d, range2=n24m);

%elixhauser(range1=0d, range2=p6m);
%elixhauser(range1=0d, range2=p12m);
%elixhauser(range1=0d, range2=p24m);

proc freq data=spo_mc_i.elix_0d_n12m_2;
table s_comorb:;
run;

/*combine the 6 sets of variables into a single dataset
then merge this into main hrs spouse dataset*/
data elix_all;
merge spo_mc_i.elix_0d_n6m_2 spo_mc_i.elix_0d_n12m_2 spo_mc_i.elix_0d_n24m_2
spo_mc_i.elix_0d_p6m_2 spo_mc_i.elix_0d_p12m_2 spo_mc_i.elix_0d_p24m_2;
by s_bid_hrs r_id;
run;

/*merge comorbidities into HRS dataset
for observations with no mc xwalk, the comorbidities are left as null*/
proc sql;
create table spo_mc_i.hrs_elix(drop=s_bid_hrs2 r_id2)
as select a.*,b.*
from 
spo_mc_i.r_sp_ins a 
left join
elix_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

/*6356 do not have s with ffs medicare 6m before R's death so missing*/
proc freq data=spo_mc_i.hrs_elix;
table s_comorb: ;
run;


H="Convert dx list to dot format for cc's"
/*export lists of diagnosis codes to Stata*/
%macro exp(su=);
proc export data=spo_mc_i.dx_0d_&su.
outfile="E:\data\spouse_claims\data\int_data\dx_0d_&su..dta" replace;
run;
%mend;

%exp(su=n6m);
%exp(su=n12m);
%exp(su=n24m);
%exp(su=p6m);
%exp(su=p12m);
%exp(su=p24m);

/*******************************************************************/
/*put the sas data to stata in to dot format
This is STATA code*/
/*******************************************************************/
set more off

foreach s in n6m n12m n24m p6m p12m p24m{
	use "E:\data\spouse_claims\data\int_data\dx_0d_`s'.dta",clear

//convert diagnosis codes to string variables, tostring diag,gen(icd9_c)
	gen new=ltrim(diag)
	icd9 check new,gen(icd9_c)
	replace new="" if icd9_c>0 
// convert into dot format (ex 12.1 instead of 121)
	icd9 clean new,dots 

	replace diag=new
	drop icd9_c new

	save "E:\data\spouse_claims\data\int_data\dx_0d_`s'_2.dta",replace
//save to csv to import into sas (sas won't import stata13 .dta files
	outsheet using "E:\data\spouse_claims\data\int_data\dx_0d_`s'_2.csv", comma replace
}


H="Get S data warehouse chronic conditions"
/*begin of chronic 21 conditions.
Determines presence of 21 chronic conditions 6,12,24m pre and post R's death

Note this pulls from a list of icd-9 codes associated with each of the chronic
conditions.

Dataset created is spo_mc_i.hrs_elix_cc
*/

/*bring in formatted Stata datasets of dx codes*/

%macro imp(su=);
proc import datafile="E:\data\spouse_claims\data\int_data\dx_0d_&su._2.csv"
out=dx_0d_&su._2 DBMS=csv replace;
getnames=yes;
run;
%mend;

%imp(su=n6m);
%imp(su=n12m);
%imp(su=n24m);
%imp(su=p6m);
%imp(su=p12m);
%imp(su=p24m);

/*bring in excel list of dx codes associated with each chronic condition*/
proc import datafile='E:\data\spouse\ref_data\chronic_21_condition_icd9.xls'
out=icd9_21_chronic dbms=xls replace;
run;

proc contents data=icd9_21_chronic;
run;

/*creates macro variables of each of the chronic conditions listing of dx codes*/
proc sql;
select icd_9 into :chronic_desc1-:chronic_desc21 from icd9_21_chronic;
quit;
%put &chronic_desc10;
%put &chronic_desc5;

/*******************************************************************/
/*Generate chronic conditions indicator variables using dx
codes 12 months pre-death */
/*******************************************************************/

/*macro to create indicator variables for 21 chronic conditions
resulting files have spouse chronic conditions using dx codes 6, 12, and 24m
before and after R's death*/

%macro cc(start=,predeath=);

/*initialize the chronic conditions variables*/
data list_&start._&predeath._dx;
set dx_&start._&predeath._2;
array list s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM
;
do over list ;
list=0;
end;

diag_string=diag;

/* for dx codes that begin with numbers, process chronic cond variables*/
if anydigit(substr(trim(left(diag_string)),1,1))=1 then do;
diag=diag_string+0;

if diag in (&chronic_desc1) then s_CC_1_AMI=1;
if diag in (&chronic_desc2)  then s_CC_2_ALZH=1;
if diag in (&chronic_desc3)  then s_CC_3_ALZHDMTA=1;
if diag in (&chronic_desc4) then s_CC_4_ATRIALFB=1;
if diag in (&chronic_desc5) then s_CC_5_CATARACT=1;
if diag in (&chronic_desc6) then s_CC_6_CHRNKIDN=1;
if diag in (&chronic_desc7) then s_CC_7_COPD=1;
if diag in (&chronic_desc8) then s_CC_8_CHF=1;
if diag in (&chronic_desc9) then s_CC_9_DIABETES=1;
if diag in (&chronic_desc10) then s_CC_10_GLAUCOMA=1;
if diag in (&chronic_desc11) then s_CC_11_HIPFRAC=1;
if diag in (&chronic_desc12) then s_CC_12_ISCHMCHT=1;
if diag in (&chronic_desc13) then s_CC_13_DEPRESSN=1;
if diag in (&chronic_desc14) then s_CC_14_OSTEOPRS=1;
if diag in (&chronic_desc15) then s_CC_15_RA_OA=1;
if diag in (&chronic_desc16) then s_CC_16_STRKETIA=1;
if diag in (&chronic_desc17) then s_CC_17_CNCRBRST=1;
if diag in (&chronic_desc18) then s_CC_18_CNCRCLRC=1;
if diag in (&chronic_desc19) then s_CC_19_CNCRPRST=1;
if diag in (&chronic_desc20) then s_CC_20_CNCRLUNG=1;
if diag in (&chronic_desc21) then s_CC_21_CNCREndM=1;
end;

/*deal with dx codes that start with letters
Only two of them in the list we have to worry about*/
if anydigit(substr(trim(left(diag_string)),1,1))=0 then do;
if trim(left(diag_string)) in ("V431") then s_CC_5_CATARACT=1;
if trim(left(diag_string)) in ("V801") then s_CC_10_GLAUCOMA=1;
end;

run;

/*aggregate all chronic condition variables by bid*/
proc sql;
create table bid_dx_&start._&predeath.(rename=(bid_hrs_21=bid)) as
select distinct bid_hrs_21,r_id,
sum(s_CC_1_AMI) as s_CC_1_AMI,
sum(s_CC_2_ALZH) as s_CC_2_ALZH,
sum(s_CC_3_ALZHDMTA) as s_CC_3_ALZHDMTA,
sum(s_CC_4_ATRIALFB) as s_CC_4_ATRIALFB,
sum(s_CC_5_CATARACT) as s_CC_5_CATARACT,
sum(s_CC_6_CHRNKIDN) as s_CC_6_CHRNKIDN,
sum(s_CC_7_COPD) as s_CC_7_COPD,
sum(s_CC_8_CHF) as s_CC_8_CHF,
sum(s_CC_9_DIABETES) as s_CC_9_DIABETES,
sum(s_CC_10_GLAUCOMA) as s_CC_10_GLAUCOMA,
sum(s_CC_11_HIPFRAC) as s_CC_11_HIPFRAC,
sum(s_CC_12_ISCHMCHT) as s_CC_12_ISCHMCHT,
sum(s_CC_13_DEPRESSN) as s_CC_13_DEPRESSN,
sum(s_CC_14_OSTEOPRS) as s_CC_14_OSTEOPRS,
sum(s_CC_15_RA_OA) as s_CC_15_RA_OA,
sum(s_CC_16_STRKETIA) as s_CC_16_STRKETIA,
sum(s_CC_17_CNCRBRST) as s_CC_17_CNCRBRST,
sum(s_CC_18_CNCRCLRC) as s_CC_18_CNCRCLRC,
sum(s_CC_19_CNCRPRST) as s_CC_19_CNCRPRST,
sum(s_CC_20_CNCRLUNG) as s_CC_20_CNCRLUNG,
sum(s_CC_21_CNCREndM) as s_CC_21_CNCREndM

from list_&start._&predeath._dx group by bid_hrs_21,r_id;
quit;


/*merges with table of spouses w/ ffs mc 6m before r's death*/
 proc sql;
 create table bid_dx_&start._&predeath.2(drop=bid r_id2) as 
select a.s_bid_hrs,a.r_id,b.* 
 from spo_mc_i.s_r_dod a
 left join
  bid_dx_&start._&predeath.(rename=(r_id=r_id2)) b 
on trim(left(a.s_bid_hrs))=trim(left(b.bid)) and
	a.r_id=b.r_id2;
 quit;

/*convert to chronic condition vars. to binary variables*/
 data bid_dx_&start._&predeath.3;
 set bid_dx_&start._&predeath.2;
 array list s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM
;
do over list ;
if list>0 then list=1;
if list<=0 then list=0;
end;

/*create aggregated indicators*/
s_CC_AMI_isch=s_CC_1_AMI|s_CC_12_ISCHMCHT;
s_CC_alzheim=s_CC_2_ALZH|s_CC_3_ALZHDMTA;
s_CC_cncr_chronic=s_CC_17_CNCRBRST | s_CC_18_CNCRCLRC | s_CC_19_CNCRPRST | s_CC_20_CNCRLUNG | 
	s_CC_21_CNCREndM ;

/*label variables*/
label s_CC_1_AMI="AMI"
s_CC_2_ALZH="Alzheimer's disease"
s_CC_3_ALZHDMTA="Alzheimer's or Dementia"
s_CC_4_ATRIALFB="Atrial fibrillation"
s_CC_5_CATARACT="Cataract"
s_CC_6_CHRNKIDN="Chronic kidney disease"
s_CC_7_COPD="COPD"
s_CC_8_CHF="CHF"
s_CC_9_DIABETES="Diabetes"
s_CC_10_GLAUCOMA="Glaucoma"
s_CC_11_HIPFRAC="Hip fracture"
s_CC_12_ISCHMCHT="Ischemic heart disease"
s_CC_13_DEPRESSN="Depression"
s_CC_14_OSTEOPRS="Osteoporosis"
s_CC_15_RA_OA="Arthritis"
s_CC_16_STRKETIA="Stroke/TIA"
s_CC_17_CNCRBRST="Breast cancer"
s_CC_18_CNCRCLRC="Colorectal cancer"
s_CC_19_CNCRPRST="Prostate cancer"
s_CC_20_CNCRLUNG="Lung cancer"
s_CC_21_CNCREndM="Endometrial cancer"
s_CC_AMI_isch="AMI or Ischemic heart failure"
s_CC_alzheim="Alzheimer's or dementia"
s_CC_cncr_chronic="Cancer, all types"
;
run;


proc means;
var s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM;
run;

/************************************************************/
/*rename the cc variables with suffix for time period*/
/************************************************************/

/*creates dataset to use in the rename macro below*/
data test;
set bid_dx_&start._&predeath.3;
run;

/*rename macro to add _n12mn0 suffix to the chronic conditions variable names
Data file is still work.test but variables renamed after running this macro*/
%rename(WORK,TEST,&predeath.);

/*Changes name of bid_hrs variables so no suffix*/
data spo_mc_i.chronic_21_&predeath._0;
set test;
r_id=r_id_&predeath.;
s_bid_hrs=s_bid_hrs_&predeath.;
drop r_id_&predeath. s_bid_hrs_&predeath.;
run;

proc sort data=spo_mc_i.chronic_21_&predeath._0;
by s_bid_hrs r_id;
run;

%mend;

%cc(start=0d,predeath=n6m);
%cc(start=0d,predeath=n12m);
%cc(start=0d,predeath=n24m);

%cc(start=0d,predeath=p6m);
%cc(start=0d,predeath=p12m);
%cc(start=0d,predeath=p24m);
/*so resulting datastets are spo_mc_i.chronic_21_x#n_0 
x: n=pre p=post death
#: 6, 12, or 24m time period
merge to main dataset using r_id and s_bid_hrs*/

proc freq data=spo_mc_i.chronic_21_n6m_0;
table s_cc_alzheim_n6m s_cc_cncr_chronic_n6m;
run;

proc freq data=spo_mc_i.chronic_21_p24m_0;
table s_cc_alzheim_p24m s_cc_cncr_chronic_p24m;
run;


/************************************************************/
/*Merge into HRS dataset with elix already added */
/************************************************************/

/*first merge the cc datasets together*/
data cc_all;
merge spo_mc_i.chronic_21_n6m_0 spo_mc_i.chronic_21_n12m_0
spo_mc_i.chronic_21_n24m_0 spo_mc_i.chronic_21_p6m_0
spo_mc_i.chronic_21_p12m_0 spo_mc_i.chronic_21_p24m_0;
by s_bid_hrs r_id;
run;

/*merge chronic conditions into main spouse dataset
for observations with no s with ffs mc 6m pre-death, keep cc's as missing*/
proc sql;
create table spo_mc_i.hrs_elix_cc(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix a 
left join
cc_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

proc means data=spo_mc_i.hrs_elix_cc;
vars s_cc_:;
run;




H="Get S Medicare Costs"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, 6m 12m 18m and 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

libname spo_mc_i 'E:\data\spouse_claims\data\int_data';

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(days_start=,days_bef_death=,source=,equ=,name=);
%let source0=mp;

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source0._meet_&name.;
if (trim(left(SSLSSNF))&equ.="N");
win_start_dt=r_death_date_e-&days_bef_death;
format admit_date disch_date win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<=r_death_date_e and
	win_start_dt<=disch_date<=r_death_date_e;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<=disch_date<=r_death_date_e;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<=r_death_date_e and
	disch_date>r_death_date_e;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(r_death_date_e-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%mp(days_start=0,days_bef_death=(183),source=snf,equ=,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=snf,equ=,name=12m );
%mp(days_start=0,days_bef_death=(548),source=snf,equ=,name=18m );
%mp(days_start=0,days_bef_death=(2*365.25),source=snf,equ=,name=24m );
%mp(days_start=0,days_bef_death=(183),source=ip,equ=~,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=ip,equ=~,name=12m );
%mp(days_start=0,days_bef_death=(548),source=ip,equ=~,name=18m );
%mp(days_start=0,days_bef_death=(2*365.25),source=ip,equ=~,name=24m );


proc means data=snf_6m; var s_snf_paid_by_mc_6m;run;

/*merge the 3 datasets with before snf costs*/
data snf_bef;
merge snf_6m snf_12m snf_18m snf_24m;
by s_BID_hrs r_id; 
run;

proc means data=snf_bef; var s_snf_paid_by_mc_: ;run;

data ip_bef;
merge ip_6m ip_12m ip_18m ip_24m;
by s_BID_hrs r_id; 
run;

proc means data=ip_bef; var s_ip_paid_by_mc_: ;run;

/****************************************************************/
/*medpar claims, time periods after R's death********************/
/****************************************************************/
%macro mp_p(days_start=,days_aft_death=,source=,equ=,name=);
%let source0=mp;

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source0._meet_&name.;
if (trim(left(SSLSSNF))&equ.="N");
win_end_dt=r_death_date_e+&days_aft_death;
format admit_date disch_date win_end_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if r_death_date_e<=admit_date<=win_end_dt and
	r_death_date_e<=disch_date<=win_end_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if r_death_date_e>admit_date and
	r_death_date_e<=disch_date<=win_end_dt;
run;

/*identify fraction of claims to be attributed to period after death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-r_death_date_e+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start within window but end after window*/
data &source._meet_4;
set &source._meet;
if r_death_date_e<=admit_date<=win_end_dt and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_end_dt -admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%mp_p(days_start=0,days_aft_death=(183),source=snf,equ=,name=p6m );
%mp_p(days_start=0,days_aft_death=(365.25),source=snf,equ=,name=p12m );
%mp_p(days_start=0,days_aft_death=(548),source=snf,equ=,name=p18m );
%mp_p(days_start=0,days_aft_death=(2*365.25),source=snf,equ=,name=p24m );
%mp_p(days_start=0,days_aft_death=(183),source=ip,equ=~,name=p6m );
%mp_p(days_start=0,days_aft_death=(365.25),source=ip,equ=~,name=p12m );
%mp_p(days_start=0,days_aft_death=(548),source=ip,equ=~,name=p18m );
%mp_p(days_start=0,days_aft_death=(2*365.25),source=ip,equ=~,name=p24m );


proc means data=snf_p6m; var s_snf_paid_by_mc_p6m;run;

/*merge the 4 datasets with after snf costs*/
data snf_aft;
merge snf_p6m snf_p12m snf_p18m snf_p24m;
by s_BID_hrs r_id; 
run;

proc means data=snf_aft n mean median min max; var s_snf_paid_by_mc_: ;run;

data ip_aft;
merge ip_p6m ip_p12m ip_p18m ip_p24m;
by s_BID_hrs r_id; 
run;

proc means data=ip_aft n mean median min max; var s_ip_paid_by_mc_: ;run;

/****************************************************************/
/*other claim types, time periods before and after R's death*****/
/****************************************************************/
/*macro to calculate totals for the claims that are not in medpar files*/
%macro all_other(source=,name=);

/*just keep relevant variables*/
data &source._meet;
set spo_mc_i.&source._meet_&name.(keep=admit_date disch_date BID_hrs_21 pmt_amt r_death_date_e r_id);
format admit_date disch_date date9.;
run;

/*Adjust for inflation*/
data &source._meet2;
set &source._meet;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt);
run;

/*Calculate total mc payments by ID*/
proc sql;
create table &source._pay as select distinct BID_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc
from &source._meet2 group by BID_hrs_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name. 
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

 proc sort data=&source._&name ;
 by s_BID_hrs r_id;
 run;
 %mend;

 %all_other(source=op,name=6m);
 %all_other(source=op,name=12m);
 %all_other(source=op,name=18m);
 %all_other(source=op,name=24m);
 %all_other(source=op,name=p6m);
 %all_other(source=op,name=p12m);
 %all_other(source=op,name=p18m);
 %all_other(source=op,name=p24m);

 %all_other(source=pb,name=6m);
 %all_other(source=pb,name=12m);
  %all_other(source=pb,name=18m);
 %all_other(source=pb,name=24m);
 %all_other(source=pb,name=p6m);
 %all_other(source=pb,name=p12m);
 %all_other(source=pb,name=p18m);
 %all_other(source=pb,name=p24m);

 %all_other(source=hh,name=6m);
 %all_other(source=hh,name=12m);
%all_other(source=hh,name=18m);
 %all_other(source=hh,name=24m);
 %all_other(source=hh,name=p6m);
 %all_other(source=hh,name=p12m);
 %all_other(source=hh,name=p18m);
 %all_other(source=hh,name=p24m);

 %all_other(source=hs,name=6m);
 %all_other(source=hs,name=12m);
 %all_other(source=hs,name=18m);
 %all_other(source=hs,name=24m);
 %all_other(source=hs,name=p6m);
 %all_other(source=hs,name=p12m);
 %all_other(source=hs,name=p18m);
 %all_other(source=hs,name=p24m);

 %all_other(source=dm,name=6m);
 %all_other(source=dm,name=12m);
  %all_other(source=dm,name=18m);
 %all_other(source=dm,name=24m);
 %all_other(source=dm,name=p6m);
 %all_other(source=dm,name=p12m);
 %all_other(source=dm,name=p18m);
 %all_other(source=dm,name=p24m);

%macro merge(source=,su=,name=);
data &source._&name.;
merge &source._&su.6m &source._&su.12m &source._&su.18m &source._&su.24m;
by s_BID_hrs r_id;
run;

proc means n mean median min max; var s_&source._paid_by_mc_: ; run;
%mend;

%merge(source=op,su=,name=bef);
%merge(source=op,su=p,name=aft);
%merge(source=pb,su=,name=bef);
%merge(source=pb,su=p,name=aft);
%merge(source=hh,su=,name=bef);
%merge(source=hh,su=p,name=aft);
%merge(source=hs,su=,name=bef);
%merge(source=hs,su=p,name=aft);
%merge(source=dm,su=,name=bef);
%merge(source=dm,su=p,name=aft);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all;
merge ip_bef snf_bef op_bef pb_bef hh_bef hs_bef dm_bef 
ip_aft snf_aft op_aft pb_aft hh_aft hs_aft dm_aft;
by s_BID_hrs r_id;
run;

%macro total(su=);
data mc_costs_all;
set mc_costs_all;
s_tot_paid_by_mc_&su=s_ip_paid_by_mc_&su + s_snf_paid_by_mc_&su + s_op_paid_by_mc_&su + 
s_pb_paid_by_mc_&su + s_hh_paid_by_mc_&su + s_hs_paid_by_mc_&su + s_dm_paid_by_mc_&su;
run;
%mend;

%total(su=6m);
%total(su=12m);
%total(su=18m);
%total(su=24m);

%total(su=p6m);
%total(su=p12m);
%total(su=p18m);
%total(su=p24m);

/*save permanent dataset*/
data spo_mc_i.mc_costs_all;
set mc_costs_all;
run;

proc means n mean median min max; run;

/*merge costs with rest of the spouse dataset
for observations with no s with ffs mc 6m pre-death, keep costs as missing*/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc a 
left join
spo_mc_i.mc_costs_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

proc contents; run;

H="Get S Medicare Costs by month"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

libname spo_mc_i 'E:\data\spouse_claims\data\int_data';

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(source=,equ=,name=);
data spo_mc_i.&source._meet_&name.;
set spo_mc_i.mp_meet_&name.;
if (trim(left(SSLSSNF)))&equ.="N";
run;
%mend;

%mp(source=ip,equ=~,name=24m);
%mp(source=ip,equ=~,name=p24m);
%mp(source=snf,equ=,name=24m);
%mp(source=snf,equ=,name=p24m);

%macro mp_death_dt(source=);
*get claims that overlap with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=admit_date and admit_date~=disch_date;
admit_on_death_date=1;
run;


data &source._meet_both;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=disch_date and admit_date=disch_date;
admit_on_death_date=1;
disch_on_death_date=1;
run;




data &source._cost;
set &source._meet_admit &source._meet_both;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
&source._paid_by_mc_death_dt=(1/(disch_date-admit_date+1))*&source._paid_by_mc;
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as s_&source._paid_by_mc_death_dt,
sum(admit_on_death_date) as s_&source._admit_dod, sum(disch_on_death_date) as s_&source._disch_dod
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;
%mp_death_dt(source=ip);
%mp_death_dt(source=snf);


%macro claims_death_dt(source=);
*get claims that start with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if r_death_date_e=admit_date; 
run;



data &source._cost;
set &source._meet_admit;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc_death_dt=rate*(pmt_amt);
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as s_&source._paid_by_mc_death_dt
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;

%claims_death_dt(source=op);
%claims_death_dt(source=pb);
%claims_death_dt(source=hh);
%claims_death_dt(source=hs);
%claims_death_dt(source=dm);

data mc_costs_doda;
merge ip_pay snf_pay op_pay pb_pay hh_pay hs_pay dm_pay ;
s_bid_hrs=bid_hrs_21;
by BID_hrs_21 r_id;
run;


data mc_costs_dod;
set mc_costs_doda (drop=bid_hrs_21);
s_tot_paid_by_mc_death_dt=s_ip_paid_by_mc_death_dt+s_snf_paid_by_mc_death_dt+s_op_paid_by_mc_death_dt +
s_pb_paid_by_mc_death_dt+s_hs_paid_by_mc_death_dt+s_dm_paid_by_mc_death_dt;
run;


%macro mp_claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_stop_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before and end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>admit_date and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_stop_dt-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;



%macro claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, not snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where start of claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt;
run;


/*adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro mp_claims_p(days_start=,days_aft_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=r_death_date_e+&days_aft_death;
win_start_dt=r_death_date_e+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>=admit_date and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify fraction of claims to be attributed to period after death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start within window but end after window*/
data &source._meet_4;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_end_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before window but end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>=admit_date and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_end_dt -win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;
/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro claims_p(days_start=,days_aft_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=r_death_date_e+&days_aft_death;
win_start_dt=r_death_date_e+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt;
run;


/*adjust for inflation*/
data &source._cost;
set &source._meet_1;
array list pmt_amt;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as s_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%macro days_nesting();

%do i=1 %to 24 ;


%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=snf,  name=m&i.);
%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=ip,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=pb,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=op,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hh,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hs,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=dm,  name=m&i.);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=snf,  name=m&i.p);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=ip,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=op,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=pb,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=hh,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=hs,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417), source=dm,  name=m&i.p);


%end;
%mend;

%days_nesting();




%macro merge(l=,source=,time=,p=);
data &source._&time._m1;
set &source._m1&p.;
run;

%do i=2 %to 24 ;
%let l = %eval(&i.-1) ;

data &source._&time._m&i.;
merge &source._&time._m&l. &source._m&i.&p.;
run;
%end;

data &source._&time.;
set &source._&time._m24;
run;
%mend;

%merge(source=ip,time=bef,p=);
%merge(source=ip,time=aft,p=p);
%merge(source=snf,time=bef,p=);
%merge(source=snf,time=aft,p=p);
%merge(source=op,time=bef,p=);
%merge(source=op,time=aft,p=p);
%merge(source=pb,time=bef,p=);
%merge(source=pb,time=aft,p=p);
%merge(source=hh,time=bef,p=);
%merge(source=hh,time=aft,p=p);
%merge(source=hs,time=bef,p=);
%merge(source=hs,time=aft,p=p);
%merge(source=dm,time=bef,p=);
%merge(source=dm,time=aft,p=p);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all;
merge ip_bef snf_bef op_bef pb_bef hh_bef hs_bef dm_bef 
ip_aft snf_aft op_aft pb_aft hh_aft hs_aft dm_aft;
by s_BID_hrs r_id;
run;

%macro total();

data mc_costs_all2;
set mc_costs_all;
%do i=1 %to 24;
s_tot_paid_by_mc_m&i.=s_ip_paid_by_mc_m&i. + s_snf_paid_by_mc_m&i. + s_op_paid_by_mc_m&i. + 
s_pb_paid_by_mc_m&i. + s_hh_paid_by_mc_m&i. + s_hs_paid_by_mc_m&i. + s_dm_paid_by_mc_m&i.;
s_tot_paid_by_mc_m&i.p=s_ip_paid_by_mc_m&i.p + s_snf_paid_by_mc_m&i.p + s_op_paid_by_mc_m&i.p + 
s_pb_paid_by_mc_m&i.p + s_hh_paid_by_mc_m&i.p + s_hs_paid_by_mc_m&i.p + s_dm_paid_by_mc_m&i.p;
%end;
run;
%mend;

%total();

data mc_costs_all3;
merge mc_costs_all2 mc_costs_dod;
by  s_bid_hrs r_id;
run;

/*save permanent dataset*/
data spo_mc_i.mc_costs_monthly;
set mc_costs_all3;
run;

proc export data=spo_mc_i.mc_costs_monthly outfile='E:\data\spouse_claims\data\int_data\mc_costs_monthly.dta' replace; run;

/*merge costs with rest of the spouse dataset*/

proc sql;
create table spo_mc_i.hrs_elix_cc_pay_monthly(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay a 
left join
spo_mc_i.mc_costs_monthly(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;



H="Get S other Medicare utilization variables from claims"
/*additional outcome variables

Spouse - 6m 12m 18 and 24m pre and post R's death:
Hospital # visits
Hospital nights
# ED visits
# OP visits*/

/*****************************************************************************/
/*get admissions and ip ed visits from ip claims 6, 12 and 24m pre R's death*/
/*****************************************************************************/
%macro pre_admissions(days=,suffix=);

/*pull list of ip claims from all medpar claims x days pre-death*/
data ip_meet_&suffix.;
set spo_mc_i.mp_meet_&suffix.(where=(trim(left(SSLSSNF))~="N"));
format admit_date date9.;
format disch_date date9.;
run;

data ip_&suffix._2;
set ip_meet_&suffix.;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;

/*truncate stays where the admit is before x days pre- R's death
or discharge is after R's death so can get accurate LOS*/
if admit_date<r_death_date_e - &days. then do;
	admit_date=r_death_date_e - &days.;
	admit_trunc=1;
	end;
if r_death_date_e <disch_date then do;
	disch_date=r_death_date_e;
	disch_trunc=1;	
	end;
adj_los=disch_date-admit_date;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*first, check if mental health is the admitting diagnosis*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;

proc freq; table adm_mental_ill*any_dx_mental_ill; run;

proc sort data=ip_&suffix._2a;
by BID_hrs_21 r_id;
run;

proc sql;
create table ip_&suffix._3 as select distinct BID_hrs_21,r_id,
/*total ICU days*/
sum(icu_days) as s_icu_days_&suffix. label="total icu days &suffix.",
/*count of IP admissions, all types*/
count(*) as s_n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*total Hospital LOS*/
sum(adj_los) as s_n_hospd_&suffix. label="total hospital days &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as s_n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as s_n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as s_n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."

 from ip_&suffix._2a group by BID_hrs_21,r_id;
quit;

data ip_&suffix._4;
set ip_&suffix._3;
if s_icu_days_&suffix.>s_n_hospd_&suffix. then s_icu_days_&suffix.=s_n_hospd_&suffix.;
run;

proc freq; 
table s_icu_days_&suffix. s_n_ip_admit_&suffix. s_n_hospd_&suffix.  s_n_ED_ip_&suffix. s_n_mental_ill_adm_dx_ip_&suffix. s_n_mental_ill_any_dx_ip_&suffix. ;
run;

proc sort data=ip_&suffix._4; by bid_hrs_21 r_id; run;

%mend;

%pre_admissions(days=183,suffix=6m);
%pre_admissions(days=365,suffix=12m);
%pre_admissions(days=548,suffix=18m);
%pre_admissions(days=730,suffix=24m);
/*****************************************************************************/
/*get admissions and ip ed visits from ip claims 6, 12, 18 and 24m post R's death*/
/*****************************************************************************/
%macro post_admissions(days=,suffix=);

/*pull list of ip claims from all medpar claims x days post-death*/
data ip_meet_&suffix.;
set spo_mc_i.mp_meet_&suffix.(where=(trim(left(SSLSSNF))~="N"));
run;

data ip_&suffix._2;
set ip_meet_&suffix.;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;

/*truncate stays where the admit is before R's death
or discharge is after the x days after R's death so can get accurate LOS*/
if admit_date<r_death_date_e then do;
	admit_date=r_death_date_e;
	admit_trunc=1;
	end;
if r_death_date_e + &days.<disch_date then do;
	disch_date=r_death_date_e + &days.;
	disch_trunc=1;	
	end;
adj_los=disch_date-admit_date;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present in the IP claim*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*determine if mental health dx is admitting dx for hospitalization*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;

proc freq; table adm_mental_ill*any_dx_mental_ill; run;

proc sort data=ip_&suffix._2a;
by BID_hrs_21 r_id;
run;

proc sql;
create table ip_&suffix._3 as select distinct BID_hrs_21,r_id,
/*total ICU days*/
sum(icu_days) as s_icu_days_&suffix. label="total icu days &suffix.",
/*count of IP admissions, all types*/
count(*) as s_n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*total Hospital LOS*/
sum(adj_los) as s_n_hospd_&suffix. label="total hospital days &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as s_n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as s_n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as s_n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."
 from ip_&suffix._2a group by BID_hrs_21,r_id;
quit;

data ip_&suffix._4;
set ip_&suffix._3;
if s_icu_days_&suffix.>s_n_hospd_&suffix. then s_icu_days_&suffix.=s_n_hospd_&suffix.;
run;

proc freq; 
table s_icu_days_&suffix. s_n_ip_admit_&suffix. s_n_hospd_&suffix.  s_n_ED_ip_&suffix. s_n_mental_ill_adm_dx_ip_&suffix. s_n_mental_ill_any_dx_ip_&suffix. ;
run;

proc sort data=ip_&suffix._4; by bid_hrs_21 r_id; run;

%mend;

%post_admissions(days=183,suffix=p6m);
%post_admissions(days=365,suffix=p12m);
%post_admissions(days=548,suffix=p18m);
%post_admissions(days=730,suffix=p24m);

/*****************************************************************************/
/*get outpatient visits and ed use from op claims 6, 12 and 24m pre and post R's death*/
/*****************************************************************************/
%macro op(days=,suffix=);

data op_meet_&suffix.;
set spo_mc_i.op_meet_&suffix.(keep=bid_hrs_21 r_id admit_date disch_date 
	r_death_date_e RVCNTR01-RVCNTR45);
run;

proc sort data=op_meet_&suffix.; by bid_hrs_21 r_id admit_date; run;

data ed_op_&suffix._1;
set op_meet_&suffix.;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;

proc freq;
table ed_op;
run;

proc sql;
create table ed_op_&suffix._2 as select distinct bid_hrs_21,r_id,
count(case when ed_op=1 then ed_op else . end)
	as s_n_ed_op_visits_&suffix. label="n of OP ED visits &suffix.",
count(*) as s_n_op_visits_&suffix. label="n OP visits &suffix."
	from ed_op_&suffix._1 group by bid_hrs_21,r_id;
quit;

proc freq;
table s_n_ed_op_visits_&suffix s_n_op_visits_&suffix;
run;

proc sort data=ed_op_&suffix._2; by bid_hrs_21 r_id; run;

%mend;

%op(days=183,suffix=6m);
%op(days=365,suffix=12m);
%op(days=548,suffix=18m);
%op(days=730,suffix=24m);

%op(days=183,suffix=p6m);
%op(days=365,suffix=p12m);
%op(days=548,suffix=p18m);
%op(days=730,suffix=p24m);

/*****************************************************************************/
/*merge IP and OP variables into main dataset*/
/*****************************************************************************/
data ip_all;
merge ip_6m_4 ip_12m_4 ip_18m_4 ip_24m_4 ip_p6m_4 ip_p12m_4 ip_p18m_4 ip_p24m_4;
by bid_hrs_21 r_id;
run;

data op_all;
merge ed_op_6m_2 ed_op_12m_2 ed_op_18m_2 ed_op_24m_2 ed_op_p6m_2 ed_op_p12m_2 ed_op_p18m_2 ed_op_p24m_2;
by bid_hrs_21 r_id;
run;

/*now bring in to list of obs with ffs medicare 6m prior to R's death*/
proc sql;
create table add_ip(drop=bid_hrs_21 r_id2) as select 
a.s_bid_hrs,a.r_id,b.*
from spo_mc_i.s_r_dod a
left join
ip_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id2;
 quit;

proc sql;
create table add_op(drop=bid_hrs_21 r_id2) as select *
from add_ip a
left join
op_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id2;
 quit;

/*set to 0 if had ffs mc 6m prior to R's death*/
data spo_mc_i.op_ip;
set add_op;
array list 
s_icu_days_6m s_n_ip_admit_6m s_n_hospd_6m s_n_ED_ip_6m s_n_mental_ill_adm_dx_ip_6m s_n_mental_ill_any_dx_ip_6m
s_icu_days_12m s_n_ip_admit_12m s_n_hospd_12m s_n_ED_ip_12m  s_n_mental_ill_adm_dx_ip_12m s_n_mental_ill_any_dx_ip_12m
s_icu_days_18m s_n_ip_admit_18m s_n_hospd_18m s_n_ED_ip_18m  s_n_mental_ill_adm_dx_ip_18m s_n_mental_ill_any_dx_ip_18m
s_icu_days_24m s_n_ip_admit_24m s_n_hospd_24m s_n_ED_ip_24m  s_n_mental_ill_adm_dx_ip_24m s_n_mental_ill_any_dx_ip_24m 
s_icu_days_p6m s_n_ip_admit_p6m s_n_hospd_p6m s_n_ED_ip_p6m s_n_mental_ill_adm_dx_ip_p6m s_n_mental_ill_any_dx_ip_p6m 
s_icu_days_p12m s_n_ip_admit_p12m s_n_hospd_p12m s_n_ED_ip_p12m s_n_mental_ill_adm_dx_ip_p12m s_n_mental_ill_any_dx_ip_p12m
s_icu_days_p18m s_n_ip_admit_p18m s_n_hospd_p18m s_n_ED_ip_p18m s_n_mental_ill_adm_dx_ip_p18m s_n_mental_ill_any_dx_ip_p18m
s_icu_days_p24m s_n_ip_admit_p24m s_n_hospd_p24m s_n_ED_ip_p24m s_n_mental_ill_adm_dx_ip_p24m s_n_mental_ill_any_dx_ip_p24m
s_n_ed_op_visits_6m s_n_op_visits_6m s_n_ed_op_visits_12m s_n_op_visits_12m
s_n_ed_op_visits_18m s_n_op_visits_18m s_n_ed_op_visits_24m s_n_op_visits_24m
s_n_ed_op_visits_p6m s_n_op_visits_p6m s_n_ed_op_visits_p12m s_n_op_visits_p12m
s_n_ed_op_visits_p18m s_n_op_visits_p18m s_n_ed_op_visits_p24m s_n_op_visits_p24m 
 ;
	do over list;
	if list=. then list=0;
	end;

s_n_ed_6m=s_n_ED_ip_6m +s_n_ed_op_visits_6m;
label s_n_ed_6m="S n ED Visits 6m, from IP or OP claims"; 
s_n_ed_12m=s_n_ED_ip_12m +s_n_ed_op_visits_12m;
label s_n_ed_12m="S n ED Visits 12m, from IP or OP claims"; 
s_n_ed_18m=s_n_ED_ip_18m +s_n_ed_op_visits_18m;
label s_n_ed_18m="S n ED Visits 18m, from IP or OP claims"; 
s_n_ed_24m=s_n_ED_ip_24m +s_n_ed_op_visits_24m;
label s_n_ed_24m="S n ED Visits 24m, from IP or OP claims"; 
s_n_ed_p6m=s_n_ED_ip_p6m +s_n_ed_op_visits_p6m;
label s_n_ed_p6m="S n ED Visits p6m, from IP or OP claims"; 
s_n_ed_p12m=s_n_ED_ip_p12m +s_n_ed_op_visits_p12m;
label s_n_ed_p12m="S n ED Visits p12m, from IP or OP claims"; 
s_n_ed_p18m=s_n_ED_ip_p18m +s_n_ed_op_visits_p18m;
label s_n_ed_p18m="S n ED Visits p18m, from IP or OP claims"; 
s_n_ed_p24m=s_n_ED_ip_p24m +s_n_ed_op_visits_p24m;
label s_n_ed_p24m="S n ED Visits p24m, from IP or OP claims"; 
run;

/*merge into overall dataset*/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay_out(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay_monthly a 
left join
spo_mc_i.op_ip(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

proc means n mean median min max; var s_icu: s_n_ip_admit: s_n_hospd: 
s_n_mental_ill_adm_dx_ip: s_n_mental_ill_any_dx_ip: s_n_op_visits: s_n_ed_: ;run;

proc contents data=spo_mc_i.hrs_elix_cc_pay_out; run;

H="Get S other utilization vars by month"
/*additional outcome variables

Spouse - monthly pre and post R's death:
Hospital # visits
Hospital nights
# ED visits
# OP visits*/


/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/




/*****************************************************************************/
/*get admissions and ip ed visits from ip claims monthly pre R's death*/
/*****************************************************************************/




%macro pre_admissions(days_start=,days_bef_death=,suffix=,su=);

/*pull list of ip claims from all medpar claims x days pre-death*/
data ip_meet_&suffix._1;
set spo_mc_i.mp_meet_&su.(where=(trim(left(SSLSSNF))~="N"));
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

data ip_&suffix._2;
set ip_meet_&suffix._1;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;


/*truncate stays where the admit is before x days pre- R's death
or discharge is after R's death so can get accurate LOS*/
admit_date2=admit_date;
disch_date2=disch_date;
if admit_date<win_start_dt then do;
	admit_date2=win_start_dt;
	admit_trunc=1;
	end;
if win_stop_dt <disch_date then do;
	disch_date2=win_stop_dt;
	disch_trunc=1;	
	end;
adj_los=disch_date2-admit_date2;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*first, check if mental health is the admitting diagnosis*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;

proc freq; table adm_mental_ill*any_dx_mental_ill; run;


proc sort data=ip_&suffix._2a;
by BID_hrs_21 r_id;
run;

proc sql;
create table ip_&suffix._3a as select distinct BID_hrs_21,r_id,
/*total ICU days*/
sum(icu_days) as s_icu_days_&suffix. label="total icu days &suffix.",
/*total Hospital LOS*/
sum(adj_los) as s_n_hospd_&suffix. label="total hospital days &suffix."
from ip_&suffix._2a group by BID_hrs_21,r_id;
quit;

data ip_&suffix._2b;
set ip_&suffix._2a;
if win_start_dt<=admit_date<win_stop_dt;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;
run;

proc sql;
create table ip_&suffix._3b as select distinct BID_hrs_21,r_id,
/*count of IP admissions, all types*/
count(*) as s_n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as s_n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as s_n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as s_n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."
 from ip_&suffix._2b group by BID_hrs_21,r_id;
quit;

proc sql;
create table ip_&suffix._3 as select *
from ip_&suffix._3a a 
left join ip_&suffix._3b b
on a.bid_hrs_21=b.bid_hrs_21;
quit;

data ip_&suffix.;
set ip_&suffix._3;
if s_icu_days_&suffix.>s_n_hospd_&suffix. then s_icu_days_&suffix.=s_n_hospd_&suffix.;
run;



proc freq; 
table s_icu_days_&suffix. s_n_ip_admit_&suffix. s_n_hospd_&suffix.  s_n_ED_ip_&suffix. s_n_mental_ill_adm_dx_ip_&suffix. s_n_mental_ill_any_dx_ip_&suffix. ;
run;

proc sort data=ip_&suffix.; by bid_hrs_21 r_id; run;

%mend;

/*****************************************************************************/
/*get admissions and ip ed visits from ip claims monthly post R's death*/
/*****************************************************************************/
%macro post_admissions(days_start=,days_aft_death=,suffix=);

/*pull list of ip claims from all medpar claims x days post-death*/
data ip_meet_&suffix._1;
set spo_mc_i.mp_meet_&suffix.(where=(trim(left(SSLSSNF))~="N"));
win_stop_dt=r_death_date_e+&days_aft_death;
win_start_dt=r_death_date_e+&days_start;
format admit_date disch_date win_stop_dt win_start_dt date9.;
run;

data ip_&suffix._2;
set ip_meet_&suffix._1;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;


/*truncate stays where the admit is before R's death
or discharge is after the x days after R's death so can get accurate LOS*/
admit_date2=admit_date;
disch_date2=disch_date;
if admit_date<win_start_dt then do;
	admit_date2=win_start_dt;
	admit_trunc=1;
	end;
if win_stop_dt<disch_date then do;
	disch_date2=win_stop_dt;
	disch_trunc=1;	
	end;
adj_los=disch_date2-admit_date2;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present in the IP claim*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*determine if mental health dx is admitting dx for hospitalization*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;

proc freq; table adm_mental_ill*any_dx_mental_ill; run;

proc sort data=ip_&suffix._2a;
by BID_hrs_21 r_id;
run;

proc sql;
create table ip_&suffix._3a as select distinct BID_hrs_21,r_id,
/*total ICU days*/
sum(icu_days) as s_icu_days_&suffix. label="total icu days &suffix.",
/*total Hospital LOS*/
sum(adj_los) as s_n_hospd_&suffix. label="total hospital days &suffix."
from ip_&suffix._2a group by BID_hrs_21,r_id;
quit;

data ip_&suffix._2b;
set ip_&suffix._2a;
if win_start_dt<admit_date<=win_stop_dt;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;
run;

proc sql;
create table ip_&suffix._3b as select distinct BID_hrs_21,r_id,
/*count of IP admissions, all types*/
count(*) as s_n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as s_n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as s_n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as s_n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."
 from ip_&suffix._2b group by BID_hrs_21,r_id;
quit;

proc sql;
create table ip_&suffix._3 as select *
from ip_&suffix._3a a 
left join ip_&suffix._3b b
on a.bid_hrs_21=b.bid_hrs_21;
quit;

data ip_&suffix.;
set ip_&suffix._3;
if s_icu_days_&suffix.>s_n_hospd_&suffix. then s_icu_days_&suffix.=s_n_hospd_&suffix.;
run;

proc freq; 
table s_icu_days_&suffix. s_n_ip_admit_&suffix. s_n_hospd_&suffix.  s_n_ED_ip_&suffix. s_n_mental_ill_adm_dx_ip_&suffix. s_n_mental_ill_any_dx_ip_&suffix. ;
run;

proc sort data=ip_&suffix.; by bid_hrs_21 r_id; run;

%mend;



/*****************************************************************************/
/*get outpatient visits and ed use from op claims monthly pre and post R's death*/
/*****************************************************************************/
%macro op(days=,suffix=);

data op_meet_&suffix.;
set spo_mc_i.op_meet_&suffix.(keep=bid_hrs_21 r_id admit_date disch_date 
	r_death_date_e RVCNTR01-RVCNTR45);
run;

proc sort data=op_meet_&suffix.; by bid_hrs_21 r_id admit_date; run;

data ed_op_&suffix._1;
set op_meet_&suffix.;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;

proc freq;
table ed_op;
run;

proc sql;
create table op_&suffix. as select distinct bid_hrs_21,r_id,
count(case when ed_op=1 then ed_op else . end)
	as s_n_ed_op_visits_&suffix. label="n of OP ED visits &suffix.",
count(*) as s_n_op_visits_&suffix. label="n OP visits &suffix."
	from ed_op_&suffix._1 group by bid_hrs_21,r_id;
quit;


proc sort data=op_&suffix.; by bid_hrs_21 r_id; run;

%mend;

%macro claims_nesting();

%do i=1 %to 24 ;
%pre_admissions(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), suffix=m&i.,su=m&i.);
%post_admissions(days_start=floor((&i.-1)*30.417),days_aft_death=floor(&i.*30.417),suffix=m&i.p);
%op(suffix=m&i.);
%op(suffix=m&i.p);
%end;
%mend;
%claims_nesting();
%pre_admissions(days_start=-1,days_bef_death=0,suffix=dod,su=m0)
data op_meet_dod;
set spo_mc_i.op_meet_m0(keep=bid_hrs_21 r_id admit_date disch_date 
	r_death_date_e RVCNTR01-RVCNTR45);
run;
data op_meet_doda;
set op_meet_dod(where=(admit_date=r_death_date_e));
run;
proc sort data=op_meet_doda; by bid_hrs_21 r_id admit_date; run;

data ed_op_dod_1;
set op_meet_doda;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;

proc freq;
table ed_op;
run;

proc sql;
create table op_0 as select distinct bid_hrs_21,r_id,
count(case when ed_op=1 then ed_op else . end)
	as s_n_ed_op_visits_dod label="n of OP ED visits dod",
count(*) as s_n_op_visits_dod label="n OP visits dod"
	from ed_op_dod_1 group by bid_hrs_21,r_id;
quit;


proc sort data=op_0; by bid_hrs_21 r_id; run;

data ip_0;
set ip_dod;
run;



%macro claims_all(source=,);
data &source._all_1;
merge &source._0 &source._m1 &source._m1p;
by bid_hrs_21 r_id;
run;


%do i=2 %to 24 ;
%let l=%eval(&i-1);
data &source._all_&i.;
merge &source._all_&l. &source._m&i. &source._m&i.p;
by bid_hrs_21 r_id;
run;
%end;

data &source._all;
set &source._all_24;
run;

%mend;

%claims_all(source=ip);
%claims_all(source=op);

/*now bring in to list of obs with ffs medicare at R's death*/
proc sql;
create table add_ip(drop=bid_hrs_21 r_id2) as select 
a.s_bid_hrs,a.r_id,b.*
from spo_mc_i.s_r_dod a
left join
ip_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id2;
 quit;

proc sql;
create table spo_mc_i.op_ip_monthly(drop=bid_hrs_21 r_id2) as select *
from add_ip a
left join
op_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id2;
 quit;

/*merge into overall dataset*/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay_out_monthly(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay_out a 
left join
spo_mc_i.op_ip_monthly(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;


H="Get R Medicare Costs"
/*get decedent medicare costs by claim type and total, adjusted for inflation
to 2012$, 6m 12m 18m and 24m before R's death

Uses R claims lists from spouse_2012.txt code, generated in section 
"Create additional medicare use variables from claims"
Saved under libname spo_int 'E:\data\spouse\int_data';

Adds costs to the dataset spo_mc_i.hrs_elix_cc_pay_out

final dataset is E:\data\spouse_claims\data\int_data\hrs_elix_cc_pay_out_rpay.dta*/

/*claims lists, from spouse general data processing working folder*/
libname spo_int 'E:\data\spouse\int_data';

data r_dod;
set spo_mc_i.hrs_elix_cc_pay_out(keep=r_BID_hrs r_id r_death_date_e 
	 r_xwalk_yes r_part_ab_6m r_hmo_d_6m);
r_death_year=year(r_death_date_e);
r_death_month=month(r_death_date_e);
run;


/*list of r's with xwalk and dod, same list that got claims list in spouse general code n=8001*/
data r_dod_2;
set r_dod;
if r_xwalk_yes=1 ;
run;

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(days_start=,days_bef_death=,source=,equ=,name=);
%let source0=mp;

proc sql;
create table &source._meet_1 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source0._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.r_bid_hrs))
and &days_start<=b.r_death_date_e-a.disch_date<=&days_bef_death ;
quit;

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set &source._meet_1;
if (trim(left(SSLSSNF))&equ.="N");
win_start_dt=r_death_date_e-&days_bef_death;
format admit_date disch_date win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<=r_death_date_e and
	win_start_dt<=disch_date<=r_death_date_e ;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<disch_date<=r_death_date_e;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<=r_death_date_e and
	disch_date>r_death_date_e;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(r_death_date_e-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21;
quit;

/*merge into a full bid list of decedents with spouse id included*/
proc sql;
create table &source._&name. as select 
a.r_id,a.r_bid_hrs,coalesce(b.&source._paid_by_mc,0) as r_&source._paid_by_mc_&name.
from r_dod_2 a
left join
 &source._pay b
 on trim(left(a.r_BID_hrs))=trim(left(b.bid_hrs_21));
 quit;

proc sort data=&source._&name.; by r_BID_hrs r_id; run;

%mend;

%mp(days_start=0,days_bef_death=(183),source=snf,equ=,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=snf,equ=,name=12m );
%mp(days_start=0,days_bef_death=(548),source=snf,equ=,name=18m );
%mp(days_start=0,days_bef_death=(2*365.25),source=snf,equ=,name=24m );
%mp(days_start=0,days_bef_death=(183),source=ip,equ=~,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=ip,equ=~,name=12m );
%mp(days_start=0,days_bef_death=(548),source=ip,equ=~,name=18m );
%mp(days_start=0,days_bef_death=(2*365.25),source=ip,equ=~,name=24m );


/****************************************************************/
/**other claims, time periods before R's death*******************/
/****************************************************************/
/*macro to calculate totals for the claims that are not in medpar files*/
%macro all_other(days_start=,source=,name=);

/*just keep relevant variables*/
proc sql;
create table &source._meet as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.r_bid_hrs))
and &days_start>=b.r_death_date_e-a.admit_date;
quit;

/*Adjust for inflation*/
data &source._meet2;
set &source._meet;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt);
run;

/*Calculate total mc payments by ID*/
proc sql;
create table &source._pay as select distinct BID_hrs_21,
sum(&source._paid_by_mc) as &source._paid_by_mc
from &source._meet2 group by BID_hrs_21;
quit;

/*merge into a full bid list of those decedents with xwalk id and dod*/
proc sql;
create table &source._&name. as select
a.r_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as r_&source._paid_by_mc_&name. 
from r_dod_2 a
left join
 &source._pay b
 on trim(left(a.r_BID_hrs))=trim(left(b.bid_hrs_21));
 quit;

 proc sort data=&source._&name ;
 by r_BID_hrs r_id;
 run;
 %mend;

 %all_other(days_start=183,source=op,name=6m);
 %all_other(days_start=365,source=op,name=12m);
 %all_other(days_start=548,source=op,name=18m);
 %all_other(days_start=730,source=op,name=24m);

 %all_other(days_start=183,source=pb,name=6m);
 %all_other(days_start=365,source=pb,name=12m);
 %all_other(days_start=548,source=pb,name=18m);
 %all_other(days_start=730,source=pb,name=24m);

 %all_other(days_start=183,source=hh,name=6m);
 %all_other(days_start=365,source=hh,name=12m);
 %all_other(days_start=548,source=hh,name=18m);
 %all_other(days_start=730,source=hh,name=24m);

 %all_other(days_start=183,source=hs,name=6m);
 %all_other(days_start=365,source=hs,name=12m);
 %all_other(days_start=548,source=hs,name=18m);
 %all_other(days_start=730,source=hs,name=24m);

 %all_other(days_start=183,source=dm,name=6m);
 %all_other(days_start=365,source=dm,name=12m);
 %all_other(days_start=548,source=dm,name=18m);
 %all_other(days_start=730,source=dm,name=24m);

%macro merge(source=,su=,name=);
data r_&source._&name.;
merge &source._&su.6m &source._&su.12m &source._&su.18m &source._&su.24m;
by r_BID_hrs r_id;
run;

proc means n mean median min max; var r_&source._paid_by_mc_: ; run;
%mend;

%merge(source=ip,su=,name=bef);
%merge(source=snf,su=,name=bef);
%merge(source=op,su=,name=bef);
%merge(source=pb,su=,name=bef);
%merge(source=hh,su=,name=bef);
%merge(source=hs,su=,name=bef);
%merge(source=dm,su=,name=bef);

/*now merge into single dataset of MC costs and get totals for each time window*/
data r_mc_costs_all;
merge r_ip_bef r_snf_bef r_op_bef r_pb_bef r_hh_bef r_hs_bef r_dm_bef ;
by r_BID_hrs r_id;
run;

%macro total(su=);
data r_mc_costs_all;
set r_mc_costs_all;
r_tot_paid_by_mc_&su=r_ip_paid_by_mc_&su + r_snf_paid_by_mc_&su + r_op_paid_by_mc_&su + 
r_pb_paid_by_mc_&su + r_hh_paid_by_mc_&su + r_hs_paid_by_mc_&su + r_dm_paid_by_mc_&su;
run;
%mend;

%total(su=6m);
%total(su=12m);
%total(su=18m);
%total(su=24m);

/*save permanent dataset*/
data spo_mc_i.r_mc_costs_all;
set r_mc_costs_all;
run;

proc means n mean median min max; run;


/****************************************************************/
/**Merge into full s claims dataset           *******************/
/****************************************************************/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay_out_rpay(drop=r_BID_hrs2 r_id2)
as select * from
spo_mc_i.hrs_elix_cc_pay_out_monthly a
left join 
spo_mc_i.r_mc_costs_all(rename=(r_BID_hrs=r_BID_hrs2) rename=(r_id=r_id2)) b
on a.r_BID_hrs=b.r_BID_hrs2 & a.r_id=b.r_id2;
quit;

data check_r_mc;
set spo_mc_i.hrs_elix_cc_pay_out_rpay;
if r_xwalk_yes=1 & r_part_ab_6m=1 & r_hmo_d_6m=0 ;
run;

proc means; var r_tot_paid_by_mc_24m r_ip_paid_by_mc_24m r_op_paid_by_mc_24m;
run;

/****************************************************************/
/**Export full ds to Stata                    *******************/
/****************************************************************/
proc contents data=spo_mc_i.hrs_elix_cc_pay_out_rpay; run;

/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.hrs_elix_cc_pay_out_rpay
outfile="E:\data\spouse_claims\data\int_data\hrs_elix_cc_pay_out_rpay.dta" replace;
run;


H="Get R Medicare Costs by month"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

libname spo_mc_i 'E:\data\spouse_claims\data\int_data';


/**************************************************************************/
/* ************** R's Claims Before R's Death  ******************************/
/**************************************************************************/
/*macro to get claims before death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_bef_death=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.r_bid_hrs))
and &days_start<=b.r_death_date_e-a.admit_date<=&days_bef_death ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.r_death_date_e,b.r_id 
from medi.&source._2000_2012 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_21))=trim(left(b.r_bid_hrs))
and b.r_death_date_e-a.admit_date>&days_bef_death and b.r_death_date_e-a.disch_date<=&days_bef_death;
quit;

data spo_mc_i.&source._meet_&suf._r(compress=yes);
set &source._meet_1 &source._meet_2;
run;
%mend;

%claims(days_start=0,days_bef_death=730,source=mp,suf=24m)
%claims(days_start=0,days_bef_death=730,source=op,suf=24m)
%claims(days_start=0,days_bef_death=730,source=pb,suf=24m)
%claims(days_start=0,days_bef_death=730,source=hs,suf=24m)
%claims(days_start=0,days_bef_death=730,source=hh,suf=24m)
%claims(days_start=0,days_bef_death=730,source=dm,suf=24m)

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(source=,equ=,name=);
data spo_mc_i.&source._meet_&name._r;
set spo_mc_i.mp_meet_&name._r;
if (trim(left(SSLSSNF)))&equ.="N";
run;
%mend;

%mp(source=ip,equ=~,name=24m);
%mp(source=snf,equ=,name=24m);



%macro mp_death_dt(source=);
*get claims that overlap with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m_r;
if r_death_date_e=admit_date and admit_date~=disch_date;
admit_on_death_date=1;
run;

data &source._meet_both;
set spo_mc_i.&source._meet_24m_r;
if r_death_date_e=disch_date and admit_date=disch_date;
admit_on_death_date=1;
disch_on_death_date=1;
run;




data &source._cost;
set &source._meet_admit &source._meet_both;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
&source._paid_by_mc_death_dt=(1/(disch_date-admit_date+1))*&source._paid_by_mc;
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as r_&source._paid_by_mc_death_dt,
sum(admit_on_death_date) as r_&source._admit_dod, sum(disch_on_death_date) as r_&source._disch_dod
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;
%mp_death_dt(source=ip);
%mp_death_dt(source=snf);


%macro claims_death_dt(source=);
*get claims that start with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m_r;
if r_death_date_e=admit_date; 
run;



data &source._cost;
set &source._meet_admit;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc_death_dt=rate*(pmt_amt);
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc_death_dt) as r_&source._paid_by_mc_death_dt
from &source._cost group by BID_HRS_21,r_id;
quit;

%mend;

%claims_death_dt(source=op);
%claims_death_dt(source=pb);
%claims_death_dt(source=hh);
%claims_death_dt(source=hs);
%claims_death_dt(source=dm);

data mc_costs_doda;
merge ip_pay snf_pay op_pay pb_pay hh_pay hs_pay dm_pay ;
r_bid_hrs=bid_hrs_21;
by BID_hrs_21 r_id;
run;


data mc_costs_dod;
set mc_costs_doda (drop=bid_hrs_21);
r_tot_paid_by_mc_death_dt=r_ip_paid_by_mc_death_dt+r_snf_paid_by_mc_death_dt+r_op_paid_by_mc_death_dt +
r_pb_paid_by_mc_death_dt+r_hs_paid_by_mc_death_dt+r_dm_paid_by_mc_death_dt;
run;

%macro mp_claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m_r;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_stop_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before and end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>admit_date and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_stop_dt-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of deceased r's*/
proc sql;
create table &source._&name._r as select 
a.r_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as r_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.r_BID_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name._r; by r_BID_hrs r_id; run;

%mend;



%macro claims(days_start=,days_bef_death=,source=,name=);

*first get claims lists for the specific claims type, not snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m_r;
win_start_dt=r_death_date_e-&days_bef_death;
win_stop_dt=r_death_date_e-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where start of claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt;
run;


/*adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,r_id;
quit;

/*merge into a full bid list of those r's at death*/
proc sql;
create table &source._&name._r as select 
a.r_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as r_&source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.r_bid_hrs))=trim(left(b.bid_hrs_21)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name._r; by r_bid_hrs r_id; run;

%mend;

%macro days_nesting();

%do i=1 %to 24 ;


%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=snf,  name=m&i.);
%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=ip,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=pb,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=op,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hh,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=hs,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_death=floor(&i.*30.417), source=dm,  name=m&i.);


%end;
%mend;
%claims(days_start=-1,days_bef_death=0, source=snf,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=ip,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=op,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=pb,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=hh,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=hs,  name=death_dt);
%claims(days_start=-1,days_bef_death=0, source=dm,  name=death_dt);


%days_nesting();






%macro merge(l=,source=,time=,p=);
data &source._&time._m1_r;
merge &source._death_dt_r &source._m1_r;
run;

%do i=2 %to 24 ;
%let l = %eval(&i.-1) ;

data &source._&time._m&i._r;
merge &source._&time._m&l._r &source._m&i._r;
by r_bid_hrs;
run;
%end;

data &source._&time._r;
set &source._&time._m24_r;
run;
%mend;

%merge(source=ip,time=bef);
%merge(source=snf,time=bef);
%merge(source=op,time=bef);
%merge(source=pb,time=bef);
%merge(source=hh,time=bef);
%merge(source=hs,time=bef);
%merge(source=dm,time=bef);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all_r;
merge ip_bef_r snf_bef_r op_bef_r pb_bef_r hh_bef_r hs_bef_r dm_bef_r;
by r_BID_hrs r_id;
run;

%macro total();

data mc_costs_all2;
set mc_costs_all_r;
%do i=1 %to 24;
r_tot_paid_by_mc_m&i.=r_ip_paid_by_mc_m&i. + r_snf_paid_by_mc_m&i. + r_op_paid_by_mc_m&i. + 
r_pb_paid_by_mc_m&i. + r_hh_paid_by_mc_m&i. + r_hs_paid_by_mc_m&i. + r_dm_paid_by_mc_m&i.;
%end;
r_tot_paid_by_mc_death_dt=r_ip_paid_by_mc_death_dt + r_snf_paid_by_mc_death_dt + r_op_paid_by_mc_death_dt + 
r_pb_paid_by_mc_death_dt + r_hh_paid_by_mc_death_dt + r_hs_paid_by_mc_death_dt + r_dm_paid_by_mc_death_dt;
run;
%mend;

%total();

data mc_costs_all3;
merge mc_costs_all2 mc_costs_dod;
by  r_bid_hrs r_id;
run;

/*save permanent dataset*/
data spo_mc_i.mc_costs_r_monthly;
set mc_costs_all3;
run;

proc export data=spo_mc_i.mc_costs_monthly outfile='E:\data\spouse_claims\data\int_data\mc_costs_monthly.dta' replace; run;

/*merge costs with rest of the spouse dataset*/

proc sql;
create table spo_mc_i.hrs_elix_cc_pay_out_rpay_monthly(drop=r_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay_out_rpay a 
left join
spo_mc_i.mc_costs_r_monthly(rename=(r_bid_hrs=r_bid_hrs2) rename=(r_id=r_id2)) b
on a.r_bid_hrs=b.r_bid_hrs2 and a.r_id=b.r_id2;
quit;


/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.hrs_elix_cc_pay_out_rpay_monthly
outfile="E:\data\spouse_claims\data\int_data\hrs_elix_cc_pay_out_rpay_monthly.dta" replace;
run;

H="Continuous FFS determinatioin for R pre-death"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;
proc freq; table year; run;

/*assign death year using merged dataset with all r and s info
drop variables not needed for finding insurance status
just keep in those observations where s has a medicare xwalk id*/
proc contents data=spo_fnl.spouse_data; run;
proc freq data=spo_fnl.spouse_data; table s_xwalk_yes; run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age r_claims_dod);
if s_xwalk_yes=1;
r_dod_hrs_claims = r_death_date_e;
r_dod_use_claims=0;
if r_death_date_e=. & r_claims_dod~=. then do;
	r_dod_hrs_claims=r_claims_dod;
	r_dod_use_claims=1;
	end;
r_dod_missing_yes=0;
if r_dod_hrs_claims=. then r_dod_missing_yes=1;
r_death_year=year(r_dod_hrs_claims);
r_death_month=month(r_dod_hrs_claims);
run;

proc freq; table r_death_month r_death_year r_dod_missing_yes r_dod_use_claims; run;

*keep a version with only those with dod and dod 2000-2012 to match claims dates;
data r_sp2;
set r_sp;
if r_dod_missing_yes=0 & 2000<=r_death_year<=2012;
run;


/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

proc freq data=s_dn_death_y;
table r_death_year;
run;

/*who is missing denominator file??*/
proc sql;
create table s_missing_dn as select * from r_sp2 where s_bid_hrs
not in (select BID_hrs_21 from dn_2000_20122); 
quit;

proc sql;
create table s_missing_dn_2 as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a left join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and a.r_death_year=b.year;
quit;

data s_missing_dn_3;
set s_missing_dn_2;
dn_missing=0;
if year=. then dn_missing=1;
run;

proc freq; table dn_missing; run;

data s_missing_dn_4;
set s_missing_dn_3;
if dn_missing=1;
run;

/*193 of the 297 missing denominator file are <65 when R dies*/
proc freq; table r_death_year s_age; run;

/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),1,r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),1,r_death_month);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
format r_dod_hrs_claims date9.;
run;
proc means n;
var r_death_month;
run;

/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2176 have the -1 year dn file*/
proc sql;
create table s_dn_death_y_bef as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.year-b.year<=1 order by s_bid_hrs,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table s_dn_death_y_2bef as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_bef,
b.year as death_year_2bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_bef a inner join
dn_2000_20122 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_21))
and 0<a.death_year_bef-b.year<=1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
s_dn_death_y2 a
left join
s_dn_death_y_bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
s_all_insurance a
left join
s_dn_death_y_2bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_dy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_dy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r)-1;
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r)-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;

proc sql;
create table spo_mc_i.r_sp_insa as select
a.*, b.part_ab_n_mos as s_part_ab_n_mos, b.non_hmo_d_n_mos as s_non_hmo_d_n_mos,
b.cont_ffs_n_mos as s_cont_ffs_n_mos
from 
spo_fnl.spouse_data a left join 
s_all_insurance3 b
on a.r_id=b.r_id;
quit;





H="Variable setup in Stata"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\2-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'

use hrs_elix_cc_pay_out_rpay_monthly.dta
*********************************************************

//temporary patch to get total death_dt spending (claims admit_dt death_dt)
foreach x in s r {
	foreach y in tot ip snf op pb hh hs dm {
		replace `x'_`y'_paid_by_mc_death_dt=0 if `x'_`y'_paid_by_mc_death_dt==.
}
	replace `x'_tot_paid_by_mc_death_dt=`x'_ip_paid_by_mc_death_dt+ ///
	 `x'_snf_paid_by_mc_death_dt+`x'_op_paid_by_mc_death_dt + ///
	 `x'_pb_paid_by_mc_death_dt+`x'_hs_paid_by_mc_death_dt+`x'_dm_paid_by_mc_death_dt
}

replace s_age=floor((r_death_date_e-s_birth_date)/365.25)
tab r_exit_year_x, missing
gen deced=1	
gen decedinscopeb=deced==1 & year(r_death_date_e)>1999
gen decedinscopea=deced==1 & year(r_death_date_e)<2012 & year(r_death_date_e)>2000
gen decedinscope=deced==1 & year(r_death_date_e)<2011 & year(r_death_date_e)>=2002
gen mar_or_part=r_married_or_part_v2_x 
gen r_s_death=s_death_date_e-r_death_date_e if r_married_or_part_v2_x==1
gen survived=mar_or_part==1 & (r_s_death>0 |s_death_date==.)

foreach x in 183 365 548 730 {
	gen dod_`x'=r_s_death<`x'+1 & r_s_death!=. if survived==1
}
	
rename dod_183 r_s_death_6m
rename dod_365 r_s_death_12m
rename dod_548 r_s_death_18m
rename dod_730 r_s_death_24m

gen r_death_year=year(r_death_date_e) 
gen s_death_year=year(s_death_date_e)
gen r_death_month=month(r_death_date_e)
gen s_death_month=month(s_death_date_e)

gen s_part_ab_0m=s_part_ab_at_death
gen s_hmo_d_0m=s_hmo_d_at_death
gen s_65_n6m=(r_death_date_e-s_birth_date-183)/365.25>=65
gen s_65_n12m=(r_death_date_e-s_birth_date-365)/365.25>=65
gen s_65_n18m=(r_death_date_e-s_birth_date-548)/365.25>=65
gen s_65_n24m=(r_death_date_e-s_birth_date-730)/365.25>=65

forvalues i=1/24 {
	foreach p in "" p {
		gen s_n_ed_m`i'`p'=0
		replace s_n_ed_m`i'`p'=s_n_ed_ip_m`i'`p' if s_n_ed_ip_m`i'`p'!=.
		replace s_n_ed_m`i'`p'=s_n_ed_m`i'`p' + s_n_ed_op_visits_m`i'`p' if s_n_ed_op_visits_m`i'`p'!=.
}
}
gen s_n_ed_dod=0

foreach n in 6 12 18 24 {
replace s_part_ab_`n'=0 if s_part_ab_`=`n'-6'==0 | s_65_n`n'==0
}

foreach n in 12 18 24 {
replace s_part_ab_p`n'=0 if s_part_ab_p`=`n'-6'==0
}


foreach x in s_part_ab_p s_hmo_d_p {
	foreach i in 6 12 18 24 {
		replace s_part_ab_p`i'=0 if r_s_death_`i'==1
}
	replace `x'6=. if r_death_year==2012 & r_death_month>6
	replace `x'18=. if r_death_year==2012 | (r_death_year==2011 & r_death_month>6)
	replace `x'12=. if r_death_year==2012
	replace `x'24=. if r_death_year>2010
}

foreach x in s_part_ab_ s_hmo_d_ {
	replace `x'6=. if r_death_year==2000 & r_death_month<7
	replace `x'18=. if r_death_year==2000 | (r_death_year==2001 & r_death_month<7)
	replace `x'12=. if r_death_year==2000
	replace `x'24=. if r_death_year<2002
}

foreach x in 6 12 18 24 {
	gen s_ins_ind_`x'm=s_part_ab_`x'm==1 & s_hmo_d_`x'm==0
	gen s_ins_ind_p`x'm=s_part_ab_p`x'm==1 & s_hmo_d_p`x'm==0
}	

gen s_ins_ind_0m=s_part_ab_0m==1 & s_hmo_d_0m==0

gen sp_xwalk=survived==1 & s_xwalk_yes==1 & s_id!=.
gen insc_ins_0m=s_ins_ind_0m==1 & sp_xwalk==1
gen insc_ins_6m=s_ins_ind_6m==1 & sp_xwalk==1
gen insc_ins_12m=s_ins_ind_12m==1 & sp_xwalk==1
gen insc_ins_18m=s_ins_ind_18m==1 & sp_xwalk==1
gen insc_ins_24m=s_ins_ind_24m==1 & sp_xwalk==1
gen insc_ins_p6m=s_ins_ind_p6m==1 & sp_xwalk==1
gen insc_ins_p12m=s_ins_ind_p12m==1 & sp_xwalk==1
gen insc_ins_p18m=s_ins_ind_p18m==1 & sp_xwalk==1
gen insc_ins_p24m=s_ins_ind_p24m==1 & sp_xwalk==1
gen s_65=sp_xwalk==1 & s_age>64 
gen surv_6m=r_s_death>=183 & survived==1 & sp_xwalk==1 & s_65==1
gen surv_12m=r_s_death>=365 & surv_6m==1 
gen surv_18m=r_s_death>=548 & surv_6m==1
gen surv_24m=r_s_death>=730 & surv_6m==1
gen inscope_n24m=insc_ins_24m & s_65
gen inscope_n18m=insc_ins_18m & s_65
gen inscope_n12m=insc_ins_12m & s_65
gen inscope_n6m=insc_ins_6m & s_65
gen inscope_0m=insc_ins_0m & s_65
gen inscope_p6m=insc_ins_p6m & s_65 & survived==1 & s_65
gen inscope_p12m=insc_ins_p12m & s_65 & survived==1 & s_65
gen inscope_p18m=insc_ins_p18m & s_65 & survived==1 & s_65
gen inscope_p24m=insc_ins_p24m & s_65 & survived & s_65
gen inscope_wide=insc_ins_0m & s_65 & survived==1
gen inscope_mid=insc_ins_12m==1 & insc_ins_p12m==1 & s_65
gen inscope_narrow=insc_ins_24m==1 & insc_ins_p24m==1  & s_65
replace surv_6m=. if r_death_year==2012 & r_death_month>6
replace surv_12m=. if r_death_year==2012
replace surv_18m=. if r_death_year==2012 | (r_death_year==2011 & r_death_month>6)
replace surv_24m=. if r_death_year>2010
gen insc_time_n6m=(r_death_year>2000) | (r_death_year==2000 & r_death_month>6)
gen insc_time_n12m=r_death_year>2000
gen insc_time_n18m=r_death_year>2001 | (r_death_year==2001 & r_death_month>6)
gen insc_time_n24m=r_death_year>2001
gen insc_time_p6m=r_death_year<2012 | (r_death_year==2012 & r_death_month<7)
gen insc_time_p12m=r_death_year<2012
gen insc_time_p18m=r_death_year<2011 | (r_death_year==2011 & r_death_month<7)
gen insc_time_p24m=r_death_year<2011


foreach n in 6 12 18 24 {
	label var inscope_n`n'm "FFS `n'm before R's death"
	label var inscope_p`n'm "Surviving spouse has FFS `n'm after R's death"
	label var s_65_n`n'm "Surviving spouse 65+ `n'm before R's death"
	foreach x in n p {
		label var insc_time_`x'`n'm "Available information based on timeline"
}
}


label var inscope_0m "Surviving Spouse 65+ with FFS at time of R's death"
label var deced "All decedents from exit interviews 2002-2012"
label var decedinscopea "Decedents with death year 2001-2011"
label var decedinscopeb "Decedents with death year 2000-2012"
label var decedinscope "Decedents with death year 2002-2010"
label var mar_or_part "Married or partnered at time of death"
label var survived "Survived by (partner or) spouse"
label var sp_xwalk "Surviving spouse has Medicare crosswalk id & HRS interview 2000-2012"
label var s_65 "S aged 65+ at R's death"
label var insc_ins_0m "S has ffs medicare the month of R's death"
label var insc_ins_6m "S has ffs medicare 6 months before R's death"
label var insc_ins_12m "S has ffs medicare 12 months before R's death"
label var insc_ins_18m "S has ffs medicare 18 months before R's death"
label var insc_ins_24m "S has ffs medicare 24 months before R's death"
label var insc_ins_p6m "S has ffs medicare 6 months after R's death"
label var insc_ins_p12m "S has ffs medicare 12 months after R's death"
label var insc_ins_p18m "S has ffs medicare 18 months after R's death"
label var insc_ins_p24m "S has ffs medicare 24 months after R's death"
label var inscope_wide "Widest pool (ffs at R death 2000-2012)"
label var inscope_narrow "Smallest pool (ffs 24m before & after, R death 2002-2010)"
label var inscope_mid "Mid-sized pool (ffs 1yr before & after, R death 2001-2011)"

**adjust mc spending for wage index, now its inflation adjusted only
**n=4 missing wage index, set to 1 for adjustment purposes
sum wage_index_2012_2, detail

gen wage_index_missing=1 if wage_index_2012_2==.
replace wage_index_2012_2=1 if wage_index_missing==1
la var wage_index_missing "Wage index missing 1=yes"

//n=3 missing hrr number
sum hrrnum, detail

//replace as missing if out of scope
gen date_65=s_birth_date+(365.25*65)
gen s_65_n_mos=floor((r_death_date_e-date_65)/30.417)+1 if r_death_date_e-date_65>0
gen r_s_death_mos=floor((s_death_date_e-r_death_date_e)/30.417)+1 if !missing(s_death_date_e)
gen inscope_n_mos=s_cont_ffs_n_mos
replace inscope_n_mos=s_65_n_mos if s_65_n_mos<inscope_n_mos
gen inscope_p_mos=s_cont_ffs_p_mos

foreach x in tot ip snf op pb hh hs dm {
	forvalues i=1/24 {
		replace s_`x'_paid_by_mc_m`i'=. if inscope_n_mos<`i'
		replace s_`x'_paid_by_mc_m`i'p=. if inscope_p_mos<`i'

}
}

foreach x in s_n_ip_admit_ s_icu_days_ s_n_hospd_ s_n_op_visits_ s_n_ed_ {
	forvalues i=1/24 {
		replace `x'm`i'=. if inscope_n_mos<`i'
		replace `x'm`i'p=. if inscope_p_mos<`i'
		replace `x'm`i'=0 if inscope_n_mos>=`i'&`x'm`i'==.
		replace `x'm`i'p=0 if inscope_p_mos>=`i'&`x'm`i'p==.

}
}

//spouse medicare spending variables
local mcsp s_tot_paid_by_mc_ s_ip_paid_by_mc_ s_snf_paid_by_mc_ s_op_paid_by_mc_ ///
s_pb_paid_by_mc_ s_hh_paid_by_mc_ s_hs_paid_by_mc_ s_dm_paid_by_mc_

foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
foreach v in `mcsp'{
	gen `v'wi_`t'=`v'`t'/wage_index_2012_2
	sum `v'wi_`t', detail
	sum `v'`t', detail
}
}

//monthly
forvalues i=1/24 {
	foreach v in `mcsp' {
		gen `v'wi_m`i'=`v'm`i'/wage_index_2012_2
		gen `v'wi_m`i'p=`v'm`i'p/wage_index_2012_2
}
}
//at death
foreach v in `mcsp' {	
		replace `v'death_dt=0 if `v'death_dt==.
		gen `v'wi_death_dt=`v'death_dt/wage_index_2012_2
}

//decedent medicare spending variables
local rmcsp r_tot_paid_by_mc_ r_ip_paid_by_mc_ r_snf_paid_by_mc_ r_op_paid_by_mc_ ///
r_pb_paid_by_mc_ r_hh_paid_by_mc_ r_hs_paid_by_mc_ r_dm_paid_by_mc_

foreach t in 6m 12m 18m 24m {
foreach v in `rmcsp'{
	gen `v'wi_`t'=`v'`t'/wage_index_2012_2
	sum `v'wi_`t', detail
	sum `v'`t', detail
	}
}

//monthly
forvalues i=1/24 {
	foreach v in `rmcsp' {
		gen `v'wi_m`i'=`v'm`i'/wage_index_2012_2
}
}
//at death
foreach v in `rmcsp' {	
		replace `v'death_dt=0 if `v'death_dt==.
		gen `v'wi_death_dt=`v'death_dt/wage_index_2012_2
}

local sutil s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ s_icu_days_ s_n_ed_
local rutil r_n_ip_admit_ r_n_hospd_ r_n_op_visits_

foreach x in `sutil' {
	foreach p in "" "p" {
		forvalues i= 1(3)24 {
			gen `x'm_`i'_to_`=`i'+2'`p'=0 
			foreach j in 0 1 2  {
				replace `x'm_`i'_to_`=`i'+2'`p'=`x'm_`i'_to_`=`i'+2'`p'+ ///
				 `x'm`=`i'+`j''`p' if `x'm`=`i'+`j''`p'!=.
}
}
}
replace `x'm_1_to_3=`x'm_1_to_3 + `x'dod if `x'dod!=.
}

//note--this is a patch; needs to be changed in the sas program-get mc claims lists
replace s_n_ip_admit_m_1_to_3=s_n_ip_admit_m_1_to_3 +s_ip_admit_dod if s_ip_admit_dod!=.
replace s_icu_days_m_1_to_3=s_icu_days_m_1_to_3 +s_icu_days_dod if s_icu_days_dod!=.
	
foreach x in tot ip snf op pb hh hs dm {
	forvalues i= 1(3)24 {
		foreach s in r s {
			gen `s'_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'=`s'_`x'_paid_by_mc_wi_m`i' 
			foreach j in 1 2  {
				replace `s'_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'= ///
				 `s'_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'+`s'_`x'_paid_by_mc_wi_m`=`i'+`j'' ///
				 if `s'_`x'_paid_by_mc_wi_m`=`i'+`j''!=.
}
}
		gen s_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p=s_`x'_paid_by_mc_wi_m`i'p 
		foreach j in 1 2 {
			replace s_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p= ///
			 s_`x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p +s_`x'_paid_by_mc_wi_m`=`i'+`j''p ///
			 if s_`x'_paid_by_mc_wi_m`=`i'+`j''p!=.
}
}
	foreach s in r s {	
		replace `s'_`x'_paid_by_mc_wi_m_1_to_3=`s'_`x'_paid_by_mc_wi_m_1_to_3+ ///
		 `s'_`x'_paid_by_mc_wi_death_dt if `s'_`x'_paid_by_mc_wi_death_dt!=.
}
}

forvalues i=1/24 {
	foreach p in "" "p" {
		gen s_ip_admit_ind_m`i'`p'=s_n_ip_admit_m`i'`p'>=1 if s_n_ip_admit_m`i'`p'!=.
}
}
replace s_ip_admit_ind_m1=1 if s_ip_admit_dod==1

forvalues i=1(3)24 {
	foreach p in "" "p" {
		gen s_ip_admit_ind_m_`i'_to_`=`i'+2'`p'=s_n_ip_admit_m_`i'_to_`=`i'+2'`p'>=1 ///
		 if s_n_ip_admit_m_`i'_to_`=`i'+2'`p'!=.
}
}


//label spending variables
foreach d in s r {
foreach t in 6m 12m 18m 24m {
la var `d'_tot_paid_by_mc_`t' "`d' total MC spending `t' before R's death"
la var `d'_tot_paid_by_mc_wi_`t' "`d' WI Adj total MC spending `t' before R's death"
la var `d'_ip_paid_by_mc_`t' "`d' IP MC spending `t' before R's death"
la var `d'_ip_paid_by_mc_wi_`t' "`d' WI Adj IP MC spending `t' before R's death"
la var `d'_snf_paid_by_mc_`t' "`d' SNF MC spending `t' before R's death" 
la var `d'_snf_paid_by_mc_wi_`t' "`d' WI Adj SNF MC spending `t' before R's death" 
la var `d'_op_paid_by_mc_`t' "`d' OP MC spending `t' before R's death" 
la var `d'_op_paid_by_mc_wi_`t' "`d' WI Adj OP MC spending `t' before R's death" 
la var `d'_pb_paid_by_mc_`t' "`d' Carr. MC spending `t' before R's death" 
la var `d'_pb_paid_by_mc_wi_`t' "`d' WI Adj Carr. MC spending `t' before R's death" 
la var `d'_hh_paid_by_mc_`t' "`d' HH MC spending `t' before R's death" 
la var `d'_hh_paid_by_mc_wi_`t' "`d' WI Adj HH MC spending `t' before R's death" 
la var `d'_hs_paid_by_mc_`t' "`d' HS MC spending `t' before R's death"  
la var `d'_hs_paid_by_mc_wi_`t' "`d' WI Adj HS MC spending `t' before R's death" 
la var `d'_dm_paid_by_mc_`t' "`d' DME MC spending `t' before R's death" 
la var `d'_dm_paid_by_mc_wi_`t' "`d' WI Adj DME MC spending `t' before R's death" 
}
}

foreach t in p6m p12m p18m p24m {
la var s_tot_paid_by_mc_`t' "S total MC spending `t' after R's death"
la var s_tot_paid_by_mc_wi_`t' "S WI Adj total MC spending `t' after R's death"
la var s_ip_paid_by_mc_`t' "S IP MC spending `t' after R's death"
la var s_ip_paid_by_mc_wi_`t' "S WI Adj IP MC spending `t' after R's death"
la var s_snf_paid_by_mc_`t' "S SNF MC spending `t' after R's death" 
la var s_snf_paid_by_mc_wi_`t' "S WI Adj SNF MC spending `t' after R's death" 
la var s_op_paid_by_mc_`t' "S OP MC spending `t' after R's death" 
la var s_op_paid_by_mc_wi_`t' "S WI Adj OP MC spending `t' after R's death" 
la var s_pb_paid_by_mc_`t' "S Carr. MC spending `t' after R's death" 
la var s_pb_paid_by_mc_wi_`t' "S WI Adj Carr. MC spending `t' after R's death" 
la var s_hh_paid_by_mc_`t' "S HH MC spending `t' after R's death" 
la var s_hh_paid_by_mc_wi_`t' "S WI Adj HH MC spending `t' after R's death" 
la var s_hs_paid_by_mc_`t' "S HS MC spending `t' after R's death"  
la var s_hs_paid_by_mc_wi_`t' "S WI Adj HS MC spending `t' after R's death" 
la var s_dm_paid_by_mc_`t' "S DME MC spending `t' after R's death" 
la var s_dm_paid_by_mc_wi_`t' "S WI Adj DME MC spending `t' after R's death" 
}

**************************************************************************
//get dyad medicare spending variables for periods pre- R's death
local mcsp tot_paid_by_mc_wi ip_paid_by_mc_wi snf_paid_by_mc_wi op_paid_by_mc_wi ///
pb_paid_by_mc_wi hh_paid_by_mc_wi hs_paid_by_mc_wi dm_paid_by_mc_wi

foreach t in 6m 12m 18m 24m{
	foreach mc in `mcsp'{
	gen r_s_`mc'_`t' = r_`mc'_`t' + s_`mc'_`t'
}
}

foreach t in 6m 12m 18m 24m{
la var r_s_tot_paid_by_mc_wi_`t' "R&S WI Adj total MC spend `t' before R's death"
la var r_s_ip_paid_by_mc_wi_`t' "R&S WI Adj IP MC spend `t' before R's death" 
la var r_s_snf_paid_by_mc_wi_`t' "R&S WI Adj SNF MC spend `t' before R's death" 
la var r_s_op_paid_by_mc_wi_`t' "R&S WI Adj OP MC spend `t' before R's death" 
la var r_s_pb_paid_by_mc_wi_`t' "R&S WI Adj Carr. MC spend `t' before R's death" 
la var r_s_hh_paid_by_mc_wi_`t' "R&S WI Adj HH MC spend `t' before R's death" 
la var r_s_hs_paid_by_mc_wi_`t' "R&S WI Adj HS MC spend `t' before R's death" 
la var r_s_dm_paid_by_mc_wi_`t' "R&S WI Adj DME MC spend `t' before R's death"
}

**************************************************************************
//set sample variables
gen sample_n6m = 1 if s_part_ab_6m==1 & s_hmo_d_6m==0
gen sample_n12m = 1 if s_part_ab_12m==1 & s_hmo_d_12m==0
gen sample_n18m = 1 if s_part_ab_18m==1 & s_hmo_d_18m==0
gen sample_n24m = 1 if s_part_ab_24m==1 & s_hmo_d_24m==0

la var sample_n6m "S FFS MC 6m pre R's death 1=yes"
la var sample_n12m "S FFS MC 12m pre R's death 1=yes"
la var sample_n18m "S FFS MC 18m pre R's death 1=yes"
la var sample_n24m "S FFS MC 24m pre R's death 1=yes"

//count of chronic conditions in each time period
foreach t in n6m n12m n24m p6m p12m p24m{
gen s_cc_count_`t'=s_cc_1_ami_`t'+s_cc_2_alzh_`t'+s_cc_3_alzhdmta_`t'+ ///
s_cc_4_atrialfb_`t'+s_cc_5_cataract_`t'+s_cc_6_chrnkidn_`t'+ ///
s_cc_7_copd_`t'+s_cc_8_chf_`t'+s_cc_9_diabetes_`t'+ ///
s_cc_10_glaucoma_`t'+s_cc_11_hipfrac_`t'+s_cc_12_ischmcht_`t'+ ///
s_cc_13_depressn_`t'+s_cc_14_osteoprs_`t'+s_cc_15_ra_oa_`t'+ ///
s_cc_16_strketia_`t'+s_cc_17_cncrbrst_`t'+s_cc_18_cncrclrc_`t'+ ///
s_cc_19_cncrprst_`t'+s_cc_20_cncrlung_`t'+s_cc_21_cncrendm_`t'
sum s_cc_count_`t', detail
la var s_cc_count_`t' "Count chronic conditions, mean, sd"
}


*******************************************

//indicator for R's hospice use 12 months preceeding death
gen byte r_hs_12m = .
replace r_hs_12m = 1 if hs_los_12m != 0 & hs_los_12m != .
replace r_hs_12m = 0 if hs_los_12m == 0 
la var r_hs_12m "Indicator hospice use last 12 months of life"
la def hs 0 "No hospice use" 1 "Hospice use", replace
tab r_hs_12m, missing

//create new hospice variables
//note if hs use 1-2 days, then missing by this definition
gen r_hs_12m_gt3d = .
replace r_hs_12m_gt3d = 1 if hs_los_12m >= 3 & hs_los_12m != .
replace r_hs_12m_gt3d = 0 if hs_los_12m == 0 
la var r_hs_12m_gt3d "Indicator hospice use last 12 months of life"
la def r_hs_12m_gt3d  0 "No hospice use" 1 "3+ days hospice use", replace
la val r_hs_12m_gt3d r_hs_12m_gt3d
tab r_hs_12m_gt3d r_hs_12m, missing
tab hs_los_12m r_hs_12m_gt3d , missing

*********************************************************

//create indicator variables for S any hospitalization, hosp due to mental illness,
//ICU use, and ED use
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
	gen s_icu_ind_`t'=1 if s_icu_days_`t'>0 & s_icu_days_`t'!=.
	replace s_icu_ind_`t'=0 if s_icu_days_`t'==0
	la var s_icu_ind_`t' "S Any ICU use `t'"
	la var s_icu_days_`t' "S ICU days `t'"
	
	gen s_admit_ind_`t'=1 if s_n_ip_admit_`t'>0 & s_n_ip_admit_`t'!=.
	replace s_admit_ind_`t'=0 if s_n_ip_admit_`t'==0
	la var s_admit_ind_`t' "S Any Hospitalization `t'"
	la var s_n_ip_admit_`t' "S Number hospitalizations `t'"
	
	la var s_n_hospd_`t' "S Hospital days `t'"
	
	gen s_ed_ind_`t'=1 if s_n_ed_`t'>0 & s_n_ed_`t'!=.
	replace s_ed_ind_`t'=0 if s_n_ed_`t'==0
	la var s_ed_ind_`t' "S Any ED use `t'"
	la var  s_n_ed_`t' "S Number ED visits `t'"
	
	la var s_n_op_visits_`t' "S Number Outpatient visits `t'"

	gen s_admit_mental_ill_ind_`t'=1 if s_n_mental_ill_adm_dx_ip_`t'>0 & s_n_mental_ill_adm_dx_ip_`t'!=.
	replace s_admit_mental_ill_ind_`t'=0 if s_n_mental_ill_adm_dx_ip_`t'==0
	la var s_admit_mental_ill_ind_`t' "S Any mental illness hospital admit (adm dx) `t'"
	
	gen s_ip_any_dx_mental_ill_ind_`t'=1 if s_n_mental_ill_any_dx_ip_`t'>0 & s_n_mental_ill_any_dx_ip_`t'!=.
	replace s_ip_any_dx_mental_ill_ind_`t'=0 if s_n_mental_ill_any_dx_ip_`t'==0
	la var s_ip_any_dx_mental_ill_ind_`t' "S Any mental illness dx from IP claim (any dx) `t'"	
}

**************************************************************************
//create variables for s spending, utilization in 6-12m, 12m-18m, 18m-24m windows
//for plotting spending over time

foreach v in s_tot_paid_by_mc_wi_ s_ip_paid_by_mc_wi_ s_op_paid_by_mc_wi_ s_n_ip_admit_ s_n_hospd_ s_n_op_visits_{
	gen `v'6m12m = `v'12m-`v'6m
	gen `v'12m18m = `v'18m-`v'12m
	gen `v'18m24m = `v'24m-`v'18m

	gen `v'p6mp12m = `v'p12m-`v'p6m
	gen `v'p12mp18m = `v'p18m-`v'p12m
	gen `v'p18mp24m = `v'p24m-`v'p18m
	}

foreach t in 6m12m 12m18m 18m24m{
la var s_tot_paid_by_mc_wi_`t' "S Total MC payments `t' before R's death" 
la var s_ip_paid_by_mc_wi_`t' "S IP MC payments `t' before R's death" 
la var s_op_paid_by_mc_wi_`t' "S OP MC payments `t' before R's death" 
la var s_n_ip_admit_`t' "S Hospital admissions `t' before R's death" 
la var s_n_hospd_`t' "S Hospital nights `t' before R's death" 
la var s_n_op_visits_`t' "S OP visits `t' before R's death" 
}

foreach t in p6mp12m p12mp18m p18mp24m{
la var s_tot_paid_by_mc_wi_`t' "S Total MC payments `t' after R's death" 
la var s_ip_paid_by_mc_wi_`t' "S IP MC payments `t' after R's death" 
la var s_op_paid_by_mc_wi_`t' "S OP MC payments `t' after R's death" 
la var s_n_ip_admit_`t' "S Hospital admissions `t' after R's death" 
la var s_n_hospd_`t' "S Hospital nights `t' after R's death" 
la var s_n_op_visits_`t' "S OP visits `t' after R's death" 
}

************************************************************
//label / rename some R claims derived variables to make it clear
//what they are and that they apply to R and not S
la var r_part_ab_6m "R MC Parts A&B 6m pre-death"
la var r_hmo_d_6m "R HMO 6m pre-death"
la var r_claims_dod "R death date from claims"
rename hs_los_24m r_hs_los_24m 
la var r_hs_los_24m "R Hospice LOS 24m pre-death"
rename hs_enrol_dt r_hs_enrol_dt
rename ip_los_24m r_ip_los_24m 
la var r_ip_los_24m "R IP Hospital LOS 24m pre-death"
rename snf_los_24m r_snf_los_24m 
la var r_snf_los_24m "R SNF LOS 24m pre-death"
rename hs_los_12m r_hs_los_12m 
la var r_hs_los_12m "R Hospice LOS 12m pre-death"
rename hs_los_6m r_hs_los_6m 
la var r_hs_los_6m "R Hospice LOS 6m pre-death"

//rename r cc variables with r_ prefix
local cclist cc_1_ami_ cc_2_alzh_ cc_3_alzhdmta_ cc_4_atrialfb_ cc_5_cataract_ ///
cc_6_chrnkidn_ cc_7_copd_ cc_8_chf_ cc_9_diabetes_ cc_10_glaucoma_ cc_11_hipfrac_ ///
cc_12_ischmcht_ cc_13_depressn_ cc_14_osteoprs_ cc_15_ra_oa_ cc_16_strketia_ ///
cc_17_cncrbrst_ cc_18_cncrclrc_ cc_19_cncrprst_ cc_20_cncrlung_ cc_21_cncrendm_ ///
cc_ami_isch_ cc_alzheim_ cc_cncr_chronic_

foreach v in `cclist'{
	foreach su in n12mn0 n12mn6m{
		rename `v'`su' r_`v'`su'
		}
	}

//r intensive procedure variables rename with r prefix
local intpro first_proc_date_6m int_intubation_6m int_trach_6m ///
int_gastro_tude_6m int_hemodia_6m int_enteral_nut_6m int_cpr_6m ///
first_proc_date_excl_hd_6m int_any_6m int_intubation_1m int_trach_1m ///
int_gastro_tude_1m int_hemodia_1m int_enteral_nut_1m int_cpr_1m ///
first_proc_date_excl_hd_1m int_any_1m first_proc_date_1m ///
last_proc_date_1m ///
last_proc_date_excl_hd_1m last_proc_date_6m last_proc_date_excl_hd_6m

foreach v in `intpro'{
	rename `v' r_`v'
}

la var r_xwalk_yes "R has Medicare claims xwalk id"
la var r_birth_date_e "R DOB, from HRS"
la var zip_exit_n "R zip code when died (exit year)"
drop wage_index_2012
la var state_n "R State residence when died (exit year)"
la var wage_index_2012_2 "CMS Wage Index, by zip/state"
la var r_hseduc "R High school+ education"
la var s_hseduc "S High school+ education"
la var s_claims_dob "S date of birth from Medicare claims"
la var s_claims_dod "S date of death from Medicare claims"
la var s_comorb_all_0d_n6m "Count of S Elix comorbidities 6m pre R's death"
la var s_comorb_all_0d_n12m "Count of S Elix comorbidities 12m pre R's death"
la var s_comorb_all_0d_n24m "Count of S Elix comorbidities 24m pre R's death"

la var s_comorb_all_0d_p6m "Count of S Elix comorbidities 6m post R's death"
la var s_comorb_all_0d_p12m "Count of S Elix comorbidities 12m post R's death"
la var s_comorb_all_0d_p24m "Count of S Elix comorbidities 24m post R's death"
************************************************************
//check for and remove duplicates
sort r_id
quietly by r_id : gen dup1 = cond(_N==1,0,_n)
tab dup1 //no duplicates by decedent id

//check s_id for duplicates
sort s_id
quietly by s_id : gen dup2 = cond(_N==1,0,_n)
tab dup2 //2 instances with spouse with more than one partner
list r_id s_id r_exit_year_x if dup2>0

sort s_id r_exit_year_x
quietly by s_id : gen dup3 = cond(_N==1,0,_n)
tab dup3
drop if dup3==2

//check again
sort s_id
quietly by s_id : gen dup4 = cond(_N==1,0,_n)
tab dup4 //all dups removed

gen r_proc_to_death=r_death_date_e-r_last_proc_date_excl_hd_6m
gen r_int_any_30d=r_proc_to_death<31

//add age index
gen s_age_n0=r_death_year-s_birthyr
merge m:1 s_age using s_age_index_2011

forvalues i=1(3)10 {
	foreach x in s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
		gen s_tot_paid_wi_age_m_`i'_to_`=`i'+2'=`x'/s_age_index_n0
		gen s_tot_paid_wi_age_m_`i'_to_`=`i'+2'p=`x'p/s_age_index_p1
}
}
forvalues i=13(3)24 {
	foreach x in s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
		gen s_tot_paid_wi_age_m_`i'_to_`=`i'+2'=`x'/s_age_index_n1
		gen s_tot_paid_wi_age_m_`i'_to_`=`i'+2'p=`x'p/s_age_index_p2
}
}


	
************************************************************
//save this dataset
save spouse_claims_all_decedents.dta, replace

*********************************************************
log close


H="Define sample"
/*Limits the sample to dyads with surviving spouse who has ffs mc >64 at r's death*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\2-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'

use spouse_claims_all_decedents.dta

foreach n in 6 12 18 24 {
gen survivors_`n'm=inscope_0m==1 & surv_`n'm==1
label var survivors_`n'm "`n'm Survivors"
}
/*final sample derivation table*/

local samplevars deced mar_or_part survived sp_xwalk ///
s_65 inscope_0m survivors_6m survivors_12m survivors_18m survivors_24m

local rn :word count `samplevars'

mat sample=J(`rn',1,.)
local r=1

foreach x of local samplevars {
	sum `x' if `x'==1
	mat sample[`r',1]==r(N)
	local r=`r'+1
}

mat rownames sample=`samplevars'


frmttable using "`logpath'\sp_claims_sample_derivation.rtf" , statmat(sample) ///
	title("2012 sample derivation") ///
	ctitle("","n") sdec(0) replace varlabels



keep if inscope_0m==1

save spouse_claims_v1.dta, replace

gen insc_time_0m=1

mat samptab=J(9,9,.)

local r=8
local c=1

foreach n in n24m n18m n12m n6m 0m p6m p12m p18m p24m {
	sum r_female if insc_time_`n'==1
	mat samptab[1,`c']=r(N)
	local c=`c'+1
}
local c=1
foreach n in n24m n18m n12m n6m 0m p6m p12m p18m p24m {
	sum r_female if insc_time_`n'==0
	mat samptab[2,`c']=r(N)
	local c=`c'+1
}

local c=5
foreach n in ived _6m _12m _18m _24m {
	sum r_female if surv`n'==0
	mat samptab[4,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in n24m n18m n12m n6m {
	sum r_female if s_65_`n'==0
	mat samptab[3,`c']=r(N)
	local c=`c'+1
	sum r_female if s_65==0
	mat samptab[3,5]=r(N)
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if s_hmo_d_`n'm==1
	mat samptab[5,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if s_part_ab_`n'm==0
	mat samptab[6,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if insc_ins_`n'm==1
	mat samptab[7,`c']=r(N)
	local c=`c'+1
}


foreach i in 0 1 {
	local c=1	
	preserve
	keep if s_female==`i'

	foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
		sum r_female if insc_ins_`n'm==1
		mat samptab[`r',`c']=r(N)
		local c=`c'+1
}
	local r=`r'+1
	restore
}
mat rownames samptab="N with available data, timeframe" "N censored by timeframe" ///
 "N not 65 at interval"  "N not surviving at interval" "N censored by HMO at interval" ///
 "N w/o A&B MC through interval" "N FFS, All" "N FFS, Male" ///
 "N FFS, Female"

frmttable using "`logpath'\sp_claims_sample_derivation.rtf", statmat(samptab) ///
ctitles("" "n24m" "n18m" "n12m" "n6m" "at death" "p6m" "p12m" "p18m" "p24m") ///
title("Survival and FFS by time and gender") sdec(0) addtable ///
note("Restricted to sample with surviving spouse 65+ with FFS at time of R's death")


keep if surv_24==1

mat surv=J(9,9,.)

local r=8
local c=1

foreach n in n24m n18m n12m n6m 0m p6m p12m p18m p24m {
	sum r_female if insc_time_`n'==1
	mat surv[1,`c']=r(N)
	local c=`c'+1
}
local c=1
foreach n in n24m n18m n12m n6m 0m p6m p12m p18m p24m {
	sum r_female if insc_time_`n'==0
	mat surv[2,`c']=r(N)
	local c=`c'+1
}

local c=5
foreach n in ived _6m _12m _18m _24m {
	sum r_female if surv`n'==0
	mat surv[4,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in n24m n18m n12m n6m {
	sum r_female if s_65_`n'==0
	mat surv[3,`c']=r(N)
	local c=`c'+1
	sum r_female if s_65==0
	mat surv[3,5]=r(N)
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if s_hmo_d_`n'm==1
	mat surv[5,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if s_part_ab_`n'm==0
	mat surv[6,`c']=r(N)
	local c=`c'+1
}

local c=1
foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
	sum r_female if insc_ins_`n'm==1
	mat surv[7,`c']=r(N)
	local c=`c'+1
}


foreach i in 0 1 {
	local c=1	
	preserve
	keep if s_female==`i'

	foreach n in 24 18 12 6 0 p6 p12 p18 p24 {
		sum r_female if insc_ins_`n'm==1
		mat surv[`r',`c']=r(N)
		local c=`c'+1
}
	local r=`r'+1
	restore
}
mat rownames surv="N with available data, timeframe" "N censored by timeframe" ///
 "N not 65 at interval"  "N not surviving at interval" "N censored by HMO at interval" ///
  "N w/o A&B MC through interval" "N FFS, All" "N FFS, Male" ///
 "N FFS, Female"

frmttable using "`logpath'\sp_claims_sample_derivation.rtf", statmat(surv) ///
ctitles("" "n24m" "n18m" "n12m" "n6m" "at death" "p6m" "p12m" "p18m" "p24m") ///
title("Survival and FFS by time and gender") sdec(0) addtable ///
note("Restricted to sample surviving 24m after spouse's death")

use spouse_claims_v1.dta,clear
gen r_s_death_0m=0

mat gend=J(12,5,.)

local r=2
local c=1

foreach i in 0 1 {
	preserve 
	keep if s_female==`i'
	sum survived
	mat gend[`r',`c']=r(N)
	sum r_s_death if r_s_death!=.
	mat gend[`r'+1,`c']=r(N)
	mat gend[`r'+2,`c']=(r(N)/_N)*100
	mat gend[`r'+3,`c']=r(mean)
	mat gend[`r'+4,`c']=r(sd)
	local c=`c'+1
	foreach n in 6 12 18 24 {
		drop if r_s_death_`=`n'-6'm==1
		sum survived
		mat gend[`r',`c']=r(N)
		sum r_s_death_`n'm 
		mat gend[`r'+1,`c']=r(mean)*r(N)
		mat gend[`r'+2,`c']=r(mean)*100
		sum r_s_death if r_s_death_`n'm==1
		mat gend[`r'+3,`c']=r(mean)
		mat gend[`r'+4,`c']=r(sd)
		local c=`c'+1
}
	local r=`r'+6
	local c=1
	restore
}

mat rownames gend= "Male Spouses" "Alive at beginning" "Died in period" "%" ///
 "Mean days to death" "sd" ///
 "Female Spouses""Alive at beginning" "Died in period" "%" ///
 "Mean days to death" "sd" 

frmttable using "`logpath'\sp_claims_sample_derivation.rtf", statmat(gend) ctitles("" "R death 2000-2012" ///
 "First 6m" "6-12m" "12-18m" "18-24m") title("Deaths by time and gender") ///
 sdec(0\0\0\2\2\2\0\0\0\2\2\2) addtable ///
 note("Includes R deaths from 2011 and 2012, for whom we do not have 2 years of follow-up information")

 use spouse_claims_v1.dta,clear
 foreach x in n p {
	gen `x'months=s_cont_ffs_`x'_mos
	replace `x'months=24 if s_cont_ffs_`x'_mos>24
 }
 gen tmonths=nmonths+pmonths
 mat months=J(3,6,.)
 
 local r=1 
 local c=1
 
 foreach x in n p t {
	foreach i in 0 1 {
		sum `x'months if s_female==`i',d
		mat months[`r',`c']=r(p50)
		mat months[`r',`c'+1]=r(mean)
		mat months[`r',`c'+2]=r(sd)
		local c=`c'+3
}
	local r=`r'+1 
	local c=1
}

mat rownames months= "Before R death" "After R death" "Total"
frmttable using "`logpath'\sp_claims_sample_derivation.rtf", statmat(months) ///
 ctitles("" "Male Median" "Mean" "SD" "Female Median" "Mean" "SD") addtable ///
 sdec(0,2,2,0,2,2) title("Months of continuous FFS (Person Months) by gender") ///
 


H="Sample Characteristics"


capture log close

clear all
set more off

//Amy's PC
local logpath E:\data\spouse_claims\logs
local datapath E:\data\spouse_claims\data\int_data

log using "`logpath'\Spouse_intensive_table1.txt", text replace

cd `datapath'

//use sample with no missingness - saved when first round of psmatching done
use spouse_claims_v1.dta
***************************************************************


*************************************************************************************
*************************************************************************************
//create Table 1, overall sample characteristics
*************************************************************************************
*************************************************************************************
//Part 1 - Decedent char

local rcvars r_age r_networth_adj2012_n1

local rivars r_female r_white_e r_hseduc  ///
 r_medicaid_n1 r_champus_n1 r_medigap_n1 ///
 r_adl_independent_core_n1 r_srh_pf_n1 ///
 r_nhres_n1 r_cc_3_alzhdmta_n12mn0 ///
r_cc_6_chrnkidn_n12mn0 r_cc_ami_isch_n12mn0 r_cc_8_chf_n12mn0 ///
r_cc_9_diabetes_n12mn0 r_cc_7_copd_n12mn0 r_cc_16_strketia_n12mn0 ///
r_cc_cncr_chronic_n12mn0 r_cc_4_atrialfb_n12mn0 r_cc_11_hipfrac_n12mn0 ///
r_cc_13_depressn_n12mn0 r_cc_14_osteoprs_n12mn0 r_cc_15_ra_oa_n12mn0 r_loc_hosp_x ///
r_advdir_x r_dexp_x r_discuss_x  


local scvars s_age s_networth_adj2012_n1

local sivars s_female s_white_e s_hseduc  ///
 s_medicaid_n1 s_champus_n1 s_medigap_n1 ///
 s_adl_independent_core_n1 s_srh_pf_n1 ///
 s_nhres_n1 s_cc_3_alzhdmta_n12m ///
s_cc_6_chrnkidn_n12m s_cc_ami_isch_n12m s_cc_8_chf_n12m ///
s_cc_9_diabetes_n12m s_cc_7_copd_n12m s_cc_16_strketia_n12m ///
s_cc_cncr_chronic_n12m s_cc_4_atrialfb_n12m s_cc_11_hipfrac_n12m ///
s_cc_13_depressn_n12m s_cc_14_osteoprs_n12m s_cc_15_ra_oa_n12m ///


 
la var r_age "Age at death, years"
la var r_loc_ "Died in Hospital"
la var r_married_x "Married at death"
la var r_female "Female"
la var r_white_e "Race, White, Non-Hispanic"
la var r_hseduc "Education, High School Deg"
la var r_medicaid_n1  "Medicaid"
la var r_champus_n1  "VA Insurance"
la var r_medigap_n1 "Medigap"
la var r_adl_independent_core_n1 "ADL Independent"
la var r_srh_pf_n1 "SRH poor or fair**"
la var r_advdir_x "Had advanced directive"
la var r_dexp_x  "Death expected by family"
la var r_discuss_x "Discussion of EOL care"
la var s_age "Age at death, years"
la var s_loc_hosp_x "Died in Hospital"
la var s_married_x "Married at death"
la var s_female "Female"
la var s_white "Race, White, Non-Hispanic"
la var s_hseduc "Education, High School Deg"
la var s_medicaid_n1  "Medicaid"
la var s_champus_n1  "VA Insurance"
la var s_medigap_n1 "Medigap"
la var s_adl_independent_core_n1 "ADL Independent"
la var s_srh_pf_n1 "SRH poor or fair"
la var r_s_death_24m "S death within 2 years"



foreach surv in 0 p24 {
preserve
keep if insc_ins_`surv'm==1

local rn : word count `rivars' `rcvars' 1
mat tab1`surv'=J(`rn',6,.)
local r=1
local c=1
mat tab1`surv'_n=J(1,6,.)

foreach spouse in r s {
	foreach x of local `spouse'cvars {
		sum `x' 
		mat tab1`surv'[`r',`c']=r(mean)
		mat tab1`surv'[`r',`c'+1]=r(sd)
		mat tab1`surv'[`r',`c'+2]=r(N)
		local r=`r'+1
}
	foreach x of local `spouse'ivars {
		sum `x'
		mat tab1`surv'[`r',`c']=r(mean)*100
		mat tab1`surv'[`r',`c'+1]=r(mean)*r(N)
		mat tab1`surv'[`r',`c'+2]=r(N)
		local r=`r'+1
}
local c=`c'+3
local r=1
}	
sum r_s_death_24m
mat tab1`surv'[`rn',4]=r(mean)*100
mat tab1`surv'[`rn',5]=r(mean)*r(N)
mat tab1`surv'[`rn',6]=r(mean)*r(N)

mat rownames tab1`surv'=`rcvars' `rivars' r_s_death_24m
local r=1
local c=1
	local rngend : word count `scvars' `sivars' r_s_death_24m
	mat tab1`surv'gend=J(`rngend',6,.)
forvalues gend = 0/1 {

	foreach x of local scvars {
		sum `x' if s_female==`gend'
		mat tab1`surv'gend[`r',`c']=r(mean)
		mat tab1`surv'gend[`r',`c'+1]=r(sd)
		mat tab1`surv'gend[`r',`c'+2]=r(N)
		local r=`r'+1
}
	foreach x of local sivars {
		sum `x' if s_female==`gend'
		mat tab1`surv'gend[`r',`c']=r(mean)*100
		mat tab1`surv'gend[`r',`c'+1]=r(mean)*r(N)
		mat tab1`surv'gend[`r',`c'+2]=r(N)
		local r=`r'+1
}
	sum r_s_death_24m if s_female==`gend'
	mat tab1`surv'gend[`r',`c']=r(mean)*100
	mat tab1`surv'gend[`r',`c'+1]=r(mean)*r(N)
	mat tab1`surv'gend[`r',`c'+2]=r(N)
	
mat rownames tab1`surv'gend=`scvars' `sivars' r_s_death_24m
local c=`c'+3
local r=1
}
	
restore
}

frmttable using `logpath'/sample_characteristics.rtf, statmat(tab10) title("Sample characteristics") ctitles("" "" "Decedent" "" ///
 "" "Surviving Spouse" "" \ "" "Mean/Percent" "SD/N yes" "N" "Mean/Percent" "SD/N yes" "N") ///
 note("Sample limited to decedents with surviving spouses age 65+ with FFS MC at time of death") ///
 sdec(2,2,0,2,2,0\2,2,0,2,2,0\2,0,0,2,0,0) varlabels replace

 frmttable using `logpath'/sample_characteristics.rtf, statmat(tab10gend) ///
 title("Sample characteristics by gender of surviving spouse") ctitles("" "" "Male" "" ///
 "" "Female" "" \ "" "Mean/Percent" "SD/N yes" "N" "Mean/Percent" "SD/N yes" "N") ///
 note("Sample limited to decedents with surviving spouses age 65+ with FFS MC at time of death") ///
 sdec(2,2,0,2,2,0\2,2,0,2,2,0\2,0,0,2,0,0) varlabels addtable
 
frmttable using `logpath'/sample_characteristics.rtf, statmat(tab1p24) title("Sample characteristics, 24m survivors") ///
ctitles("" "" "Decedent" "" ///
 "" "Surviving Spouse" "" \ "" "Mean/Percent" "SD/N yes" "N" "Mean/Percent" "SD/N yes" "N") ///
 note("Sample limited to decedents with spouses age 65+ with continuous FFS MC 24m past death") ///
 sdec(2,2,0,2,2,0\2,2,0,2,2,0\2,0,0,2,0,0) varlabels addtable
 
 frmttable using `logpath'/sample_characteristics.rtf, statmat(tab1p24gend) ///
 title("Sample characteristics by gender, 24m survivors") ctitles("" "" "Male" "" ///
 "" "Female" "" \ "" "Mean/Percent" "SD/N yes" "N" "Mean/Percent" "SD/N yes" "N") ///
 note("Sample limited to decedents with surviving spouses age 65+ with FFS MC 24m past death") ///
 sdec(2,2,0,2,2,0\2,2,0,2,2,0\2,0,0,2,0,0) varlabels addtable


H="First look at sample characteristics"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, married at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\3-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
*********************************************************
//all obs should be flagged as in the 6m sample, R&S have FFS MC 6m pre R's death
tab sample_n6m

//check r medicare status for the sample
tab r_part_ab_6m r_hmo_d_6m, missing 

//tables of S chronic conditions
//3 samples based on having ffs #m before R's death

//samples for looking at CC's after R's death just require FFS MC for S 6m pre-death
gen sample_p6m = 1
gen sample_p12m = 1
gen sample_p18m = 1
gen sample_p24m = 1

local cclist s_cc_ami_isch_ s_cc_alzheim_ s_cc_4_atrialfb_ s_cc_6_chrnkidn_ ///
s_cc_7_copd_ s_cc_8_chf_ s_cc_9_diabetes_ s_cc_11_hipfrac_ s_cc_13_depressn_ ///
s_cc_14_osteoprs_ s_cc_15_ra_oa_ s_cc_16_strketia_ s_cc_cncr_chronic_

mat cc=J(1,2,.)
mat cc_n=J(1,1,.)
//looking at periods before R's death, sample restriction by S FFS MC
//then periods after R's death, same sample R&S have FFS MC 6m before death
foreach t in n6m n12m n24m p6m p12m p24m{
	foreach v in `cclist'{
		sum `v'`t' if sample_`t'==1
		mat cc[1,1]=r(mean)*r(N) //n
		mat cc[1,2]=r(mean)*100 //pct
		mat rownames cc=`v'`t'
		frmttable, statmat(cc) append(tab_cc_`t') store(tab_cc_`t') ///
			sdec(0,2) varlabels
		}
	sum s_cc_count_`t' if sample_`t'==1, detail
	mat cc[1,1]=r(mean) //mean
	mat cc[1,2]=r(sd) //sd
	mat rownames cc=s_cc_count_`t'
	frmttable, statmat(cc) append(tab_cc_`t') store(tab_cc_`t') ///
			sdec(2,2) varlabels
	
//last row - n for each column
	sum r_exit_year_x if sample_`t'==1
	mat cc_n[1,1]=r(N)
	mat rownames cc_n="N"
	frmttable, statmat(cc_n) append(tab_cc_`t') store(tab_cc_`t') ///
		sdec(0) 
}


outreg, replay(tab_cc_n6m) merge(tab_cc_n12m) store(tab_cc1)
outreg using `logpath'/3_Spouse_sample_char, replace ///
	replay(tab_cc1) merge(tab_cc_n24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "N", "percent", "N", "percent", "N", "percent") ///
	title("S chronic conditions before R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m, 12m, and 24m prior to R's death respectively.")

outreg, replay(tab_cc_p6m) merge(tab_cc_p12m) store(tab_cc2)
outreg using `logpath'/3_Spouse_sample_char, addtable ///
	replay(tab_cc2) merge(tab_cc_p24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "N", "percent", "N", "percent", "N", "percent") ///
	title("S chronic conditions after R's death") ///
	note("Sample limited to those S with FFS Medicare 6m prior" \ ///
	"to R's death for all columns")
*********************************************************
//tables of S Medicare spending
//label medicare payments variables
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_tot_paid_by_mc_wi_`t' "S Total Medicare Payments, all types"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_ip_paid_by_mc_wi_`t' "S Inpatient"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_snf_paid_by_mc_wi_`t' "S Skilled Nursing Facility"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_op_paid_by_mc_wi_`t' "S Outpatient"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_pb_paid_by_mc_wi_`t' "S Carrier"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_hh_paid_by_mc_wi_`t' "S Home health"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_hs_paid_by_mc_wi_`t' "S Hospice"
}
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
la var  s_dm_paid_by_mc_wi_`t' "S Durable medical equipment"
}

foreach t in 6m 12m 18m 24m {
la var  r_tot_paid_by_mc_wi_`t' "R Total Medicare Payments, all types"
la var  r_s_tot_paid_by_mc_wi_`t' "R&S Total Medicare Payments, all types"
la var  r_ip_paid_by_mc_wi_`t' "R Inpatient"
la var  r_s_ip_paid_by_mc_wi_`t' "R&S Inpatient"
la var  r_snf_paid_by_mc_wi_`t' "R Skilled Nursing Facility"
la var  r_s_snf_paid_by_mc_wi_`t' "R&S Skilled Nursing Facility"
la var  r_op_paid_by_mc_wi_`t' "R Outpatient"
la var  r_s_op_paid_by_mc_wi_`t' "R&S Outpatient"
la var  r_pb_paid_by_mc_wi_`t' "R Carrier"
la var  r_s_pb_paid_by_mc_wi_`t' "R&S Carrier"
la var  r_hh_paid_by_mc_wi_`t' "R Home health"
la var  r_s_hh_paid_by_mc_wi_`t' "R&S Home health"
la var  r_hs_paid_by_mc_wi_`t' "R Hospice"
la var  r_s_hs_paid_by_mc_wi_`t' "R&S Hospice"
la var  r_dm_paid_by_mc_wi_`t' "R Durable medical equipment"
la var  r_s_dm_paid_by_mc_wi_`t' "R&S Durable medical equipment"
}


//sample variables with naming that matches the spending variable suffixes
gen sample_6m = sample_n6m
gen sample_12m = sample_n12m
gen sample_18m = sample_n18m
gen sample_24m = sample_n24m

local mcsp s_tot_paid_by_mc_wi s_ip_paid_by_mc_wi s_snf_paid_by_mc_wi s_op_paid_by_mc_wi ///
s_pb_paid_by_mc_wi s_hh_paid_by_mc_wi s_hs_paid_by_mc_wi s_dm_paid_by_mc_wi

mat mc=J(1,2,.)
mat mc_n=J(1,1,.)
//looking at periods before R's death, sample restriction by S FFS MC
//then periods after R's death, same sample R&S have FFS MC 6m before death
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
	foreach v in `mcsp'{
		sum `v'_`t' if sample_`t'==1, detail
		mat mc[1,1]=r(mean) //mean
		mat mc[1,2]=r(p50) //median
		mat rownames mc=`v'_`t'
		frmttable, statmat(mc) append(tab_mc_`t') store(tab_mc_`t') ///
			sdec(0) varlabels
		}
	
//last row - n for each column
	sum r_exit_year_x if sample_`t'==1
	mat mc_n[1,1]=r(N)
	mat rownames mc_n="N"
	frmttable, statmat(mc_n) append(tab_mc_`t') store(tab_mc_`t') ///
		sdec(0) 
}

//add r, r+s spending rows to the pre-death table
local mcsprs r_tot_paid_by_mc_wi r_ip_paid_by_mc_wi r_snf_paid_by_mc_wi r_op_paid_by_mc_wi ///
r_pb_paid_by_mc_wi r_hh_paid_by_mc_wi r_hs_paid_by_mc_wi r_dm_paid_by_mc_wi ///
r_s_tot_paid_by_mc_wi r_s_ip_paid_by_mc_wi r_s_snf_paid_by_mc_wi r_s_op_paid_by_mc_wi ///
r_s_pb_paid_by_mc_wi r_s_hh_paid_by_mc_wi r_s_hs_paid_by_mc_wi r_s_dm_paid_by_mc_wi

mat mc_rs=J(1,2,.)
foreach t in 6m 12m 18m 24m{
	foreach v in `mcsprs'{
		sum `v'_`t' if sample_`t'==1, detail
		mat mc_rs[1,1]=r(mean) //mean
		mat mc_rs[1,2]=r(p50) //median
		mat rownames mc_rs=`v'_`t'
		frmttable, statmat(mc_rs) append(tab_mc_rs_`t') store(tab_mc_rs_`t') ///
			sdec(0) varlabels
		}
	}

outreg, replay(tab_mc_6m) merge(tab_mc_12m) store(tab_mc1)
outreg, replay(tab_mc1) merge(tab_mc_18m) store(tab_mc2)
outreg, replay(tab_mc2) merge(tab_mc_24m) store(tab_mc3) //s spending all combined

outreg, replay(tab_mc_rs_6m) merge(tab_mc_rs_12m) store(tab_mc4)
outreg, replay(tab_mc4) merge(tab_mc_rs_18m) store(tab_mc5)
outreg, replay(tab_mc5) merge(tab_mc_rs_24m) store(tab_mc6) //r&s combined

outreg using `logpath'/3_Spouse_sample_char, addtable ///
	replay(tab_mc3) append(tab_mc6) ///
	ctitles("", "6m", "", "12m", "","18m","", "24m", "" \ ///
		"", "mean", "median", "mean", "median","mean", "median", "mean", "median") ///
	title("S & R Medicare Payments before R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m, 12m, 18m, and 24m prior to R's death respectively." \ ///
	"Spending values are adjusted for inflation to 2012$ and for 2012 CMS wage index")

outreg, replay(tab_mc_p6m) merge(tab_mc_p12m) store(tab_mc2)
outreg, replay(tab_mc2) merge(tab_mc_p18m) store(tab_mc3)
outreg using `logpath'/3_Spouse_sample_char, addtable ///
	replay(tab_mc3) merge(tab_mc_p24m) ///
	ctitles("", "6m", "", "12m", "","18m","", "24m", "" \ ///
		"", "mean", "median", "mean", "median", "mean", "median","mean", "median") ///
	title("S Medicare Payments after R's death") ///
	note("Sample limited to those S with FFS Medicare 6m prior" \ ///
	"to R's death for all columns" \ ///
	"Spending values are adjusted for inflation to 2012$ and for 2012 CMS wage index")

*********************************************************
//S utilization before/ after R's death
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
 la var s_n_ip_admit_`t' "Number hospitalizations, mean, sd"
 la var s_n_mental_ill_adm_dx_ip_`t' "Number hospital. due to mental illness, mean, sd"
 la var s_n_mental_ill_any_dx_ip_`t' "Number hosp w any mental illness dx, mean, sd"
 la var s_n_hospd_`t' "Hospital days, mean, sd"
 la var s_icu_days_`t' "ICU days, mean, sd" 
 la var s_n_op_visits_`t' "Number outpatient visits, mean, sd"
 la var s_n_ed_`t' "Number ED visits, mean, sd"
 la var s_admit_ind_`t' "Any hospitalization, n, %"
 la var s_admit_mental_ill_ind_`t' "Any hosp stay due to mental illness, n, %"
 la var s_ip_any_dx_mental_ill_ind_`t' "Hosp stay with any mental illness dx, n, %"
 la var s_icu_ind_`t' "Any ICU use, n, %"
 la var s_ed_ind_`t' "Any ED use, n, %"
}
local util_c s_n_ip_admit_ s_n_mental_ill_adm_dx_ip_ s_n_mental_ill_any_dx_ip_ ///
 s_n_hospd_ s_icu_days_  s_n_op_visits_ s_n_ed_

local util_i_pre /*s_died_*/ s_admit_ind_ s_admit_mental_ill_ind_  ///
 s_ip_any_dx_mental_ill_ind_ s_icu_ind_ s_ed_ind_

mat out=J(1,2,.)
mat out_n=J(1,1,.)
//Table for before R's death (sample by FFS MC 6, 12 or 24m pre death
foreach t in 6m 12m 18m 24m{
	foreach v in `util_i_pre'{ //indicator variables, report n, %
		sum `v'`t' if sample_`t'==1
		mat out[1,1]=r(mean)*r(N) //n
		mat out[1,2]=r(mean)*100 //pct
		mat rownames out=`v'`t'
		frmttable, statmat(out) append(tab_out_`t') store(tab_out_`t') ///
			sdec(0,2) varlabels
		}
	
	foreach v in `util_c'{ //cont variables, report mean,sd
		sum `v'`t' if sample_`t'==1, detail
		mat out[1,1]=r(mean) //mean
		mat out[1,2]=r(sd) //sd
		mat rownames out=`v'`t'
		frmttable, statmat(out) append(tab_out_`t') store(tab_out_`t') ///
			sdec(2,2) varlabels
		}
//last row - n for each column
	sum r_exit_year_x if sample_`t'==1
	mat out_n[1,1]=r(N)
	mat rownames out_n="N"
	frmttable, statmat(out_n) append(tab_out_`t') store(tab_out_`t') ///
		sdec(0) 
}

outreg, replay(tab_out_6m) merge(tab_out_12m) store(tab_out1)
outreg, replay(tab_out1) merge(tab_out_18m) store(tab_out2)
outreg using `logpath'/3_Spouse_sample_char, addtable ///
	replay(tab_out2) merge(tab_out_24m) ///
	ctitles("", "6m", "", "12m", "","18m","", "24m", "" \ ///
		"", "N", "percent", "N", "percent","N", "percent", "N", "percent" \ ///
		"", "mean", "sd", "mean", "sd", "mean", "sd", "mean", "sd") ///
	title("S Medicare utilization before R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m, 12m, 18m, and 24m prior to R's death respectively.")

local util_i s_died_ s_admit_ind_ s_admit_mental_ill_ind_ ///
 s_ip_any_dx_mental_ill_ind_ s_icu_ind_ s_ed_ind_

mat out=J(1,2,.)
mat out_n=J(1,1,.)
//all periods after R's death, same sample R&S have FFS MC 6m before death
foreach t in p6m p12m p18m p24m{
	label var s_died_`t' "S died, n, %"
	foreach v in `util_i'{ //indicator variables, report n, %
		sum `v'`t'
		mat out[1,1]=r(mean)*r(N) //n
		mat out[1,2]=r(mean)*100 //pct
		mat rownames out=`v'`t'
		frmttable, statmat(out) append(tab_out_`t') store(tab_out_`t') ///
			sdec(0,2) varlabels
		}
	
	foreach v in `util_c'{ //cont variables, report mean,sd
		sum `v'`t', detail
		mat out[1,1]=r(mean) //mean
		mat out[1,2]=r(sd) //sd
		mat rownames out=`v'`t'
		frmttable, statmat(out) append(tab_out_`t') store(tab_out_`t') ///
			sdec(2,2) varlabels
		}
//last row - n for each column
	sum r_exit_year_x
	mat out_n[1,1]=r(N)
	mat rownames out_n="N"
	frmttable, statmat(out_n) append(tab_out_`t') store(tab_out_`t') ///
		sdec(0) 
}

outreg, replay(tab_out_p6m) merge(tab_out_p12m) store(tab_out1)
outreg, replay(tab_out1) merge(tab_out_p18m) store(tab_out2)
outreg using `logpath'\3_Spouse_sample_char, addtable ///
	replay(tab_out2) merge(tab_out_p24m) ///
	ctitles("", "6m", "", "12m", "","18m","", "24m", "" \ ///
		"", "N", "percent", "N", "percent", "N", "percent", "N", "percent" \ ///
		"", "mean", "sd", "mean", "sd", "mean", "sd", "mean", "sd") ///
	title("S Medicare utilization after R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m prior to R's death.")



*********************************************************
log close


H="xx(old-Rebecca's) Plot s spending/utilization over time"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\3a-HRS_Spouse_claims_plot_util_over_time.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta
*******************************************************************
cd `logpath'\graphs\
//look at S total mc spending over time, before and after r's death
//preserve

**User note - can change these to change sample criteria for plots
//only plot for those dyads where the spouse is alive the full 24m post r's death
keep if s_died_p24m==0
//only plot for those dyads where S has FFS MC 24m pre R's death
keep if sample_n24m==1

keep r_id s_id s_tot_paid_by_mc_wi_* s_ip_paid_by_mc_wi_* s_op_paid_by_mc_wi_* ///
 s_n_ip_admit_* s_n_hospd_* s_n_op_visits_*

//rename variables to have numerical suffixes for time periods
capture program drop renamenum
program define renamenum
	args old new
	
	rename s_tot_paid_by_mc_wi_`old' s_tot_paid_by_mc_wi_`new'
	rename s_ip_paid_by_mc_wi_`old' s_ip_paid_by_mc_wi_`new'
	rename s_op_paid_by_mc_wi_`old' s_op_paid_by_mc_wi_`new' 
	rename s_n_ip_admit_`old' s_n_ip_admit_`new'
	rename s_n_hospd_`old' s_n_hospd_`new'
	rename s_n_op_visits_`old' s_n_op_visits_`new'
	end
	
renamenum 18m24m 1	
renamenum 12m18m 2
renamenum 6m12m 3
renamenum 6m 4
renamenum p6m 5	
renamenum p6mp12m 6
renamenum p12mp18m 7	
renamenum p18mp24m 8	

local varlist s_tot_paid_by_mc_wi_ s_ip_paid_by_mc_wi_ ///
	s_op_paid_by_mc_wi_ s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ 
	
reshape long `varlist' , ///
	i(s_id) j(t)

collapse (mean) `varlist' ///
	(median) medtot_mc_pmt=s_tot_paid_by_mc_wi_ ///
	med_ip_mc_pmt=s_ip_paid_by_mc_wi_ ///
	med_op_mc_pmt=s_op_paid_by_mc_wi_ ///
	med_ip_admit=s_n_ip_admit_ ///
	med_ip_nights=s_n_hospd_ ///
	med_op_visits=s_n_op_visits_ ///
	, by(t)

la def t 1 "18-24" 2 "12-18" 3"6-12" 4"0-6" 5"0-6" 6"6-12" 7"12-18" 8"18-24"
la val t t

*******************************************************************
//Total Medicare payments, all claim types
la var s_tot_paid_by_mc_wi_ "S Medicare payments (mean)"
la var medtot_mc_pmt "S Medicare payments (median)"
la var t "Months before/after spouse's death"
graph twoway connected s_tot_paid_by_mc_wi_ t ///
	|| lfit s_tot_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Medicare payments (all types)")
graph save tot_mc_mean.gph, replace
graph export tot_mc_mean.pdf, replace
	
graph twoway connected medtot_mc_pmt t ///
	|| lfit medtot_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Medicare payments (all types)")
graph save tot_mc_med.gph, replace
graph export tot_mc_med.pdf, replace

graph combine tot_mc_mean.gph tot_mc_med.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save tot_mc.gph, replace
graph export tot_mc.pdf, replace

*******************************************************************
//Inpatient claims Medicare payments
la var s_ip_paid_by_mc_wi_ "S Inpatient Medicare (mean)"
la var med_ip_mc_pmt "S Inpatient Medicare (median)"
graph twoway connected s_ip_paid_by_mc_wi_ t ///
	|| lfit s_ip_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Inpatient Medicare payments ")
graph save ip_mc_mean.gph, replace
graph export ip_mc_mean.pdf, replace
	
graph twoway connected med_ip_mc_pmt t ///
	|| lfit med_ip_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Inpatient Medicare payments ")
graph save ip_mc_med.gph, replace
graph export ip_mc_med.pdf, replace

graph combine ip_mc_mean.gph ip_mc_med.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save ip_mc.gph, replace
graph export ip_mc.pdf, replace

*******************************************************************
//Outpatient claims Medicare payments
la var s_op_paid_by_mc_wi_ "S Outpatient Medicare (mean)"
la var med_op_mc_pmt "S Outpatient Medicare (median)"
graph twoway connected s_op_paid_by_mc_wi_ t ///
	|| lfit s_op_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Outpatient Medicare payments ")
graph save op_mc_mean.gph, replace
graph export op_mc_mean.pdf, replace
	
graph twoway connected med_op_mc_pmt t ///
	|| lfit med_op_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Outpatient Medicare payments ")
graph save op_mc_med.gph, replace
graph export op_mc_med.pdf, replace

graph combine op_mc_mean.gph op_mc_med.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save op_mc.gph, replace
graph export op_mc.pdf, replace

*******************************************************************
//Hospitalizations
la var s_n_ip_admit_ "S Inpatient Admissions (mean)"
la var med_ip_admit "S Inpatient Admissions (median)"
graph twoway connected s_n_ip_admit_ t ///
	|| lfit s_n_ip_admit_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Hospital Admissions ")
graph save n_admit_mean.gph, replace
graph export n_admit_mean.pdf, replace
	
graph twoway connected med_ip_admit t ///
	|| lfit med_ip_admit t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Hospital Admissions ")
graph save n_admit_med.gph, replace
graph export n_admit_med.pdf, replace

graph combine n_admit_mean.gph n_admit_med.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save n_admit.gph, replace
graph export n_admit.pdf, replace

*******************************************************************
//Outpatient visits
la var s_n_op_visits_ "S Outpatient Visits (mean)"
la var med_op_visits "S Outpatient Visits (median)"
graph twoway connected s_n_op_visits_ t ///
	|| lfit s_n_op_visits_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's outpatient visits ")
graph save n_op_vis_mean.gph, replace
graph export n_op_vis_mean.pdf, replace
	
graph twoway connected med_op_visits t ///
	|| lfit med_op_visits t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's outpatient visits ")
graph save n_op_vis_med.gph, replace
graph export n_op_vis_med.pdf, replace

graph combine n_op_vis_mean.gph n_op_vis_med.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save n_op_vis.gph, replace
graph export n_op_vis.pdf, replace
*******************************************************************
log close


H="Utilization by decedent's hospice use"
/*Limited to decedents with FFS MC 6m prior to death, married at time of death,
with spouse mc id*/

capture log close

clear all
mata: mata clear
set more off

//Server file paths
global logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using $logpath\4-HRS_Spouse_claims_utilization.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
*********************************************************
//limited to sample with 24m lookback/forward
keep if s_died_p24m==0
keep if sample_n24m==1

tab r_hs_12m_gt3d r_hs_12m, missing
tab r_hs_los_12m r_hs_12m_gt3d , missing

//output table of the n's
tab r_hs_12m_gt3d,matcell(ntab)

frmttable using $logpath\4_util_by_hs_use, ///
statmat(ntab) rtitles("no hospice use" \ "hospice use") ///
ctitles("","n") sdec(0) replace

local suffixlist 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m

//rename variables so can use in the table names below
foreach su in `suffixlist'{
rename s_tot_paid_by_mc_wi_`su' tot`su'
}

foreach out in tot s_ip_paid_by_mc_wi_ s_op_paid_by_mc_wi_ ///
 s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ {
 
mat util=J(8,5,.)

local c = 1
foreach h in 1 0 {
local r = 1
foreach su in `suffixlist'{
sum `out'`su' if r_hs_12m_gt3d==`h',detail
mat util[`r',`c']=r(mean)
mat util[`r',`c'+1]=r(p50)
local r = `r'+1
}
local c = `c'+2

}

//now p-values
local r = 1
foreach su in 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m{
ttest `out'`su' ,by(r_hs_12m_gt3d)
mat util[`r',5]=r(p)
local r = `r'+1
}

mat rownames util="18-24m before death" "12-18m" "6-12m" "0-6m" ///
"0-6m after death" "6-12m" "12-18m" "18-24m"
mat list util

//save in frmttable
mat dmat=(0,1,0,1,0)
mat ann=J(8,2,1)

frmttable, statmat(util) ///
	sdec(2) doubles(dmat) ///
	dbldiv(" (") annotate(ann) asymbol(")") ///
	store(util_`out') ///
	ctitle("mean (median)","Hospice use", "No hospice use", "P-value") ///
	title("`out'")
	
}

//first table output so replace old file
outreg using $logpath\4_util_by_hs_use , ///
 title("Suriviving spouse total Medicare spending") ///
 replay(util_tot) addtable
 
//then use program with addtable option
capture program drop output
program define output
args var label 

outreg using $logpath\4_util_by_hs_use , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end

output tot "total Medicare spending"
output s_ip_paid_by_mc_wi_ "inpatient Medicare spending"
output s_op_paid_by_mc_wi_ "outpatient Medicare spending" 
output s_n_ip_admit_ "number hospital admissions"
output s_n_hospd_ "number hospital days"
output s_n_op_visits_ "number outpatient visits"
 

*********************************************************
log close


H="katherine notes"
/*This dataset is created in the header section "Variable setup in Stata"
Requires both R and S to have FFS MC 6m prior to R's death*/

capture log close

clear all
set mem 500m
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\4-HRS_Spouse_claims_KO_log.txt, text replace

cd `projdatapath'

//this is where we change sample size, limit based on ffs medicare 6 months spouse
//remove if... part if want to limit to S's with xwalk id

use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
**************************************************************
//decedent hospice use, 3+ days vs 0 days, missing if 0-2 day use
tab r_hs_12m_gt3d , missing

//to look at difference in date of death btw patient and spouse
su s_r_dod_diff, detail  

tab s_dod_hrs_claims, missing
	
//cross tabs spousal utilzation and hospice use Katherine's stuff
//s utilization after r's death, by hospice use
	tabulate s_admit_ind_p24m r_hs_12m, chi2
	tabulate s_admit_ind_p12m r_hs_12m, chi2
	tabulate s_admit_ind_p6m r_hs_12m, chi2

//s utiliztaion before r's death, by hospice use
	tabulate s_admit_ind_24m r_hs_12m, chi2
	tabulate s_admit_ind_12m r_hs_12m, chi2
	tabulate s_admit_ind_6m r_hs_12m, chi2

//s hospitalizations with mental health as admitting diagnosis
tabulate s_n_mental_ill_adm_dx_ip_6m, missing
tabulate s_admit_mental_ill_ind_6m, missing //indicator for any hosp.

//s hospitalizations with mental health in any diagnosis field
tabulate s_n_mental_ill_any_dx_ip_6m, missing
tabulate s_ip_any_dx_mental_ill_ind_6m, missing //indicator any IP with mental health dx

//s medicare payments after r's death, by hospice use
ttest s_tot_paid_by_mc_wi_p24m , by(r_hs_12m)
ttest s_tot_paid_by_mc_wi_p12m , by(r_hs_12m)
ttest s_tot_paid_by_mc_wi_p6m , by(r_hs_12m)

//s medicare payments after r's death, by intensive procedures use	
ttest s_tot_paid_by_mc_wi_p24m , by(r_int_any_6m)
ttest s_tot_paid_by_mc_wi_p12m , by(r_int_any_6m)
ttest s_tot_paid_by_mc_wi_p6m , by(r_int_any_6m)
	
//r medicare payments before r's death, by hospice use
ttest r_tot_paid_by_mc_wi_24m , by(r_hs_12m)
ttest r_tot_paid_by_mc_wi_12m , by(r_hs_12m)
ttest r_tot_paid_by_mc_wi_6m , by(r_hs_12m)
	
//r medicare payments before r's death, by intensive procedure use
ttest r_tot_paid_by_mc_wi_24m , by(r_int_any_6m)
ttest r_tot_paid_by_mc_wi_12m , by(r_int_any_6m)
ttest r_tot_paid_by_mc_wi_6m , by(r_int_any_6m)
	
**************************************************************
//variables to get spending/utilization over time plots in previous section

//all time periods, total medicare spending for the spouse
sum s_tot_paid_by_mc_wi_18m24m, detail //18-24m before R's death
sum s_tot_paid_by_mc_wi_12m18m, detail //12-18m before R's death
sum s_tot_paid_by_mc_wi_6m12m, detail //6-12m before R's death
sum s_tot_paid_by_mc_wi_6m, detail //0-6m before R's death
sum s_tot_paid_by_mc_wi_p6m, detail //0-6m after R's death
sum s_tot_paid_by_mc_wi_p6mp12m, detail //6-12m after R's death
sum s_tot_paid_by_mc_wi_p12mp18m, detail //12-18m after R's death
sum s_tot_paid_by_mc_wi_p18mp24m, detail //18-24m after R's death

//other variables with these time interval variables (just the 18-24m listed here, same suffixes used as above)
sum s_ip_paid_by_mc_wi_18m24m, detail
sum s_op_paid_by_mc_wi_18m24m , detail
sum s_n_ip_admit_18m24m , detail
sum s_n_hospd_18m24m, detail 
sum s_n_op_visits_18m24m, detail

**************************************************************
//other variables that may be of interest
tab r_nhres_x, missing //nursing home resident, exit interview
tab r_nhres_n1, missing //nursing home resident, n1 interview

//decedent dementia status, both are from dx codes 12m preceding death
tab comorb_31_0d_n12m, missing //elixhauser
tab r_cc_3_alzhdmta_n12mn0, missing //datawarehouse chronic conditions

//spouse self reported health 1=excellent 5=poor
label define srh 1 "Excellent" 2 "Very Good" 3 "Good" 4 "Fair" 5 "Poor"
label val s_srh_n1 s_srh_p1 srh

tab s_srh_n1, missing //interview before R's death
tab s_srh_p1, missing //interview after R's death

**************************************************************
log close


H="graphs split by gender"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\3a-HRS_Spouse_claims_plot_util_over_time.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*******************************************************************


cd `logpath'\graphs\
//look at S total mc spending over time, before and after r's death
//preserve

**User note - can change these to change sample criteria for plots
//only plot for those dyads where the spouse is alive the full 24m post r's death
keep if s_died_p24m==0
//only plot for those dyads where S has FFS MC 24m pre R's death
keep if sample_n24m==1
	
keep r_id s_id s_tot_paid_by_mc_wi_* s_ip_paid_by_mc_wi_* s_op_paid_by_mc_wi_* ///
 s_n_ip_admit_* s_n_hospd_* s_n_op_visits_* s_female

//rename variables to have numerical suffixes for time periods
capture program drop renamenum
program define renamenum
	args old new
	
	rename s_tot_paid_by_mc_wi_`old' s_tot_paid_by_mc_wi_`new'
	rename s_ip_paid_by_mc_wi_`old' s_ip_paid_by_mc_wi_`new'
	rename s_op_paid_by_mc_wi_`old' s_op_paid_by_mc_wi_`new' 
	rename s_n_ip_admit_`old' s_n_ip_admit_`new'
	rename s_n_hospd_`old' s_n_hospd_`new'
	rename s_n_op_visits_`old' s_n_op_visits_`new'
	end
	
renamenum 18m24m 1	
renamenum 12m18m 2
renamenum 6m12m 3
renamenum 6m 4
renamenum p6m 5	
renamenum p6mp12m 6
renamenum p12mp18m 7	
renamenum p18mp24m 8	

local varlist s_tot_paid_by_mc_wi_ s_ip_paid_by_mc_wi_ ///
	s_op_paid_by_mc_wi_ s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ 

foreach gender in 0 1 {
preserve	
keep if s_female==`gender'
drop s_female

reshape long `varlist' , ///
	i(s_id) j(t)

collapse (mean) `varlist' ///
	(median) medtot_mc_pmt=s_tot_paid_by_mc_wi_ ///
	med_ip_mc_pmt=s_ip_paid_by_mc_wi_ ///
	med_op_mc_pmt=s_op_paid_by_mc_wi_ ///
	med_ip_admit=s_n_ip_admit_ ///
	med_ip_nights=s_n_hospd_ ///
	med_op_visits=s_n_op_visits_ ///
	, by(t)

la def t 1 "18-24" 2 "12-18" 3"6-12" 4"0-6" 5"0-6" 6"6-12" 7"12-18" 8"18-24"
la val t t

*******************************************************************
//Total Medicare payments, all claim types
la var s_tot_paid_by_mc_wi_ "S Medicare payments (mean)"
la var medtot_mc_pmt "S Medicare payments (median)"
la var t "Months before/after spouse's death"
graph twoway connected s_tot_paid_by_mc_wi_ t ///
	|| lfit s_tot_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Medicare payments (all types)")
graph save tot_mc_mean_female_`gender'.gph, replace
graph export tot_mc_mean_female_`gender'.pdf, replace
	
graph twoway connected medtot_mc_pmt t ///
	|| lfit medtot_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Medicare payments (all types)")
graph save tot_mc_med_female_`gender'.gph, replace
graph export tot_mc_med_female_`gender'.pdf, replace

graph combine tot_mc_mean_female_`gender'.gph tot_mc_med_female_`gender'.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save tot_mc_female_`gender'.gph, replace
graph export tot_mc_female_`gender'.pdf, replace

*******************************************************************
//Inpatient claims Medicare payments
la var s_ip_paid_by_mc_wi_ "S Inpatient Medicare (mean)"
la var med_ip_mc_pmt "S Inpatient Medicare (median)"
graph twoway connected s_ip_paid_by_mc_wi_ t ///
	|| lfit s_ip_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Inpatient Medicare payments ")
graph save ip_mc_mean_female_`gender'.gph, replace
graph export ip_mc_mean_female_`gender'.pdf, replace
	
graph twoway connected med_ip_mc_pmt t ///
	|| lfit med_ip_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Inpatient Medicare payments ")
graph save ip_mc_med_female_`gender'.gph, replace
graph export ip_mc_med_female_`gender'.pdf, replace

graph combine ip_mc_mean_female_`gender'.gph ip_mc_med_female_`gender'.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save ip_mc_female_`gender'.gph, replace
graph export ip_mc_female_`gender'.pdf, replace

*******************************************************************
//Outpatient claims Medicare payments
la var s_op_paid_by_mc_wi_ "S Outpatient Medicare (mean)"
la var med_op_mc_pmt "S Outpatient Medicare (median)"
graph twoway connected s_op_paid_by_mc_wi_ t ///
	|| lfit s_op_paid_by_mc_wi_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Outpatient Medicare payments ")
graph save op_mc_mean_female_`gender'.gph, replace
graph export op_mc_mean_female_`gender'.pdf, replace
	
graph twoway connected med_op_mc_pmt t ///
	|| lfit med_op_mc_pmt t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Outpatient Medicare payments ")
graph save op_mc_med_female_`gender'.gph, replace
graph export op_mc_med_female_`gender'.pdf, replace

graph combine op_mc_mean_female_`gender'.gph op_mc_med_female_`gender'.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save op_mc_female_`gender'.gph, replace
graph export op_mc_female_`gender'.pdf, replace

*******************************************************************
//Hospitalizations
la var s_n_ip_admit_ "S Inpatient Admissions (mean)"
la var med_ip_admit "S Inpatient Admissions (median)"
graph twoway connected s_n_ip_admit_ t ///
	|| lfit s_n_ip_admit_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Hospital Admissions ")
graph save n_admit_mean_female_`gender'.gph, replace
graph export n_admit_mean_female_`gender'.pdf, replace
	
graph twoway connected med_ip_admit t ///
	|| lfit med_ip_admit t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's Hospital Admissions ")
graph save n_admit_med_female_`gender'.gph, replace
graph export n_admit_med_female_`gender'.pdf, replace

graph combine n_admit_mean_female_`gender'.gph n_admit_med_female_`gender'.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save n_admit_female_`gender'.gph, replace
graph export n_admit_female_`gender'.pdf, replace

*******************************************************************
//Outpatient visits
la var s_n_op_visits_ "S Outpatient Visits (mean)"
la var med_op_visits "S Outpatient Visits (median)"
graph twoway connected s_n_op_visits_ t ///
	|| lfit s_n_op_visits_ t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's outpatient visits ")
graph save n_op_vis_mean_female_`gender'.gph, replace
graph export n_op_vis_mean_female_`gender'.pdf, replace
	
graph twoway connected med_op_visits t ///
	|| lfit med_op_visits t , ///
	xline(4.5) xlabel(1 2 3 4 5 6 7 8, valuelabel) ///
	subtitle("Surviving spouse's outpatient visits ")
graph save n_op_vis_med_female_`gender'.gph, replace
graph export n_op_vis_med_female_`gender'.pdf, replace

graph combine n_op_vis_mean_female_`gender'.gph n_op_vis_med_female_`gender'.gph, ///
	note("Limited to spouses that survived to 24m post R's death, payments WI adjusted in 2012$")
graph save n_op_vis_female_`gender'.gph, replace
graph export n_op_vis_female_`gender'.pdf, replace
*******************************************************************
restore
}
log close


H="Utilization by decedent's hospice use, by gender"
/*Limited to decedents with FFS MC 6m prior to death, married at time of death,
with spouse mc id*/



capture log close

clear all
mata: mata clear
set more off

//Server file paths
global logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using $logpath\4-HRS_Spouse_claims_utilization.txt, text replace

cd `projdatapath'
 
//then use program with addtable option
capture program drop output0
program define output0
args var label 

outreg using $logpath\4_util_by_hs_use_female_0 , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end

capture program drop output1
program define output1
args var label 

outreg using $logpath\4_util_by_hs_use_female_1 , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end
use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
*********************************************************
//limited to sample with 24m lookback/forward
keep if s_died_p24m==0
keep if sample_n24m==1

tab r_hs_12m_gt3d r_hs_12m, missing
tab r_hs_los_12m r_hs_12m_gt3d , missing

//output table of the n's
tab r_hs_12m_gt3d,matcell(ntab)



foreach gender in 0 1 {
preserve
keep if s_female==`gender'

tab r_hs_12m_gt3d,matcell(ntab)

frmttable using $logpath\4_util_by_hs_use_female_`gender', ///
statmat(ntab) rtitles("no hospice use" \ "hospice use") ///
ctitles("","n") sdec(0) replace

local suffixlist 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m

//rename variables so can use in the table names below
foreach su in `suffixlist'{
rename s_tot_paid_by_mc_wi_`su' tot`su'
}

foreach out in tot s_ip_paid_by_mc_wi_ s_op_paid_by_mc_wi_ ///
 s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ {
 
mat util=J(8,5,.)

local c = 1
foreach h in 1 0 {
local r = 1
foreach su in `suffixlist'{
sum `out'`su' if r_hs_12m_gt3d==`h',detail
mat util[`r',`c']=r(mean)
mat util[`r',`c'+1]=r(p50)
local r = `r'+1
}
local c = `c'+2

}

//now p-values
local r = 1
foreach su in 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m{
ttest `out'`su' ,by(r_hs_12m_gt3d)
mat util[`r',5]=r(p)
local r = `r'+1
}

mat rownames util="18-24m before death" "12-18m" "6-12m" "0-6m" ///
"0-6m after death" "6-12m" "12-18m" "18-24m"
mat list util

//save in frmttable
mat dmat=(0,1,0,1,0)
mat ann=J(8,2,1)

frmttable, statmat(util) ///
	sdec(2) doubles(dmat) ///
	dbldiv(" (") annotate(ann) asymbol(")") ///
	store(util_`out') ///
	ctitle("mean (median)","Hospice use", "No hospice use", "P-value") ///
	title("`out'")
	
}

//first table output so replace old file
outreg using $logpath\4_util_by_hs_use_female_`gender' , ///
 title("Suriviving spouse total Medicare spending") ///
 replay(util_tot) addtable
 


output`gender' tot "total Medicare spending"
output`gender' s_ip_paid_by_mc_wi_ "inpatient Medicare spending"
output`gender' s_op_paid_by_mc_wi_ "outpatient Medicare spending" 
output`gender' s_n_ip_admit_ "number hospital admissions"
output`gender' s_n_hospd_ "number hospital days"
output`gender' s_n_op_visits_ "number outpatient visits"

restore
} 

*********************************************************
log close


H="Utilization by decedent intensive procedure"
/*Limited to decedents with FFS MC 6m prior to death, married at time of death,
with spouse mc id*/

capture log close

clear all
mata: mata clear
set more off

//Server file paths
global logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using $logpath\5-HRS_Spouse_claims_utilization_int_proc.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
*********************************************************
//limited to sample with 24m lookback/forward
keep if s_died_p24m==0
keep if sample_n24m==1

tab r_int_any_30d r_hs_12m, missing
tab r_hs_los_12m r_int_any_30d , missing

//output table of the n's
tab r_int_any_30d,matcell(ntab)

frmttable using $logpath\4_util_by_int_proc, ///
statmat(ntab) rtitles("no intensive procedure" \ "intensive procedure") ///
ctitles("","n") sdec(0) replace

local suffixlist 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m

//rename variables so can use in the table names below
foreach su in `suffixlist'{
rename s_tot_paid_by_mc_wi_`su' tot`su'
}

foreach out in tot s_ip_paid_by_mc_wi_ s_op_paid_by_mc_wi_ ///
 s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ {
 
mat util=J(8,5,.)

local c = 1
foreach h in 1 0 {
local r = 1
foreach su in `suffixlist'{
sum `out'`su' if r_int_any_30d==`h',detail
mat util[`r',`c']=r(mean)
mat util[`r',`c'+1]=r(p50)
local r = `r'+1
}
local c = `c'+2

}

//now p-values
local r = 1
foreach su in 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m{
ttest `out'`su' ,by(r_int_any_30d)
mat util[`r',5]=r(p)
local r = `r'+1
}

mat rownames util="18-24m before death" "12-18m" "6-12m" "0-6m" ///
"0-6m after death" "6-12m" "12-18m" "18-24m"
mat list util

//save in frmttable
mat dmat=(0,1,0,1,0)
mat ann=J(8,2,1)

frmttable, statmat(util) ///
	sdec(2) doubles(dmat) ///
	dbldiv(" (") annotate(ann) asymbol(")") ///
	store(util_`out') ///
	ctitle("mean (median)","Intensive Procedure", "No Intensive Procedure", "P-value") ///
	title("`out'")
	
}

//first table output so replace old file
outreg using $logpath\4_util_by_int_proc , ///
 title("Suriviving spouse total Medicare spending") ///
 replay(util_tot) addtable
 
//then use program with addtable option
capture program drop output
program define output
args var label 

outreg using $logpath\4_util_by_int_proc , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end

output tot "total Medicare spending"
output s_ip_paid_by_mc_wi_ "inpatient Medicare spending"
output s_op_paid_by_mc_wi_ "outpatient Medicare spending" 
output s_n_ip_admit_ "number hospital admissions"
output s_n_hospd_ "number hospital days"
output s_n_op_visits_ "number outpatient visits"
 

*********************************************************
log close


H="by gender"
/*Limited to decedents with FFS MC 6m prior to death, married at time of death,
with spouse mc id*/



capture log close

clear all
mata: mata clear
set more off

//Server file paths
global logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using $logpath\4-HRS_Spouse_claims_utilization.txt, text replace

cd `projdatapath'
 
//then use program with addtable option
capture program drop output0
program define output0
args var label 

outreg using $logpath\4_util_by_int_proc_female_0 , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end

capture program drop output1
program define output1
args var label 

outreg using $logpath\4_util_by_int_proc_female_1 , ///
 title("Suriviving spouse `label'") ///
 replay(util_`var') addtable
 
end
use spouse_claims_v1.dta if (s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
*********************************************************
//limited to sample with 24m lookback/forward
keep if s_died_p24m==0
keep if sample_n24m==1

tab r_int_any_1m r_hs_12m, missing
tab r_hs_los_12m r_int_any_1m , missing

//output table of the n's
tab r_int_any_1m,matcell(ntab)



foreach gender in 0 1 {
preserve
keep if s_female==`gender'

tab r_int_any_1m,matcell(ntab)

frmttable using $logpath\4_util_by_int_proc_female_`gender', ///
statmat(ntab) rtitles("no intensive procedure" \ "intensive procedure") ///
ctitles("","n") sdec(0) replace

local suffixlist 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m

//rename variables so can use in the table names below
foreach su in `suffixlist'{
rename s_tot_paid_by_mc_wi_`su' tot`su'
}

foreach out in tot s_ip_paid_by_mc_wi_ s_op_paid_by_mc_wi_ ///
 s_n_ip_admit_ s_n_hospd_ s_n_op_visits_ {
 
mat util=J(8,5,.)

local c = 1
foreach h in 1 0 {
local r = 1
foreach su in `suffixlist'{
sum `out'`su' if r_int_any_1m==`h',detail
mat util[`r',`c']=r(mean)
mat util[`r',`c'+1]=r(p50)
local r = `r'+1
}
local c = `c'+2

}

//now p-values
local r = 1
foreach su in 18m24m 12m18m 6m12m 6m p6m p6mp12m p12mp18m p18mp24m{
ttest `out'`su' ,by(r_int_any_1m)
mat util[`r',5]=r(p)
local r = `r'+1
}

mat rownames util="18-24m before death" "12-18m" "6-12m" "0-6m" ///
"0-6m after death" "6-12m" "12-18m" "18-24m"
mat list util

//save in frmttable
mat dmat=(0,1,0,1,0)
mat ann=J(8,2,1)

frmttable, statmat(util) ///
	sdec(2) doubles(dmat) ///
	dbldiv(" (") annotate(ann) asymbol(")") ///
	store(util_`out') ///
	ctitle("mean (median)","Intensive Procedure", "No Intensive Procedure", "P-value") ///
	title("`out'")
	
}

//first table output so replace old file
outreg using $logpath\4_util_by_int_proc_female_`gender' , ///
 title("Suriviving spouse total Medicare spending") ///
 replay(util_tot) addtable
 


output`gender' tot "total Medicare spending"
output`gender' s_ip_paid_by_mc_wi_ "inpatient Medicare spending"
output`gender' s_op_paid_by_mc_wi_ "outpatient Medicare spending" 
output`gender' s_n_ip_admit_ "number hospital admissions"
output`gender' s_n_hospd_ "number hospital days"
output`gender' s_n_op_visits_ "number outpatient visits"

restore
} 

*********************************************************
log close


H="spending/utilization over time"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\3a-HRS_Spouse_claims_plot_util_over_time.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta
*******************************************************************

cd `logpath'\graphs\
//look at S total mc spending over time, before and after r's death

foreach i in 12 18 24 {
	drop s_tot_paid_by_mc_wi_`i'm
	drop s_tot_paid_by_mc_wi_p`i'm
	rename s_tot_paid_by_mc_wi_`=`i'-6'm`i'm s_tot_paid_by_mc_wi_`i'm
	rename s_tot_paid_by_mc_wi_p`=`i'-6'mp`i'm s_tot_paid_by_mc_wi_p`i'm
	}
foreach n in 6 12 18 24 {
	gen ffs_tot_paid_by_mc_wi_p`n'm=s_tot_paid_by_mc_wi_p`n'm if insc_ins_p`n'm==1
	gen inscope_tot_paid_by_mc_wi_p`n'm=s_tot_paid_by_mc_wi_p`n'm if surv_`n'==1
	gen surv_tot_paid_by_mc_wi_p`n'm=s_tot_paid_by_mc_wi_p`n'm if surv_24==1 & insc_ins_p`n'm==1
	gen either_tot_paid_by_mc_wi_p`n'm=s_tot_paid_by_mc_wi_p`n'm if insc_ins_p`n'm==1
}

replace either_tot_paid_by_mc_wi_p6m=s_tot_paid_by_mc_wi_p6m if r_s_death_6m==1 & s_hmo_d_p6m==0
foreach n in 12 18 24 {
	replace either_tot_paid_by_mc_wi_p`n'm=s_tot_paid_by_mc_wi_p`n'm if ///
	 r_s_death_`n'==1 & s_hmo_d_p`n'==0
	replace either_tot_paid_by_mc_wi_p`n'm=. if surv_`=`n'-6'==0
}

foreach n in 24 18 12 6 {
	gen ffs_tot_paid_by_mc_wi_n`n'm=s_tot_paid_by_mc_wi_`n'm if insc_ins_`n'm==1
	gen inscope_tot_paid_by_mc_wi_n`n'm=s_tot_paid_by_mc_wi_`n'm if inscope_n`n'm==1
	gen surv_tot_paid_by_mc_wi_n`n'm=s_tot_paid_by_mc_wi_`n'm if surv_24==1 & insc_ins_`n'm==1
	gen either_tot_paid_by_mc_wi_n`n'm=s_tot_paid_by_mc_wi_`n'm if insc_ins_`n'm==1

}


foreach n in 24 18 12 6 {
	rename s_tot_paid_by_mc_wi_`n'm s_tot_paid_by_mc_wi_n`n'm
}

/*foreach x in 6 12 18 24 {
	replace s_tot_paid_by_mc_wi_p`x'm=. if surv_`x'==0
}*/

foreach n in 6 12 18 24 {
	gen tot_ffs_n`n'=ffs_tot_paid_by_mc_wi_n`n'
	gen tot_ffs_p`n'=ffs_tot_paid_by_mc_wi_p`n'
	egen ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n')
	egen ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n')
	egen m_ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n') if s_female==0
	egen m_ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n') if s_female==0
	egen f_ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n') if s_female==1
	egen f_ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n') if s_female==1
	egen s_ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n') if surv_24==1
	egen s_ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n') if surv_24==1
	egen f_s_ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n') if surv_24==1 & s_female==1
	egen f_s_ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n') if surv_24==1 & s_female==1
	egen m_s_ffs_tot_n`n'=mean(ffs_tot_paid_by_mc_wi_n`n') if surv_24==1 & s_female==0
	egen m_s_ffs_tot_p`n'=mean(ffs_tot_paid_by_mc_wi_p`n') if surv_24==1 & s_female==0
	egen either_tot_n`n'=mean(either_tot_paid_by_mc_wi_n`n')
	egen either_tot_p`n'=mean(either_tot_paid_by_mc_wi_p`n')
	egen m_either_tot_n`n'=mean(either_tot_paid_by_mc_wi_n`n') if s_female==0
	egen m_either_tot_p`n'=mean(either_tot_paid_by_mc_wi_p`n') if s_female==0
	egen f_either_tot_n`n'=mean(either_tot_paid_by_mc_wi_n`n') if s_female==1
	egen f_either_tot_p`n'=mean(either_tot_paid_by_mc_wi_p`n') if s_female==1

}	


preserve
foreach x in either_tot m_either_tot f_either_tot tot_ffs ffs_tot m_ffs_tot f_ffs_tot s_ffs_tot f_s_ffs_tot m_s_ffs_tot {
	rename `x'_n24 `x'1
	rename `x'_n18 `x'2
	rename `x'_n12 `x'3
	rename `x'_n6 `x'4
	rename `x'_p6 `x'5
	rename `x'_p12 `x'6
	rename `x'_p18 `x'7
	rename `x'_p24 `x'8
}

keep s_id s_female *ffs_tot* tot_ffs* surv_24 *either*
drop ffs_tot_*

reshape long ffs_tot tot_ffs f_ffs_tot m_ffs_tot s_ffs_tot m_s_ffs_tot f_s_ffs_tot either_tot m_either_tot f_either_tot, i(s_id) j(t)
la def t 1 "18-24" 2 "12-18" 3"6-12" 4"0-6" 5"0-6" 6"6-12" 7"12-18" 8"18-24"
la val t t
label var t "Time from R's Death"

collapse m_s_ffs_tot f_s_ffs_tot ffs_tot f_ffs_tot m_ffs_tot either_tot m_either_tot f_either_tot s_ffs_tot, by(t)
label var ffs_tot "Total MC Spending, all in scope"
label var f_ffs_tot "Total MC Spending, female spouses"
label var m_ffs_tot "Total MC Spending, male pouses"
label var s_ffs_tot "Total MC Spending, 24m Survivors only"

foreach x in ffs_tot  {
twoway (connected m_`x' t) (connected f_`x' t) (lfit m_`x' t) (lfit f_`x' t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_tot.pdf, replace

}

foreach x in s_ffs_tot {
twoway (connected m_`x' t) (connected f_`x' t) (lfit m_`x' t) (lfit f_`x' t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse, 24m survivors only") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_survivors.pdf, replace
}

foreach x in either_tot {
twoway (connected m_`x' t) (connected f_`x' t) (lfit m_`x' t) (lfit f_`x' t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse, continuous FFS or death") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_ffs_until_death.pdf, replace
}

twoway (connected either_tot t) (lfit ffs_tot t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("all spouses, includes spending period of death") legend(label(1 "Mean Spending"))
graph save mc_costs_all_inc, replace
graph export mc_costs_all_inc.pdf, replace

twoway (connected ffs_tot t) (lfit ffs_tot t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("all spouses") legend(label(1 "Mean Spending"))
graph save mc_costs_all, replace
graph export mc_costs_all.pdf, replace

twoway (connected s_ffs_tot t) (lfit s_ffs_tot t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("24m survivors only") legend(label(1 "Mean Spending"))
graph save mc_costs_24m_survivors, replace
graph export mc_costs_24m_survivors.pdf, replace

/*
foreach x in s_tot_paid_by_mc_wi surv_tot_paid_by_mc_wi inscope_tot_paid_by_mc_wi ffs_tot_paid_by_mc_wi {
	rename `x'_n24 `x'1
	rename `x'_n18 `x'2
	rename `x'_n12 `x'3
	rename `x'_n6 `x'4
	rename `x'_p6 `x'5
	rename `x'_p12 `x'6
	rename `x'_p18 `x'7
	rename `x'_p24 `x'8
}

keep s_id s_female surv_24 inscope_narrow s_tot_paid_by_mc_wi* inscope_p24 ffs_tot_paid* inscope_tot_paid* surv_tot_paid*

reshape long s_tot_paid_by_mc_wi ffs_tot_paid_by_mc_wi inscope_tot_paid_by_mc_wi surv_tot_paid_by_mc_wi, i(s_id) j(t)
la def t 1 "18-24" 2 "12-18" 3"6-12" 4"0-6" 5"0-6" 6"6-12" 7"12-18" 8"18-24"
la val t t
label var t "Time from R's Death"

gen m_tot=s_tot_paid_by_mc if s_female==0
gen f_tot=s_tot_paid if s_female==1
gen m_surv=m_tot if surv_24m==1
gen f_surv=f_tot if surv_24m==1
gen f_surv_insc=f_tot if inscope_nar==1
gen m_surv_insc=m_tot if inscope_nar==1
gen m_insc=m_tot if inscope_tot!=0
gen f_insc=f_tot if inscope_tot!=0
label var m_insc "M Ins/survives at interval"
label var f_insc "F Ins/survives at interval"
label var m_tot "Male Spouses"
label var f_tot "Female Spouses"
label var m_surv "M 24m Survivors only"
label var f_surv "F 24m Survivors only"
label var m_surv_insc "M 24m FFS only"
label var f_surv_insc "F 24m FFS only"

collapse (mean) m* f_* inscope_tot_pa ///
(median) medinscope_tot=inscope_tot medm_tot=m_tot medf_tot=f_tot ///
 medm_surv=m_surv medf_surv=f_surv medm_surv_insc=m_surv_insc medf_surv_insc= ///
 f_surv_insc medf_insc=f_insc medm_insc=m_insc , by(t)

 label var m_insc "M Ins/survives at interval"
label var f_insc "F Ins/survives at interval"
label var medm_insc "M Ins/survives at interval"
label var medf_insc "F Ins/survives at interval"
label var m_tot "Male Spouses"
label var f_tot "Female Spouses"
label var m_surv "M 24m Survivors only"
label var f_surv "F 24m Survivors only"
label var m_surv_insc "M 24m FFS only"
label var f_surv_insc "F 24m FFS only"
label var medm_tot "Male Spouses"
label var medf_tot "Female Spouses"
label var medm_surv "M 24m Survivors only"
label var medf_surv "F 24m Survivors only"
label var medm_surv_insc "M 24m FFS only"
label var medf_surv_insc "F 24m FFS only"
label var medinscope_tot "Has FFS or survives at interval"
label var inscope_tot "Has FFS or survives at interval"

foreach x in tot surv surv_insc insc{
twoway (connected m_`x' t) (connected f_`x' t) (lfit m_`x' t) (lfit f_`x' t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title(Mean)
graph save gmean.gph, replace

twoway (connected medm_`x' t) (connected medf_`x' t) (lfit medm_`x' t) (lfit medf_`x' t), ///
xlabel(1 2 3 4 5 6 7 8, valuelabel) xline(4.5) title(Median)
graph save gmed.gph, replace

graph combine gmean.gph gmed.gph, title("Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $")

graph save mc_costs_`x', replace
graph export mc_costs_`x'.pdf, replace
}

graph use mc_costs_tot.gph
graph save mc_costs_tot.gph, replace
graph export mc_costs_tot.pdf, replace
log close


H="monthly spending tables"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\Spouse_claims_monthly_tables.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta, clear

keep if inscope_n_mos>=24 & inscope_p_mos>=24

preserve
keep if s_tot_paid_by_mc_24m!=. & s_tot_paid_by_mc_p24m!=.

foreach x in tot ip snf op pb hh hs dm {
	foreach p in "" "p" {
		mat spending`p'=J(24,5,.)
		local r=1
		local c=1

		gen `x'`p'=0
		replace `x'=s_`x'_paid_by_mc_wi_d if s_`x'_paid_by_mc_wi_d!=.
		forvalues i=1/24 {
			qui sum s_`x'_paid_by_mc_wi_m`i'`p' 
			mat spending`p'[`r',1]=r(mean)
			mat spending`p'[`r',2]=r(sd)
			mat spending`p'[`r',3]=r(N)
			qui replace `x'`p'=`x'`p'+s_`x'_paid_by_mc_wi_m`i'`p' if s_`x'_paid_by_mc_wi_m`i'`p'!=.
			qui sum `x'`p'
			mat spending`p'[`r',4]=r(mean)
			local r=`r'+1
}
		foreach n in 6 12 18 24 {
			qui sum s_`x'_paid_by_mc_wi_`p'`n'm
			mat spending`p'[`n',5]=r(mean)
}
	mat rownames spending`p'=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

}

	frmttable, statmat(spending) title("`x' S Monthly Medicare Spending, 24m prior to R's death") ///
	 ctitles("" "Mean" "SD" "N" "Cumul" "Old cumul") sdec(2,2,0,2,2) 
	 
	frmttable, statmat(spendingp) title("`x' S Monthly Medicare Spending, 24m after R's death") ///
	 ctitles("" "Mean" "SD" "N" "Cumul" "Old cumul") sdec(2,2,0,2,2) 
}

restore
preserve
keep if r_tot_paid_by_mc_24m!=. 

foreach x in tot ip snf op pb hh hs dm {
	foreach p in "" {
		mat spending`p'=J(24,5,.)
		local r=1
		local c=1

		gen r`x'`p'=0
		replace r`x'=r_`x'_paid_by_mc_d if r_`x'_paid_by_mc_wi_d!=.
		forvalues i=1/24 {
			qui sum r_`x'_paid_by_mc_wi_m`i'`p' 
			mat spending`p'[`r',1]=r(mean)
			mat spending`p'[`r',2]=r(sd)
			mat spending`p'[`r',3]=r(N)
			qui replace r`x'`p'=r`x'`p'+r_`x'_paid_by_mc_wi_m`i'`p' if r_`x'_paid_by_mc_wi_m`i'`p'!=.
			qui sum r`x'`p'
			mat spending`p'[`r',4]=r(mean)
			local r=`r'+1
}
		foreach n in 6 12 18 24 {
			qui sum r_`x'_paid_by_mc_wi_`p'`n'm
			mat spending`p'[`n',5]=r(mean)
}
	mat rownames spending`p'=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24

}

	frmttable, statmat(spending) title("`x' R Monthly Medicare Spending, 24m prior to death") ///
	 ctitles("" "Mean" "SD" "N" "Cumul" "Old cumul") sdec(2,2,0,2,2) 
	 
}



H="monthly spending graphs"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\3a-HRS_Spouse_claims_plot_util_over_time.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta
cd `logpath'\graphs

//note--the next few lines can be used to remove the top 3% of spenders
/*
gen perstime=s_cont_ffs_n_mos
replace perstime=24 if perstime>24
gen npt=s_tot_paid_by_mc_wi_24m/perstime
gen pperstime=s_cont_ffs_p_mos
replace pperstime=24 if ppers>24
gen ppt=s_tot_paid_by_mc_wi_p24m/pperstime
gen pt=npt+ppt
gsort -npt
drop if _n<50
*/
forvalues n=1/24 {
	gen tot_ffs_n`n'=s_tot_paid_by_mc_wi_m`n'
	gen tot_ffs_p`n'=s_tot_paid_by_mc_wi_m`n'p
	egen ffs_tot`n'=mean(tot_ffs_n`n')
	egen ffs_tot`=`n'+25'=mean(tot_ffs_p`n')
	egen m_ffs_tot`n'=mean(tot_ffs_n`n') if s_female==0
	egen m_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if s_female==0
	egen f_ffs_tot`n'=mean(tot_ffs_n`n') if s_female==1
	egen f_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if s_female==1
	egen s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24
	egen s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24
	egen f_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & s_female==1
	egen f_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & s_female==1
	egen m_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & s_female==0
	egen m_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & s_female==0

}

keep s_id *ffs_tot* s_female 

*reshape long s_tot_paid_by_mc_wi_m , i(s_id) j(t)
reshape long ffs_tot tot_ffs f_ffs_tot m_ffs_tot s_ffs_tot m_s_ffs_tot ///
f_s_ffs_tot, i(s_id) j(t)

gen time=-t if t<=24
replace time=t-25 if t>24

collapse m_s_ffs_tot f_s_ffs_tot ffs_tot f_ffs_tot m_ffs_tot s_ffs_tot, by(time)
label var ffs_tot "Total MC Spending, all in scope"
label var f_ffs_tot "Total MC Spending, female spouses"
label var m_ffs_tot "Total MC Spending, male pouses"
label var s_ffs_tot "Total MC Spending, 24m Survivors only"

foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
 xline(0) xtitle("months from R death")title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_totmonthly.pdf, replace

}

foreach x in s_ffs_tot {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
xline(0) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $" "inscope 24m post R death only") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_survivorsmonthly.pdf, replace
}


twoway (connected ffs_tot time) (lfit ffs_tot time), ///
xline(0) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $") subtitle("all spouses") legend(label(1 "Mean Spending"))
graph save mc_costs_all, replace
graph export mc_costs_allmonthly.pdf, replace

twoway (connected s_ffs_tot time) (lfit s_ffs_tot time), ///
 xline(0) title("Mean Medicare Costs By Time from Death") ///
note("WI Adjusted to 2012 $" "inscope 24m post R death only") legend(label(1 "Mean Spending"))
graph save mc_costs_24m_survivors, replace
graph export mc_costs_24m_survivorsmonthly.pdf, replace


H="three-month spending & utilization"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data


cd `projdatapath'

use spouse_claims_v1.dta
cd `logpath'\graphs\3month_graphs
//note-you can use these next lines to drop the top 3% of pre-death_spenders
/*
gen perstime=s_cont_ffs_n_mos
replace perstime=24 if perstime>24
gen npt=s_tot_paid_by_mc_wi_24m/perstime
gen pperstime=s_cont_ffs_p_mos
replace pperstime=24 if ppers>24
gen ppt=s_tot_paid_by_mc_wi_p24m/pperstime
gen pt=npt+ppt
gsort -npt
drop if _n<50
*/
forvalues n=1(3)24 {
	gen tot_ffs_n`n'=s_tot_paid_by_mc_wi_m_`n'_to_`=`n'+2' if inscope_n_mos>=`n'
	gen tot_ffs_p`n'=s_tot_paid_by_mc_wi_m_`n'_to_`=`n'+2'p if inscope_p_mos>=`n'
	egen ffs_tot`n'=mean(tot_ffs_n`n')
	egen ffs_tot`=`n'+25'=mean(tot_ffs_p`n')
	egen m_ffs_tot`n'=mean(tot_ffs_n`n') if s_female==0
	egen m_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if s_female==0
	egen f_ffs_tot`n'=mean(tot_ffs_n`n') if s_female==1
	egen f_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if s_female==1
	egen s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24
	egen s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24
	egen f_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & s_female==1
	egen f_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & s_female==1
	egen m_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & s_female==0
	egen m_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & s_female==0

}

keep s_id *ffs_tot* s_female 

reshape long ffs_tot tot_ffs f_ffs_tot m_ffs_tot s_ffs_tot m_s_ffs_tot ///
f_s_ffs_tot, i(s_id) j(t)

gen time=-(t+2)/3 if t<=24
replace time=(t-23)/3 if t>=24

label define time -8 "21-24m" -7 "19-21" -6 "16-18" -5 "13-15" -4 "9-12" ///
 -3 "7-9" -2 "4-6" -1 "0-3" 8 "21-24m" 7 "19-21" 6 "16-18" 5 "13-15" 4 "9-12" ///
 3 "7-9" 2 "4-6" 1 "0-3" 
label values time time
collapse m_s_ffs_tot f_s_ffs_tot ffs_tot f_ffs_tot m_ffs_tot s_ffs_tot, by(time)
label var ffs_tot "Total MC Spending, all in scope"
label var f_ffs_tot "Total MC Spending, female spouses"
label var m_ffs_tot "Total MC Spending, male spouses"
label var s_ffs_tot "Total MC Spending, 24m Survivors only"
gen before=time if time<0
gen after=time if time>0

foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
 xline(0) xtitle("months from R death")title("Mean Medicare Costs By Time from Death, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_tot3months.pdf, replace

}

foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' before) (lfit m_`x' after) ///
(lfit f_`x' before) (lfit f_`x' after)*/, ///
 xline(0) xtitle("months from R death")title("Mean Medicare Costs By Time from Death, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_tot3months_prepost.pdf, replace

}

foreach x in s_ffs_tot {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
xline(0) xtitle("months from R death") title("Mean Medicare Costs By Time from Death, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
note("WI Adjusted to 2012 $" "24m survivors only") subtitle("by gender of surviving spouse") legend(label(1 "Male spouses") ///
label(2 "Female spouses"))
graph save mc_costs_gender`x'.gph, replace
graph export mc_costs_gender_survivors3months.pdf, replace
}


twoway (connected ffs_tot time) , ///
xline(0) xtitle("months from R death") title("Mean Medicare Costs By Time from Death, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
note("WI Adjusted to 2012 $") subtitle("all spouses") legend(label(1 "Mean Spending"))
graph save mc_costs_all, replace
graph export mc_costs_all3months.pdf, replace

twoway (connected s_ffs_tot time) , ///
 xline(0) xtitle("months from R death") title("Mean Medicare Costs By Time from Death, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
note("WI Adjusted to 2012 $" "24m Survivors only") legend(label(1 "Mean Spending"))
graph save mc_costs_24m_survivors, replace
graph export mc_costs_24m_survivors3months.pdf, replace

gen source="spouse"
save E:/data/spouse_claims/data/int_data/spouse_claims_collapsed.dta, replace


H="three-month tables"
/*three month tables 
variables are s_tot_paid_by_mc_
			  s_n_ip_admit_
			  s_n_op_visits_
			  s_n_hospd_
we want N if !=., N if !=0, mean, old 6m vars for total and gender*/


capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\Spouse_claims_3month_tables.txt, text replace

cd `projdatapath'

use spouse_claims_v1.dta, clear

preserve
keep if s_tot_paid_by_mc_24m!=. & s_tot_paid_by_mc_p24m!=.

foreach x in s_tot_paid_by_mc_wi_ s_n_ip_admit_ s_n_op_visits_ {
	foreach p in "" "p" {
		mat spending`p'=J(8,6,.)
		local r=1
		local c=1

		gen `x'`p'=0
		forvalues i=1(3)24 {
			qui sum `x'm_`i'_to_`=`i'+2'`p'
			mat spending`p'[`r',1]=r(mean)
			mat spending`p'[`r',2]=r(N)
			qui sum `x'm_`i'_to_`=`i'+2'`p' if `x'm_`i'_to_`=`i'+2'`p'!=0
			mat spending`p'[`r',3]=r(mean)
			mat spending`p'[`r',4]=r(N)
			qui replace `x'`p'=`x'`p'+`x'm_`i'_to_`=`i'+2'`p' if `x'm_`i'_to_`=`i'+2'`p'!=.
			qui sum `x'`p'
			mat spending`p'[`r',5]=r(mean)
			local r=`r'+1
}
		local r=2

		/*foreach n in 6 12 18 24 {
			qui sum `x'`p'`n'm 
			mat spending`p'[`r',6]=r(mean)
			local r=`r'+2
}
*/
	mat rownames spending`p'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"

}
	if "s_tot_paid_by_mc_wi_"=="`x'" {
		local this replace
}
	else {
		local this addtable
}
	frmttable using `logpath'\3month_spending_util_tables, `this' statmat(spending) title("`x' 24m prior to R's death") ///
	 ctitles("" "Mean" "N" "Mean if !=0" "N" "Cumulative") sdec(2,0,2,0,2) 
	 
	frmttable using `logpath'\3month_spending_util_tables, addtable statmat(spendingp) title("`x' , 24m after R's death") ///
	 ctitles("" "Mean" "N" "Mean if !=0" "N" "Cumulative") sdec(2,0,2,0,2) 
}

restore
preserve
mat ip=J(8,5,.)
mat ipaft=J(8,5,.)

local r=1 
local c=1
gen yes=1
gen ever=0
forvalues i=1(3)24 {
	sum yes if s_cont_ffs_n_mos>=`i'
	mat ip[`r',1]=r(N)
	sum s_ip_admit_ind_m_`i'_to_`=`i'+2' if s_cont_ffs_n_mos>=`i'
	mat ip[`r',2]=r(N)*r(mean)
	mat ip[`r',3]=r(mean)*100
	replace ever=1 if s_ip_admit_ind_m_`i'_to_`=`i'+2'==1
	sum ever
	mat ip[`r',4]=r(mean)*100
	sum ever if s_cont_ffs_n_mos>=`i'
	mat ip[`r',5]=r(mean)*100
	local r=`r'+1
}

replace ever=0
local r=1

forvalues i=1(3)24 {
	sum yes if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',1]=r(N)
	sum s_ip_admit_ind_m_`i'_to_`=`i'+2'p if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',2]=r(N)*r(mean)
	mat ipaft[`r',3]=r(mean)*100
	replace ever=1 if s_ip_admit_ind_m_`i'_to_`=`i'+2'p==1
	sum ever
	mat ipaft[`r',4]=r(mean)*100
	sum ever if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',5]=r(mean)*100
	local r=`r'+1
}

foreach a in "" "aft" {
	mat rownames ip`a'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"
}
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ip) ///
title("Indicator IP admission prior to R death") sdec(0,0,2) replace ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to death)
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ipaft) ///
title("Indicator IP admission after R death") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to death)

mat ip=J(8,5,.)
mat ipaft=J(8,5,.)

local r=1 
local c=1
replace ever=0
keep if inscope_p24m==1

forvalues i=1(3)24 {
	sum yes if s_cont_ffs_n_mos>=`i'
	mat ip[`r',1]=r(N)
	sum s_ip_admit_ind_m_`i'_to_`=`i'+2' if s_cont_ffs_n_mos>=`i'
	mat ip[`r',2]=r(N)*r(mean)
	mat ip[`r',3]=r(mean)*100
	replace ever=1 if s_ip_admit_ind_m_`i'_to_`=`i'+2'==1
	sum ever
	mat ip[`r',4]=r(mean)*100
	sum ever if s_cont_ffs_n_mos>=`i'
	mat ip[`r',5]=r(mean)*100
	local r=`r'+1
}

replace ever=0
local r=1

forvalues i=1(3)24 {
	sum yes if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',1]=r(N)
	sum s_ip_admit_ind_m_`i'_to_`=`i'+2'p if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',2]=r(N)*r(mean)
	mat ipaft[`r',3]=r(mean)*100
	replace ever=1 if s_ip_admit_ind_m_`i'_to_`=`i'+2'p==1
	sum ever
	mat ipaft[`r',4]=r(mean)*100
	sum ever if s_cont_ffs_p_mos>=`i'
	mat ipaft[`r',5]=r(mean)*100
	local r=`r'+1
}

foreach a in "" "aft" {
	mat rownames ip`a'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"
}
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ip) ///
title("Indicator IP admission prior to R death" "24m survivors only") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to death)
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ipaft) ///
title("Indicator IP admission after R death" "24m survivors only") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to death)


H="spending and dx by type,time, age"
local projdatapath E:\data\spouse_claims\data\int_data
local logpath E:\data\spouse_claims\logs
cd `projdatapath'


use spouse_claims_v1.dta, clear
keep if s_cont_ffs_n_mo>=4
drop s_comorb_*l_0d_n6m

mat tab=J(31,6,.)
local r=1 
local c=1

foreach j in 0 1 {
	foreach x in 6 12 {
		forvalues i=1/31 {
			sum s_comorb_`i'_0d_n`x'm if s_female==`j' & s_cont_ffs_n_mo>=4
			mat tab[`r',`c']=r(mean)*100
			local r=`r'+1
}	
		local r=1
		local c=`c'+1
}
	forvalues i=1/31 {
		mat tab[`i',`c']=(tab[`i',`c'-2]/tab[`i',`c'-1])*100

}
	local c=`c'+1
}
mat rownames tab=s_comorb_1_0d_n6m s_comorb_2_0d_n6m s_comorb_3_0d_n6m s_comorb_4_0d_n6m ///
s_comorb_5_0d_n6m s_comorb_6_0d_n6m s_comorb_7_0d_n6m s_comorb_8_0d_n6m s_comorb_9_0d_n6m ///
s_comorb_10_0d_n6m s_comorb_11_0d_n6m s_comorb_12_0d_n6m s_comorb_13_0d_n6m s_comorb_14_0d_n6m ///
s_comorb_15_0d_n6m s_comorb_16_0d_n6m s_comorb_17_0d_n6m s_comorb_18_0d_n6m s_comorb_19_0d_n6m ///
s_comorb_20_0d_n6m s_comorb_21_0d_n6m s_comorb_22_0d_n6m s_comorb_23_0d_n6m s_comorb_24_0d_n6m ///
s_comorb_25_0d_n6m s_comorb_26_0d_n6m s_comorb_27_0d_n6m s_comorb_28_0d_n6m s_comorb_29_0d_n6m ///
s_comorb_30_0d_n6m s_comorb_31_0d_n6m 

frmttable using `logpath'\spending_by_time.rtf, replace statmat(tab) varlabels sdec(2) ///
 ctitles("" "Male 6m" "Male 12m" "% with dx 6m before death" ///
"Female 6m" "Female 12m" "% with dx 6m before death" ) title(comorbidities by time)


mat tab2=J(8,6,.)
local r=1 
local c=1

foreach i in 0 1 {
	foreach x in tot ip snf op pb hh hs dm {
		sum s_`x'_paid_by_mc_wi_m_4_to_6 if s_female==`i'
		mat tab2[`r',`c']=r(mean)
		sum s_`x'_paid_by_mc_wi_12m if s_female==`i'
		mat tab2[`r',`c'+1]=r(mean)
		mat tab2[`r',`c'+2]=(tab2[`r',`c']/tab2[`r',`c'+1])*100
		local r=`r'+1
}
	local c=`c'+3
	local r=1
}

mat rownames tab2="Total" "IP" "SNF" "OP" "PB" "HH" "HS" "DM"
frmttable using `logpath'\spending_by_time.rtf,addtable statmat(tab2) varlabels ///
sdec(2) ctitles("" "Male 3-6m" "Male 12m" "% from 3-6m before death" ///
"Female 3-6m" "Female 12m" "% from 3-6m before death" ) ///
title("Mean Medicare spending by type and time")

gen agecap=s_age
replace agecap=66 if agecap==65
replace agecap=90 if agecap>90
gen age2 = floor(agecap/2)*2

forvalues i=1(3)24 {
by age2 s_female, sort: egen mean`i'=mean(s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2')
}

label var mean1 "0-3 m before R's death"
label var mean4 "3-6 m before R's death"
label var mean7 "6-9 m before R's death"
label var mean10 "9-12 m before R's death"
label define age2 90 "90+"
label values age2 age2

twoway (line mean1 age2) (line mean4 age2) (line mean7 age2) (line mean10 age2) ///
if s_female==0, xscale(range(65 90)) xlabel(66 74 82 90, valuelabels) ///
title("Quarterly spending by age, male")
graph save `logpath'\spending_by_age_male, replace
graph export `logpath'\spending_by_age_male.pdf, replace

twoway (line mean1 age2) (line mean4 age2) (line mean7 age2) (line mean10 age2) ///
if s_female==1, xscale(range(65 90)) xlabel(66 74 82 90, valuelabels) ///
title("Quarterly spending by age , female")
graph save `logpath'\spending_by_age_female, replace
graph export `logpath'\spending_by_age_female.pdf, replace


H="utilization by person-months"
local projdatapath E:\data\spouse_claims\data\int_data
local logpath E:\data\spouse_claims\logs
cd `projdatapath'


use spouse_claims_v1.dta, clear

gen pmn=s_cont_ffs_n_mos
replace pmn=24 if s_cont_ffs_n_mos>24
gen pmp=s_cont_ffs_p_mos
replace pmp=24 if s_cont_ffs_p_mos>24

forvalues i=1(3)24 {
	foreach p in n p {
		gen pm`i'`p'=0
		replace pm`i'`p'=1 if pm`p'==`i'
		replace pm`i'`p'=2 if pm`p'==`i'+1
		replace pm`i'`p'=3 if pm`p'>=`i'+2
}
}

collapse (sum) pm* s_tot_paid_by_mc_wi_m_* s_n_ip_admit_m_* ///
 s_icu_days_m_* s_n_ed_* s_n_op_visits_m_*,by(s_female)

*foreach t in 0  {

mat pd=J(20,8,.)
local r=2
local c=1

forvalues i=22(-3)1{
	foreach x in pm`i'n s_n_ip_admit_m_`i'_to_`=`i'+2' s_n_ed_m_`i'_to_`=`i'+2' ///
	 s_icu_days_m_`i'_to_`=`i'+2' s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
		foreach g in "0|s_female==1" 0 1 {
			sum `x' if s_female==`g'
			mat pd[`r',`c']=r(sum)
			local r=`r'+1
}
		local r=`r'+1
}
	local r=2
	local c=`c'+1
}


mat rownames pd="Total Person Months" "All" "Male" "Female" "Hospitalizations" "All" "Male" ///
"Female" "ED visits" "All" "Male" "Female" ///
"ICU Days" "All" "Male" "Female" "Total Costs" "All" "Male" "Female"

mat pd2=J(20,8,.)
local r=2
local c=1


forvalues i=1(3)24 {
	foreach x in pm`i'p s_n_ip_admit_m_`i'_to_`=`i'+2'p s_n_ed_m_`i'_to_`=`i'+2'p ///
	 s_icu_days_m_`i'_to_`=`i'+2'p s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p {
		foreach g in "0|s_female==1" 0 1 {
			sum `x' if s_female==`g'
			mat pd2[`r',`c']=r(sum)
			local r=`r'+1
}
		local r=`r'+1
}
	local r=2 
	local c=`c'+1
}

mat rownames pd2="Total Person Months" "All" "Male" "Female" "Hospitalizations" "All" "Male" ///
"Female" "ED visits" "All" "Male" "Female" ///
"ICU Days" "All" "Male" "Female" "Total Costs" "All" "Male" "Female"
/*
foreach g in 0 1 {
	forvalues i=1(3)24 {	
		foreach x in pm`i'n s_n_ip_admit_m_`i'_to_`=`i'+2' s_n_ed_m_`i'_to_`=`i'+2' ///
		 s_icu_days_m_`i'_to_`=`i'+2' s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
			replace `x'=`x'/pm`i'n if s_female==`g'
}
		foreach x in pm`i'p s_n_ip_admit_m_`i'_to_`=`i'+2'p s_n_ed_m_`i'_to_`=`i'+2'p ///
		 s_icu_days_m_`i'_to_`=`i'+2'p s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p {
			replace `x'=`x'/pm`i'p if s_female==`g'
}
}
}*/

mat pdr=J(20,8,.)
mat pdr2=J(20,8,.)

forvalues i=1/8{
	forvalues j=2(4)20 {
		foreach o in "" 2 {
			mat pdr`o'[`j',`i']=pd`o'[`j',`i']/pd`o'[2,`i']
			mat pdr`o'[`j'+1,`i']=pd`o'[`j'+1,`i']/pd`o'[3,`i']
			mat pdr`o'[`j'+2,`i']=pd`o'[`j'+2,`i']/pd`o'[4,`i']
}
}
}

mat rownames pdr="Total Person Months" "All" "Male" "Female" "Hospitalizations" "All" "Male" ///
"Female" "ED visits" "All" "Male" "Female" ///
"ICU Days" "All" "Male" "Female" "Total Costs" "All" "Male" "Female"

mat rownames pdr2="Total Person Months" "All" "Male" "Female" "Hospitalizations" "All" "Male" ///
"Female" "ED visits" "All" "Male" "Female" ///
"ICU Days" "All" "Male" "Female" "Total Costs" "All" "Male" "Female"

frmttable using `logpath'\utilization_person_time, statmat(pd) title(Quarterly Utilization Pre-death, Raw) ///
sdec(0\0\0\0\0\0\0\0\0\0\0\0\2) ctitles("" "24-21" "21-18" "15-18" ///
"12-15" "9-12" "6-9" "3-6""0-3" ) replace varlabels

frmttable using `logpath'\utilization_person_time, statmat(pd2) title(Quarterly Utilization Post-death, Raw) ///
sdec(0\0\0\0\0\0\0\0\0\0\0\0\2) ctitles("" "0-3" "3-6" ///
 "6-9" "9-12" "12-15" "15-18" "18-21" "21-24") addtable varlabels

 frmttable using `logpath'\utilization_person_time, statmat(pdr) title(Quarterly Utilization Pre-death, ///
 Per month rate) sdec(2) ctitles("" "24-21" "21-18" "15-18" ///
"12-15" "9-12" "6-9" "3-6" "0-3" ) addtable varlabels

frmttable using `logpath'\utilization_person_time, statmat(pdr2) title(Quarterly Utilization Post-death, ///
 Per month rate) sdec(2) ctitles("" "0-3" "3-6" ///
 "6-9" "9-12" "12-15" "15-18" "18-21" "21-24") addtable varlabels
 
 *restore

forvalues i=1(3)24 { 
 	egen allpm`i'n=sum(pm`i'n)
	egen allpm`i'p=sum(pm`i'p)	
	foreach x in tot_paid_by_mc_wi n_ip_admit icu_days n_ed n_op_visits {
		gen `x'`i'=s_`x'_m_`i'_to_`=`i'+2'
		gen `x'`=`i'+25'=s_`x'_m_`i'_to_`=`i'+2'p
		egen all`x'`i'=sum(`x'`i')
		replace all`x'`i'=all`x'`i'/(allpm`i'n)
		egen all`x'`=`i'+25'=sum(`x'`=`i'+25')
		replace all`x'`=`i'+25'=all`x'`=`i'+25'/(allpm`i'p)
		replace `x'`i'=`x'`i'/pm`i'n
		replace `x'`=`i'+25'=`x'`=`i'+25'/pm`i'p
}
}


reshape long alln_op_visits alltot_paid_by_mc_wi alln_ip_admit allicu_days ///
 alln_ed n_op_visits tot_paid_by_mc_wi n_ip_admit icu_days n_ed, i(s_female) j(t)
gen time=-(t+2)/3 if t<=24
replace time=(t-23)/3 if t>=24

label define time -8 "21-24m" -7 "19-21" -6 "16-18" -5 "13-15" -4 "9-12" ///
 -3 "7-9" -2 "4-6" -1 "0-3" 8 "21-24m" 7 "19-21" 6 "16-18" 5 "13-15" 4 "9-12" ///
 3 "7-9" 2 "4-6" 1 "0-3" 
label values time time
rename tot_paid_by_mc_wi tot
rename n_ip_admit ip
rename icu_days icu
rename n_ed ed
rename alltot_paid_by_mc_wi alltot
rename alln_ip_admit allip
rename allicu_days allicu
rename alln_ed alled
rename n_op_visits op
rename alln_op_visits allop

foreach x in tot ip icu ed op {
	gen m_`x'=`x' if s_female==0
	gen f_`x'=`x' if s_female==1
}

collapse *tot *ip *icu *ed *op, by(time)



foreach x in tot ip icu ed op {
twoway  (line m_`x' time) (line f_`x' time) , ///
 xline(0) xtitle("months from R death") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("Rate of `x' per person month, 3month intervals") legend(label(1 ///
 "Male spouses")label(2 "Female spouses"))
graph save `logpath'\mc_costs_gender`x'.gph, replace
graph export `logpath'\utilization_`x'_gender_3months.pdf, replace

}





H="hospitalization tables"
/*
data ipa;
set spo_mc_i.mp_meet_24m(keep=sslssnf r_id bid_hrs_21 admit_date disch_date r_death_date_e ad_dgns pmt_amt passthru); 
where sslssnf~="N" and admit_date<r_death_date_e-91 and admit_date>r_death_date_e-183;
run;

data ip;
set ipa;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


mc_cost=rate*(pmt_amt+passthru);
run;

proc export data=ip outfile="E:\data\spouse_claims\data\int_data\admits_3_6_m.dta" replace; run;


*/


capture log close

use "E:\data\spouse_claims\data\int_data\spouse_claims_v1.dta", clear
gen hospitalized=s_n_ip_admit_m_4_to_6>0 if s_n_ip_admit_m_4_to_6!=.
gen n1n2=s_c_ivw_date_n1>r_death_date_e-183
foreach i in 1 2 {
gen helper_n`i'=s_adl_sp_opn_n`i'==1 | s_adl_sp_helper_n`i'==1
replace helper_n`i'=1 if s_iadl_sp_opn_n`i'==1 | s_iadl_sp_helper_n`i'==1
}

gen helper_n1n2=helper_n1
replace helper_n1n2=helper_n2 if n1n2==1

gen dod_1yr=s_death_date_e-r_death_date_e<=365
gen s_helper_x=r_adl_sp_helper_x==1 | r_iadl_sp_helper_x==1
gen int1=helper_n1*hospitalized
gen int1or2=helper_n1n2*hospitalized
gen int2=s_helper_x*hospitalized
gen prev_hosp=0
gen n_prev_hosp=0
forvalues i=7(3)24 {
	replace prev_hosp=1 if s_n_ip_admit_m_`i'_to_`=`i'+2'>=1
	replace n_prev_hosp=n_prev_hosp+s_n_ip_admit_m_`i'_to_`=`i'+2'
}

label var hospitalized "S hospitalized 3-6m pre R death"
label var helper_n1n2 "R ADL or IADL primary helper N1N2"
label var helper_n1 "R ADL or IADL primary helper N1"
label var s_helper_x "S ADL or IADL primary helper Exit"
label var int1 "S hospitalized X R was S's helper N1"
label var int1or2 "S hospitalized X R was S's helper N1N2"
label var int2 "S hospitalized X S was R's helper Exit"
label var prev_hosp "S hospitalized 3-6m and 6-24m pre R death"
label var n_prev_hosp "N S hospitalizations 6-24m if hosp 3-6m"

keep if s_c_ivw_date_n1!=.  

local xvars hospitalized helper_n1 helper_n1n2 s_helper_x int1 int1or2 int2
mat tab=J(7,6,.)

local r=1
local c=1

foreach i in "0,1" 0 1 {
	foreach x in `xvars' {
		sum `x' if inlist(s_female,`i') 
		mat tab[`r',`c']=r(mean)*r(N)
		mat tab[`r',`c'+1]=r(mean)*100
		local r=`r'+1
}
	local c=`c'+2
	local r=1
}

mat rowname tab=`xvars'

frmttable using "E:\data\spouse_claims\logs\spouse_helper_hospitalization.rtf", ///
statmat(tab) ctitles("" "Full sample N" "%" "Male spouses N" "%" ///
"Female spouses N" "%") sdec(0,2,0,2,0,2) varlabels replace ///
note("Restricted to those S's with an n1 interview")

local xvars hospitalized helper_n1 helper_n1n2 s_helper_x int1 int1or2 int2
mat tab=J(7,6,.)

local r=1
local c=1

foreach i in "0,1" 0 1 {
	foreach x in `xvars' {
		sum `x' if inlist(s_female,`i') & s_cont_ffs_n_mos>=6 
		mat tab[`r',`c']=r(mean)*r(N)
		mat tab[`r',`c'+1]=r(mean)*100
		local r=`r'+1
}
	local c=`c'+2
	local r=1
}

mat rowname tab=`xvars'

frmttable using "E:\data\spouse_claims\logs\spouse_helper_hospitalization.rtf", ///
statmat(tab) ctitles("" "Full sample N" "%" "Male spouses N" "%" ///
"Female spouses N" "%") sdec(0,2,0,2,0,2) varlabels addtable ///
note("Restricted to those S's with an n1 interview and 6+M FFS pre R's death")

local xvars  r_s_death_12m r_s_death_24m

mat tab=J(6,6,.)
local c=1

foreach i in "0,1" 0 1 {
	foreach x in 6 12 24 {
		foreach j in "" " & hospitaliz==1" {
			sum r_s_death_`x'm if inlist(s_female,`i')`j' & s_cont_ffs_n_mos>=6 & ///
			(r_s_death | s_cont_ffs_p_mos>=`x')
			mat tab[`r',`c']=r(mean)*r(N)
			mat tab[`r',`c'+1]=r(mean)*100
			local r=`r'+1
}
}	
	local c=`c'+2
	local r=1
}


frmttable using "E:\data\spouse_claims\logs\spouse_helper_hospitalization.rtf", ///
statmat(tab) ctitles("" "Full sample N" "%" "Male spouses N" "%" ///
"Female spouses N" "%") sdec(0,2,0,2,0,2) varlabels addtable ///
note("Restricted to those S's with an n1 interview, FFS 6+M pre R's death" ///
 "FFS until end of time frame or death") ///
rtitles("Death within 6 months" \"   if hospitalized 3-6m pre R's death" \ ///
 "Death within 1 year" \"   if hospitalized 3-6m pre R's death" \ ///
 "Death within 2 years"\ "   if hospitalized 3-6m pre R's death")
preserve

 
 foreach z in 0 1 {
 mat tab`z' = J(12,9,.)
 local r=2
 local c=1
 foreach g in "0,1" 0 1 {
	foreach i in 0 1 {
		foreach x in hospitalized {
			sum `x' if inlist(s_female,`g') & hospitalized==`i' &  ///
			s_cont_ffs_n_mos>=6
			mat tab`z'[`r',`c']=r(N)*r(mean)
			mat tab`z'[`r',`c'+1]=r(mean)*100
			local r=`r'+1
}
		foreach x in s_n_ip_admit_m_4_to_6 {
			sum `x' if inlist(s_female,`g') & hospitalized==`i' &  ///
			s_cont_ffs_n_mos>=6
			mat tab`z'[`r',`c']=r(N)*r(mean)
			mat tab`z'[`r',`c'+1]=r(mean)
			local r=`r'+1
}
		foreach x in prev_  {
			sum `x' if inlist(s_female,`g') & hospitalized==`i' &  ///
			s_cont_ffs_n_mos>=6
			mat tab`z'[`r',`c']=r(N)*r(mean)
			mat tab`z'[`r',`c'+1]=r(mean)*100
			local r=`r'+1
}
		foreach x in n_prev {
			sum `x' if inlist(s_female,`g') & hospitalized==`i' &  ///
			s_cont_ffs_n_mos>=6
			mat tab`z'[`r',`c']=r(N)*r(mean)
			mat tab`z'[`r',`c'+1]=r(mean)
			local r=`r'+1
			mat tab`z'[`r',`c']=r(N)
			
}
	local r=`r'+2
}
	local c=`c'+2
	local r=2
}
	
	keep if s_cont_ffs_n_mos>=24
}

log using "E:\data\spouse_claims\logs\dx_3_6_m_males.txt", text replace
restore

frmttable using "E:\data\spouse_claims\logs\hosp_pre_death.rtf", ///
statmat(tab0) ctitles("" "Full sample N" "%/Mean" "Male spouses N" "%/Mean" ///
"Female spouses N" "%/Mean" ) sdec(0,2,0,2,0,2) varlabels  replace ///
note("Restricted to those S's with an n1 interview, FFS 6+M pre R's death") ///
rtitles("Not hospitalized 3-6m prior to R's death" \ ///
"    Hospitalized 3-6m prior to R's death"\"    N Hospitalizations 3-6m prior to R's death" ///
\"    Hospitalized 6-24m prior to R's death"\"    N Hospitalizations 6-24m prior to R's death" ///
\"    N in group" \"Hospitalized 3-6m prior to R's death" \ ///
"    Hospitalized 3-6m prior to R's death"\"    N Hospitalizations 3-6m prior to R's death" ///
\"    Hospitalized 6-24m prior to R's death" \"    N Hospitalizations 6-24m prior to R's death" ///
\"    N in group") title("Hospitalizations before and after R's death")

frmttable using "E:\data\spouse_claims\logs\hosp_pre_death.rtf", ///
statmat(tab1) ctitles("" "Full sample N" "%/Mean" "Male spouses N" "%/Mean" ///
"Female spouses N" "%/Mean" ) sdec(0,2,0,2,0,2) varlabels  addtable ///
note("Restricted to those S's with an n1 interview, FFS 24M pre R's death") ///
rtitles("Not hospitalized 3-6m prior to R's death" \ ///
"    Hospitalized 3-6m prior to R's death"\"    N Hospitalizations 3-6m prior to R's death" ///
\"    Hospitalized 6-24m prior to R's death"\"    N Hospitalizations 6-24m prior to R's death" ///
\"    N in group" \"Hospitalized 3-6m prior to R's death" \ ///
"    Hospitalized 3-6m prior to R's death"\"    N Hospitalizations 3-6m prior to R's death" ///
\"    Hospitalized 6-24m prior to R's death" \"    N Hospitalizations 6-24m prior to R's death" ///
\"    N in group") title("Hospitalizations before and after R's death")


merge 1:m r_id using "E:\data\spouse_claims\data\int_data\admits_3_6_m.dta", nogen keep(match master)
keep if s_female==0
drop if ad_dg==""
gen los=disch_date-admit_date 
replace los=1 if los==0
by ad_dg, sort: gen number=_N
by ad_dg, sort: egen mean_los=mean(los)
tab ad_dg if num>1
by s_id, sort: egen s_id_mean_los=mean(los)
sort s_id
drop if hospitalized==0
export excel s_id mc_cost n_prev s_n_ip_admit_m_4_to_6 s_id_mean_los ad_dgns los number mean_los using "E:\data\spouse_claims\logs\diagnoses.xls", replace firstrow(variables)
by s_id, sort: gen num=_N
tab ad_dg if num>1

*duplicates drop ad_dg, force



tab ad_dg

log close


H="*******************************"


H="Construct comparison group"
/*get list of all R's with index date = date at which men are 79.292 & women are 76.778

hrs_cln.core_00_to_12.sas7bdat - core, with observation for each core interview, includes
net worth data, TICS score and interview date from restricted dataset

hrs_cln.exit_02_to_12_dt.sas7bdat - exit dataset with interview date added from restricted dataset

hrs_cln.restricted_v2012.sas7bdat - restricted dataset*/

/*redo spo_mc_i to be the comparison subfolder*/
libname spo_mc_i 'E:\data\spouse_claims\data\int_data\comparison';

/*get index date*/
data ind1(drop=birth_date gender hhid pn);
set hrs_cln.restr_tracker_v2012 (keep=hhid pn birth_date gender); 
if gender=1 then index_date=birth_date+floor(365.25*79.292);
if gender=2 then index_date=birth_date+floor(365.25*76.778);
index_year=year(index_date);
index_month=month(index_date);
format index_date date9.;
id=trim(hhid)||trim(pn);
run;

data ind;
set ind1;
if index_year>1999 and index_year<2013;
run;

/*prepare xwalk id file to merge*/
data crosswalk_1;
set medi.cmsxref2012;
id=trim(hhid)||trim(pn);
run;

proc sql;
create table spo_mc_i.index as select a.*,b.bid_hrs_21 from 
ind a left join 
crosswalk_1 b on a.id=b.id;
quit;



H="Continuous FFS before & after"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death

Also pulls in spouse date of death where available in the claims s_claims_dod*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2012 out=dn_2000_20122  nodupkey;
by BID_HRS_21 year;
run;


proc sort data=spo_mc_i.index out=index1a nodupkey;
by bid_hrs_21 index_year;
run;

/*get denominator file for just index year for those with xwalk id only*/
proc sql;
create table dn_index_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from index1a a inner join
dn_2000_20122 b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_21))
and a.index_year=b.year;
quit;

proc freq data=dn_index_y;
table index_year;
run;


/*2349 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct bid_hrs_21) from dn_index_y;
quit;

/*note death month is from restricted file*/
data dn_index_y2;
set dn_index_y;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),1,index_month);
hmo_dy=substr(trim(left(HMOIND12)),1,index_month);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format index_date date9.;
run;
proc means n;
var index_month;
run;

/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2176 have the -1 year dn file*/
proc sql;
create table dn_index_y_bef as select
a.bid_hrs_21,a.year as index_year,
b.year as index_year_bef,
b.year,b.buyin12,b.HMOIND12
from dn_index_y a inner join
dn_2000_20122 b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_21))
and a.year-b.year=1 order by bid_hrs_21,year;
quit;


/* and the year before... 1922 have the -2 year dn file*/
proc sql;
create table dn_index_y_2bef as select
a.bid_hrs_21,a.index_year,a.index_year_bef,
b.year as index_year_2bef,
b.year,b.buyin12,b.HMOIND12
from dn_index_y_bef a inner join
dn_2000_20122 b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_21))
and a.index_year_bef-b.year=1 order by bid_hrs_21,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table all_insurance_n as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
dn_index_y2 a
left join
dn_index_y_bef b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21));
quit;

proc sql;
create table all_insurance_n2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
all_insurance_n a
left join
dn_index_y_2bef b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21));
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data all_insurance_n3a;
set all_insurance_n2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_dy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_dy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));


/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y_r,"0","1","2","A","B")=0 then part_ab_n_mos=length(buyin_2y_r);
if indexc(buyin_2y_r,"0","1","2","A","B") then part_ab_n_mos=indexc(buyin_2y_r,"0","1","2","A","B")-1;
if indexc(hmo_2y_r,"1","2","4","A","B","C")=0 then non_hmo_d_n_mos=length(hmo_2y_r);
if indexc(hmo_2y_r,"1","2","4","A","B","C") then non_hmo_d_n_mos=indexc(hmo_2y_r,"1","2","4","A","B","C")-1;
if part_ab_n_mos<=non_hmo_d_n_mos then cont_ffs_n_mos=part_ab_n_mos;
if non_hmo_d_n_mos<part_ab_n_mos then cont_ffs_n_mos=non_hmo_d_n_mos;
run;


data all_insurance_n3;
set all_insurance_n3a(keep=non_hmo_d_n_mos part_ab_n_mos cont_ffs_n_mos id index_date);
run;





/*note death month is from restricted file*/
data dn_index_p_y2;
set dn_index_y;
if length(trim(left(buyin12)))=12 and index_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),index_month,13-index_month);
hmo_dy=substr(trim(left(HMOIND12)),index_month,13-index_month);
buyin_at_death=substr(trim(left(buyin12)),index_month,1);
hmo_at_death=substr(trim(left(HMOIND12)),index_month,1);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format index_date date9.;
run;


/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 2080 have the +1 year dn file*/
proc sql;
create table dn_index_p_y_aft as select
a.bid_hrs_21,a.year as index_year,
b.year as index_year_aft,
b.year,b.buyin12,b.HMOIND12
from dn_index_y a inner join
dn_2000_20122 b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_21))
and a.year-b.year=-1 order by bid_hrs_21,year;
quit;


/* and the year aftore... 1790 have the +2 year dn file*/
proc sql;
create table dn_index_p_y_2aft as select
a.bid_hrs_21,a.index_year,a.index_year_aft,
b.year as index_year_2aft,
b.year,b.buyin12,b.HMOIND12
from dn_index_p_y_aft a inner join
dn_2000_20122 b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_21))
and a.index_year_aft-b.year=-1 order by bid_hrs_21,year;
quit;

/*merge the insurance data for death year, +1 and +2 years into single dataset*/
proc sql;
create table all_insurance_p as select a.*,b.buyin12 as buyin_aft,b.HMOIND12 as hmo_aft from
dn_index_p_y2 a
left join
dn_index_p_y_aft b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21));
quit;

proc sql;
create table all_insurance_p2 as select a.*,b.buyin12 as buyin_2aft,b.HMOIND12 as hmo_2aft from
all_insurance_p a
left join
dn_index_p_y_2aft b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21));
quit;


/*merge death year and year aftore death buy-in and hmo variables
Trim so the final variable _p6m is 6 months post-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months post-death*/
data all_insurance_p3a;
set all_insurance_p2;
buyin_2y=trimn(left(buyin_dy))||trimn(left(buyin_aft))||trimn(left(buyin_2aft));
hmo_2y=trimn(left(hmo_dy))||trimn(left(hmo_aft))||trimn(left(hmo_2aft));

/*create length of continous a&b and non-hmo coverage vars*/
if indexc(buyin_2y,"0","1","2","A","B")=0 then part_ab_p_mos=length(buyin_2y);
if indexc(buyin_2y,"0","1","2","A","B") then part_ab_p_mos=indexc(buyin_2y,"0","1","2","A","B")-1;
if indexc(hmo_2y,"1","2","4","A","B","C")=0 then non_hmo_d_p_mos=length(hmo_2y);
if indexc(hmo_2y,"1","2","4","A","B","C") then non_hmo_d_p_mos=indexc(hmo_2y,"1","2","4","A","B","C")-1;
if indexc(buyin_at_death,"0","1","2","A","B")=1 then part_ab_at_index_dt=0;
if indexc(buyin_at_death,"0","1","2","A","B")=0 then part_ab_at_index_dt=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=1 then hmo_d_at_index_dt=1;
if indexc(hmo_at_death,"1","2","4","A","B","C")=0 then hmo_d_at_index_dt=0;
ffs_at_index_dt=part_ab_at_index_dt;
if hmo_d_at_index_dt=1 then ffs_at_index_dt=0;
if part_ab_p_mos<=non_hmo_d_p_mos then cont_ffs_p_mos=part_ab_p_mos;
if non_hmo_d_p_mos<part_ab_p_mos then cont_ffs_p_mos=non_hmo_d_p_mos;
run;

data all_insurance_p3;
set all_insurance_p3a(keep=hmo_d_at_index_dt part_ab_at_index_dt ffs_at_index_dt non_hmo_d_p_mos part_ab_p_mos cont_ffs_p_mos id index_date);
run;
/******************************************************************/
/*merge before & after and save*/
/******************************************************************/
proc sql;
create table continuous_ffs1 as select * from
all_insurance_n3 a 
full outer join 
all_insurance_p3 b
on a.id=b.id and a.index_date=b.index_date;
quit;

data spo_mc_i.continuous_ffs;
set continuous_ffs1;
has_xwalk=1;
run;


H="get mc claims list 6m intervals"
proc sort data=spo_mc_i.index out=index1a nodupkey;
by bid_hrs_21 index_year;
run;




/**************************************************************************/
/* ************** S Claims Before R's Death  ******************************/
/**************************************************************************/
/*macro to get claims before death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_bef_index=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.index_date,b.id 
from medi.&source._2000_2012 a inner join
index1a b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21))
and &days_start<=b.index_date-a.admit_date<=&days_bef_index ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.index_date,b.id 
from medi.&source._2000_2012 a inner join
index1a b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21))
and b.index_date-a.admit_date>&days_bef_index and b.index_date-a.disch_date<=&days_bef_index;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
run;
%mend;

/*6m before death*/
%claims(days_start=0,days_bef_index=183,source=hh,suf=6m); /*home health*/
%claims(days_start=0,days_bef_index=183,source=hs,suf=6m); /*hospice*/
%claims(days_start=0,days_bef_index=183,source=mp,suf=6m); /*medpar*/
%claims(days_start=0,days_bef_index=183,source=dm,suf=6m); /*dme*/
%claims(days_start=0,days_bef_index=183,source=op,suf=6m); /*outpatient*/
%claims(days_start=0,days_bef_index=183,source=pb,suf=6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_bef_index=365,source=hh,suf=12m); /*home health*/
%claims(days_start=0,days_bef_index=365,source=hs,suf=12m); /*hospice*/
%claims(days_start=0,days_bef_index=365,source=mp,suf=12m); /*medpar*/
%claims(days_start=0,days_bef_index=365,source=dm,suf=12m); /*dme*/
%claims(days_start=0,days_bef_index=365,source=op,suf=12m); /*outpatient*/
%claims(days_start=0,days_bef_index=365,source=pb,suf=12m); /*carrier*/
/*18m before death*/
%claims(days_start=0,days_bef_index=548,source=hh,suf=18m); /*home health*/
%claims(days_start=0,days_bef_index=548,source=hs,suf=18m); /*hospice*/
%claims(days_start=0,days_bef_index=548,source=mp,suf=18m); /*medpar*/
%claims(days_start=0,days_bef_index=548,source=dm,suf=18m); /*dme*/
%claims(days_start=0,days_bef_index=548,source=op,suf=18m); /*outpatient*/
%claims(days_start=0,days_bef_index=548,source=pb,suf=18m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_bef_index=365*2,source=hh,suf=24m); /*home health*/
%claims(days_start=0,days_bef_index=365*2,source=hs,suf=24m); /*hospice*/
%claims(days_start=0,days_bef_index=365*2,source=mp,suf=24m); /*medpar*/
%claims(days_start=0,days_bef_index=365*2,source=dm,suf=24m); /*dme*/
%claims(days_start=0,days_bef_index=365*2,source=op,suf=24m); /*outpatient*/
%claims(days_start=0,days_bef_index=365*2,source=pb,suf=24m); /*carrier*/

/**************************************************************************/
/* ************** S Claims After R's Death   ******************************/
/**************************************************************************/
/*macro to get claims after death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_aft_index=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.index_date,b.id 
from medi.&source._2000_2012 a inner join
index1a b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21))
and &days_start<=a.admit_date - b.index_date<=&days_aft_index ;
quit;

/*claims that start earlier than R's DOD but span after R's death*/
proc sql;
create table &source._meet_2 as select a.*,b.index_date,b.id 
from medi.&source._2000_2012 a inner join
index1a b
on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21))
and a.admit_date<b.index_date
and &days_start<=a.disch_date - b.index_date;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
format disch_date date9.;
format admit_date date9.;
run;
%mend;

/*6m after death*/
%claims(days_start=0,days_aft_index=183,source=hh,suf=p6m); /*home health*/
%claims(days_start=0,days_aft_index=183,source=hs,suf=p6m); /*hospice*/
%claims(days_start=0,days_aft_index=183,source=mp,suf=p6m); /*medpar*/
%claims(days_start=0,days_aft_index=183,source=dm,suf=p6m); /*dme*/
%claims(days_start=0,days_aft_index=183,source=op,suf=p6m); /*outpatient*/
%claims(days_start=0,days_aft_index=183,source=pb,suf=p6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_aft_index=365,source=hh,suf=p12m); /*home health*/
%claims(days_start=0,days_aft_index=365,source=hs,suf=p12m); /*hospice*/
%claims(days_start=0,days_aft_index=365,source=mp,suf=p12m); /*medpar*/
%claims(days_start=0,days_aft_index=365,source=dm,suf=p12m); /*dme*/
%claims(days_start=0,days_aft_index=365,source=op,suf=p12m); /*outpatient*/
%claims(days_start=0,days_aft_index=365,source=pb,suf=p12m); /*carrier*/
/*18m before death*/
%claims(days_start=0,days_aft_index=548,source=hh,suf=p18m); /*home health*/
%claims(days_start=0,days_aft_index=548,source=hs,suf=p18m); /*hospice*/
%claims(days_start=0,days_aft_index=548,source=mp,suf=p18m); /*medpar*/
%claims(days_start=0,days_aft_index=548,source=dm,suf=p18m); /*dme*/
%claims(days_start=0,days_aft_index=548,source=op,suf=p18m); /*outpatient*/
%claims(days_start=0,days_aft_index=548,source=pb,suf=p18m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_aft_index=365*2,source=hh,suf=p24m); /*home health*/
%claims(days_start=0,days_aft_index=365*2,source=hs,suf=p24m); /*hospice*/
%claims(days_start=0,days_aft_index=365*2,source=mp,suf=p24m); /*medpar*/
%claims(days_start=0,days_aft_index=365*2,source=dm,suf=p24m); /*dme*/
%claims(days_start=0,days_aft_index=365*2,source=op,suf=p24m); /*outpatient*/
%claims(days_start=0,days_aft_index=365*2,source=pb,suf=p24m); /*carrier*/

/**************************************************************************/
/* ********************* S Diagnosis Lists   ******************************/
/**************************************************************************/

%macro dx_time_range(range1=, range2=, suf=);
/*pulls just dx codes from carrier claims*/
data pb_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.pb_meet_&suf.(keep=bid_hrs_21 id PDGNS_CD DGNSCD01-DGNSCD12 );
array dx PDGNS_CD DGNSCD01-DGNSCD12;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=pb_last_&range2._dx out=pb_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*outpatient claims*/
data op_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.op_meet_&suf.(keep=bid_hrs_21 id PDGNS_CD DGNSCD01-DGNSCD25  );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx out=op_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*medpar claims*/
data mp_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.mp_meet_&suf.(keep=bid_hrs_21 id AD_DGNS DGNS_CD01-DGNS_CD25 );
array dx D_DGNS DGNS_CD01-DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=mp_last_&range2._dx out=mp_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*dme claims*/
data dm_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.dm_meet_&suf.(keep=bid_hrs_21 id PDGNS_CD DGNSCD01-DGNSCD12 );
array dx PDGNS_CD DGNSCD01-DGNSCD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx out=dm_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*home health agency*/
data hh_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.hh_meet_&suf.(keep=bid_hrs_21 id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx out=hh_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*hospice*/
data hs_last_&range2._dx(keep=bid_hrs_21 id diag);
set spo_mc_i.hs_meet_&suf.(keep=bid_hrs_21 id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx out=hs_last_&range2._dx2 nodupkey;
by bid_hrs_21 id diag;
run;

/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3;
length diag $7;
set hs_last_&range2._dx2;
run;
data hh_last_&range2._dx3;
length diag $7;
set hh_last_&range2._dx2;
run;
data mp_last_&range2._dx3;
length diag $7;
set mp_last_&range2._dx2;
run;
data dm_last_&range2._dx3;
length diag $7;
set dm_last_&range2._dx2;
run;
data op_last_&range2._dx3;
length diag $7;
set op_last_&range2._dx2;
run;
data pb_last_&range2._dx3;
length diag $7;
set pb_last_&range2._dx2;
run;

data dx_all_last_&range2.;
set hs_last_&range2._dx3
hh_last_&range2._dx3
mp_last_&range2._dx3
dm_last_&range2._dx3
op_last_&range2._dx3
pb_last_&range2._dx3;
run;

proc sort data=dx_all_last_&range2.(where=(diag~="")) out=spo_mc_i.dx_&range1._&range2 nodupkey;
by bid_hrs_21 id diag;
run;

%mend;

/*run macro to create data files spo_mc_i.dx_0d_n6m spo_mc_i.dx_0d_n12m and spo_mc_i.dx_0d_n24m */
%dx_time_range(range1=0d, range2=n6m, suf=6m);
%dx_time_range(range1=0d, range2=n12m, suf=12m);
%dx_time_range(range1=0d, range2=n24m, suf=24m);

/*run for dx lists after R's death*/
%dx_time_range(range1=0d, range2=p6m, suf=p6m);
%dx_time_range(range1=0d, range2=p12m, suf=p12m);
%dx_time_range(range1=0d, range2=p24m, suf=p24m);



H="Elixhauser comorbidities"
/*creates indicators for each of the Elixhauser comorbidities
based on the dx codes lists 6, 12, and 24m before and after R's death

resulting dataset is spo_mc_i.hrs_elix*/

/*rename macro - called within the elixhauser macro
to add time suffix to variables

lib=library
dsn=dataset name
pre=suffix to be added to all of the variable names
*/

%macro rename(lib,dsn,pre);
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "Before Renaming All Variables";
run;

proc sql noprint;
select nvar into :num_vars
from dictionary.tables
where libname="&LIB" and
memname="&DSN";
select distinct(name) into :var1-
:var%TRIM(%LEFT(&num_vars))
from dictionary.columns
where libname="&LIB" and
memname="&DSN";
quit;
run;

proc datasets library=&LIB;
modify &DSN;
rename
%do i=1 %to &num_vars;
&&var&i=&&var&i.._&pre 
%end;
;
quit;
run;
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "After Renaming All Variables";
run;
%mend rename;



/*Elixhauser index macro
Note includes additional 2 comorbidities: Dementia and Coronary Artery Disease*/

%macro elixhauser(range1=, range2=);

data dx_31_comor_&range2;
set spo_mc_i.dx_&range1._&range2(rename=(diag=dx_0));
dx=trim(left(dx_0));

if dx~="" then do;

comorbi_1=0;
comorbi_2=0;
comorbi_3=0;
comorbi_4=0;
comorbi_5=0;
comorbi_6=0;
comorbi_7=0;
comorbi_8=0;
comorbi_9=0;
comorbi_10=0;
comorbi_11=0;
comorbi_12=0;
comorbi_13=0;
comorbi_14=0;
comorbi_15=0;
comorbi_16=0;
comorbi_17=0;
comorbi_18=0;
comorbi_19=0;
comorbi_20=0;
comorbi_21=0;
comorbi_22=0;
comorbi_23=0;
comorbi_24=0;
comorbi_25=0;
comorbi_26=0;
comorbi_27=0;
comorbi_28=0;
comorbi_29=0;
comorbi_30=0;
*end of intialize of 30 binary variables;
*add dementia and CAD;
dementia=0;
cad=0;

*do over dx;
	*Congestive Heart Failure;
	if (substr(dx,1,5)='39891' or
		substr(dx,1,5)='40211' or
		substr(dx,1,5)='40291' or
		substr(dx,1,5)='40411' or
		substr(dx,1,5)='40413' or
		substr(dx,1,5)='40491' or
		substr(dx,1,5)='40493' or
		substr(dx,1,3)='428') 
		and comorbi_1=0 
		then comorbi_1=1;*add one binary variables here.;
	*Cardiac Arrhythmias;
	if (substr(dx,1,5)='42610' or
		substr(dx,1,5)='42611' or
		substr(dx,1,5)='42613' or
		substr(dx,1,4)='4262' or
		substr(dx,1,4)='4263' or
		substr(dx,1,4)='4264' or
		substr(dx,1,5)='42650' or
		substr(dx,1,5)='42651' or
		substr(dx,1,5)='42652' or
		substr(dx,1,5)='42653' or
		substr(dx,1,4)='4266' or
		substr(dx,1,4)='4267' or
		substr(dx,1,4)='4268' or
		substr(dx,1,4)='4270' or
		substr(dx,1,4)='4272' or
		substr(dx,1,5)='42731' or
		substr(dx,1,5)='42760' or
		substr(dx,1,4)='4279' or
		substr(dx,1,4)='7850' or
		substr(dx,1,4)='V450' or
		substr(dx,1,4)='V533')
			and comorbi_2=0 
		then comorbi_2=1;
	* Valvular Disease ;
	if (substr(dx,1,5)='09320' or
		substr(dx,1,5)='09321' or
		substr(dx,1,5)='09322' or
		substr(dx,1,5)='09323' or
		substr(dx,1,5)='09324' or
		substr(dx,1,3)='394' or
		substr(dx,1,3)='395' or
		substr(dx,1,3)='396' or
		substr(dx,1,4)='3970' or
		substr(dx,1,4)='3971' or
		substr(dx,1,4)='4240' or
		substr(dx,1,4)='4241' or
		substr(dx,1,4)='4242' or
		substr(dx,1,4)='4243' or
		substr(dx,1,4)='4244' or
		substr(dx,1,4)='4245' or
		substr(dx,1,4)='4246' or
		substr(dx,1,4)='4247' or
		substr(dx,1,4)='4248' or
		substr(dx,1,5)='42490' or
		substr(dx,1,5)='42491' or
		substr(dx,1,4)='7463' or
		substr(dx,1,4)='7464' or
		substr(dx,1,4)='7465' or
		substr(dx,1,4)='7466' or
		substr(dx,1,4)='V422' or
		substr(dx,1,5)='V433')
			and comorbi_3=0 
		then comorbi_3=1;
	*Pulmonary Circulation Disorders;
	if (substr(dx,1,3)='416' or
		substr(dx,1,4)='4179')
			and comorbi_4=0 
		then comorbi_4=1;
	*Peripheral Vascular Disorders;
	if (substr(dx,1,3)='440' or
		substr(dx,1,4)='4412' or
		substr(dx,1,4)='4414' or
		substr(dx,1,4)='4417' or
		substr(dx,1,4)='4419' or
		substr(dx,1,4)='4431' or
		substr(dx,1,4)='4432' or
		substr(dx,1,4)='4438' or
		substr(dx,1,4)='4439' or
		substr(dx,1,4)='4471' or
		substr(dx,1,4)='5571' or
		substr(dx,1,4)='5579' or
		substr(dx,1,4)='V434')
			and comorbi_5=0 
		then comorbi_5=1;
	*Hypertension;
	if ((substr(dx,1,4)='4011' or
		substr(dx,1,4)='4019')) or
	   ((substr(dx,1,5)='40210' or
		substr(dx,1,5)='40290' or
		substr(dx,1,5)='40410' or
		substr(dx,1,5)='40490' or
		substr(dx,1,5)='40511' or
		substr(dx,1,5)='40519' or
		substr(dx,1,5)='40591' or
		substr(dx,1,5)='40599')) 
			and comorbi_6=0 
		then comorbi_6=1;
	*Paralysis;	
	if (substr(dx,1,4)='3420' or
		substr(dx,1,5)='34210' or
		substr(dx,1,5)='34211' or
		substr(dx,1,5)='34212' or
		substr(dx,1,4)='3429' or
		substr(dx,1,3)='343' or
		substr(dx,1,3)='344')
			and comorbi_7=0 
		then comorbi_7=1;
	*Other Neurological Disorders;
	if (substr(dx,1,4)='3319' or
		substr(dx,1,4)='3320' or
		substr(dx,1,4)='3334' or
		substr(dx,1,4)='3335' or
		substr(dx,1,3)='334' or
		substr(dx,1,3)='335' or
		substr(dx,1,3)='340' or
		substr(dx,1,4)='3411' or
		substr(dx,1,4)='3418' or
		substr(dx,1,4)='3419' or
		substr(dx,1,5)='34500' or
		substr(dx,1,5)='34501' or
		substr(dx,1,5)='34510' or
		substr(dx,1,5)='34511' or
		substr(dx,1,4)='3454' or
		substr(dx,1,5)='34550' or
		substr(dx,1,5)='34551' or
		substr(dx,1,4)='3458' or
		substr(dx,1,5)='34590' or
		substr(dx,1,5)='34591' or
		substr(dx,1,4)='3481' or
		substr(dx,1,4)='3483' or
		substr(dx,1,4)='7803' or
		substr(dx,1,4)='7843') 
			and comorbi_8=0 
		then comorbi_8=1;	
	*Chronic Pulmonary Disease;
	if (substr(dx,1,3)='490' or
		substr(dx,1,3)='491' or
		substr(dx,1,3)='492' or
		substr(dx,1,4)='4930' or
		substr(dx,1,4)='4931' or
		substr(dx,1,4)='4932' or
		substr(dx,1,4)='4938' or
		substr(dx,1,5)='49390' or
		substr(dx,1,5)='49391' or
		substr(dx,1,3)='494' or
		substr(dx,1,3)='495' or
		substr(dx,1,3)='496' or
		substr(dx,1,3)='497' or
		substr(dx,1,3)='498' or
		substr(dx,1,3)='499' or
		substr(dx,1,3)='500' or
		substr(dx,1,3)='501' or
		substr(dx,1,3)='502' or
		substr(dx,1,3)='503' or
		substr(dx,1,3)='504' or
		substr(dx,1,3)='505' or
		substr(dx,1,4)='5064') 
			and comorbi_9=0 
		then comorbi_9=1;	
	*Diabetes, uncomplicated;
	if (substr(dx,1,4)='2500' or
		substr(dx,1,4)='2501' or
		substr(dx,1,4)='2502' or
		substr(dx,1,4)='2503') 
			and comorbi_10=0 
		then comorbi_10=1;
	*Diabetes, complicated;
	if (substr(dx,1,4)='2504' or
		substr(dx,1,4)='2505' or
		substr(dx,1,4)='2506' or
		substr(dx,1,4)='2507' or
		substr(dx,1,4)='2509') 
			and comorbi_11=0 
		then comorbi_11=1;
	*Hypothyroidism;
	if (substr(dx,1,3)='243' or
		substr(dx,1,4)='2440' or
		substr(dx,1,4)='2441' or
		substr(dx,1,4)='2442' or
		substr(dx,1,4)='2448' or
		substr(dx,1,4)='2449') 	
			and comorbi_12=0 
		then comorbi_12=1;
	*Renal Failure;
	if (substr(dx,1,5)='40311' or
		substr(dx,1,5)='40391' or
		substr(dx,1,5)='40412' or
		substr(dx,1,5)='40492' or
		substr(dx,1,3)='585' or
		substr(dx,1,3)='586' or
		substr(dx,1,4)='V420' or
		substr(dx,1,4)='V451' or
		substr(dx,1,4)='V560' or
		substr(dx,1,4)='V568') 
			and comorbi_13=0 
		then comorbi_13=1;
	*Liver Disease;
	if (substr(dx,1,5)='07032' or
		substr(dx,1,5)='07033' or
		substr(dx,1,5)='07054' or
		substr(dx,1,4)='4560' or
		substr(dx,1,4)='4561' or
		substr(dx,1,5)='45620' or
		substr(dx,1,5)='45621' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='5714' or
		substr(dx,1,4)='5715' or
		substr(dx,1,4)='5716' or
		substr(dx,1,4)='5718' or
		substr(dx,1,4)='5719' or
		substr(dx,1,4)='5723' or
		substr(dx,1,4)='5728' or
		substr(dx,1,4)='V427') 
			and comorbi_14=0 
		then comorbi_14=1;
	*Peptic Ulcer Disease excluding bleeding;
	if (substr(dx,1,5)='53170' or
		substr(dx,1,5)='53190' or
		substr(dx,1,5)='53270' or
		substr(dx,1,5)='53290' or
		substr(dx,1,5)='53370' or
		substr(dx,1,5)='53390' or
		substr(dx,1,5)='53470' or
		substr(dx,1,5)='53490' or
		substr(dx,1,5)='V1271') 
			and comorbi_15=0 
		then comorbi_15=1;
	*AIDS;
	if (substr(dx,1,3)='042' or
		substr(dx,1,3)='043' or
		substr(dx,1,3)='044') 
			and comorbi_16=0 
		then comorbi_16=1;
	*Lymphoma;
	if (substr(dx,1,3)='200' or
		substr(dx,1,4)='201' or
		substr(dx,1,4)='2020' or
		substr(dx,1,4)='2021' or
		substr(dx,1,4)='2022' or
		substr(dx,1,4)='2023' or
		substr(dx,1,4)='2025' or
		substr(dx,1,4)='2026' or
		substr(dx,1,4)='2027' or
		substr(dx,1,4)='2028' or
		substr(dx,1,4)='2029' or
		substr(dx,1,4)='2030' or
		substr(dx,1,4)='2038' or
		substr(dx,1,4)='2386' or
		substr(dx,1,4)='2733' or
		substr(dx,1,4)='V1071' or
		substr(dx,1,4)='V1072' or
		substr(dx,1,4)='V1079')
			and comorbi_17=0 
		then comorbi_17=1;
	*Metastatic Cancer;
	if (substr(dx,1,3)='196' or
		substr(dx,1,3)='197' or
		substr(dx,1,3)='198' or
		substr(dx,1,4)='199') 
			and comorbi_18=0 
		then comorbi_18=1;	
	*Solid Tumor without Metastisis;
	if (substr(dx,1,2)='14' or
		substr(dx,1,2)='15' or
		substr(dx,1,2)='16' or
		substr(dx,1,3)='170' or
		substr(dx,1,3)='171' or
		substr(dx,1,3)='172' or
		substr(dx,1,3)='174' or
		substr(dx,1,3)='175' or
		substr(dx,1,3)='179' or
		substr(dx,1,2)='18' or
		substr(dx,1,3)='190' or
		substr(dx,1,3)='191' or
		substr(dx,1,3)='192' or
		substr(dx,1,3)='193' or
		substr(dx,1,3)='194' or
		substr(dx,1,3)='195' or
		substr(dx,1,3)='V10')
			and comorbi_19=0 
		then comorbi_19=1;
	*Rheumatoid Arthritis/Collagen Vascular Diseases;
	if (substr(dx,1,4)='7010' or
		substr(dx,1,3)='710' or
		substr(dx,1,3)='714' or
		substr(dx,1,3)='720' or
		substr(dx,1,3)='725') 
			and comorbi_20=0 
		then comorbi_20=1;
	*Coagulopathy;
	if (substr(dx,1,3)='286' or
		substr(dx,1,4)='2871' or
		substr(dx,1,4)='2873' or
		substr(dx,1,4)='2874' or
		substr(dx,1,4)='2875') 
			and comorbi_21=0 
		then comorbi_21=1;
	*Obesity;
	if (substr(dx,1,4)='2780')  
			and comorbi_22=0 
		then comorbi_22=1;
	*Weight Loss;
	if (substr(dx,1,3)='260' or
		substr(dx,1,3)='261' or
		substr(dx,1,3)='262' or
		substr(dx,1,3)='263') 
			and comorbi_23=0 
		then comorbi_23=1;	
	*Fluid and Electrolyte Disorders;
	if (substr(dx,1,3)='276') 
			and comorbi_24=0 
		then comorbi_24=1;
	*Blood Loss Anemia;
	if (substr(dx,1,4)='2800') 
			and comorbi_25=0 
		then comorbi_25=1;
	*Deficiency Anemias;
	if (substr(dx,1,4)='2801' or
		substr(dx,1,4)='2808' or
		substr(dx,1,4)='2809' or
		substr(dx,1,4)='2859') 
			and comorbi_26=0 
		then comorbi_26=1;
	*Alcohol Abuse;
	if (substr(dx,1,4)='2911' or
		substr(dx,1,4)='2912' or
		substr(dx,1,4)='2915' or
		substr(dx,1,4)='2918' or
		substr(dx,1,4)='2919' or
		substr(dx,1,4)='3039' or
		substr(dx,1,4)='3050' or
		substr(dx,1,4)='V113') 
			and comorbi_27=0 
		then comorbi_27=1;
	*Drug Abuse;
	if (substr(dx,1,4)='2920' or
		substr(dx,1,5)='29282' or
		substr(dx,1,5)='29283' or
		substr(dx,1,5)='29284' or
		substr(dx,1,5)='29289' or
		substr(dx,1,4)='2929' or
		substr(dx,1,3)='304' or
		substr(dx,1,4)='3052' or
		substr(dx,1,4)='3053' or
		substr(dx,1,4)='3054' or
		substr(dx,1,4)='3055' or
		substr(dx,1,4)='3056' or
		substr(dx,1,4)='3057' or
		substr(dx,1,4)='3058' or
		substr(dx,1,4)='3059')
			and comorbi_28=0 
		then comorbi_28=1;	
	*Psychoses;
	if (substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,4)='2991') 
			and comorbi_29=0 
		then comorbi_29=1;
	*Depression;
	if (substr(dx,1,4)='3004' or
		substr(dx,1,5)='30112' or
		substr(dx,1,4)='3090' or
		substr(dx,1,4)='3091' or
		substr(dx,1,3)='311')
			and comorbi_30=0 
		then comorbi_30=1;


	*Dementia;
	if (substr(dx,1,4) in ('3310','3311','3312','2900','2901',
             '2902','2903','2912','2948','2949') or
		substr(dx,1,5) in ('29410','29411','29040','29041','29042','29043')) 
		and dementia=0 
          then dementia=1;

	*CAD coronary artery disease;
	if (substr(dx,1,4) in ('4140','4142','4143','4148','4149') or 
		substr(dx,1,3) in ('410','411','412','413') or
		substr(dx,1,5) in ('V4581','V4582'))
		and cad=0 
          then cad=1;

/* CAD list
410.00-410.92
411.0-411.89
412
413.0-413.9
414.00-414.07
414.2
414.3
414.8
414.9
V45.81
V45.82 */

end;
run;


/*check sums of each comorbidity for each ID*/
proc sql;
create table com_test1_&range2 as
select distinct BID_hrs_21, id,
sum(comorbi_1) as com_1,
sum(comorbi_2) as com_2,
sum(comorbi_3) as com_3,
sum(comorbi_4) as com_4,
sum(comorbi_5) as com_5,
sum(comorbi_6) as com_6,
sum(comorbi_7) as com_7,
sum(comorbi_8) as com_8,
sum(comorbi_9) as com_9,
sum(comorbi_10) as com_10,
sum(comorbi_11) as com_11,
sum(comorbi_12) as com_12,
sum(comorbi_13) as com_13,
sum(comorbi_14) as com_14,
sum(comorbi_15) as com_15,
sum(comorbi_16) as com_16,
sum(comorbi_17) as com_17,
sum(comorbi_18) as com_18,
sum(comorbi_19) as com_19,
sum(comorbi_20) as com_20,
sum(comorbi_21) as com_21,
sum(comorbi_22) as com_22,
sum(comorbi_23) as com_23,
sum(comorbi_24) as com_24,
sum(comorbi_25) as com_25,
sum(comorbi_26) as com_26,
sum(comorbi_27) as com_27,
sum(comorbi_28) as com_28,
sum(comorbi_29) as com_29,
sum(comorbi_30) as com_30,
sum(dementia) as com_31,
sum(cad) as com_32
from dx_31_comor_&range2
group by BID_hrs_21, id;
quit;

/*define comorbidities as binary indicators*/
data comorbidity_&range2.(keep=BID_hrs_21 id 
	comorb_1-comorb_32 comorb_all);
set com_test1_&range2;
array list_com com_1-com_30 com_31 com_32;
array list_com_bin comorb_1-comorb_30 comorb_31 comorb_32;

/*note this defines comorbidity 31 = dementia & 32 = cad*/
do over list_com;
  list_com_bin=0;

  if list_com>0 then do;
    list_com_bin=1;
   end;

end;

/*define aggregate comorbidity as sum of 30 individual indicator vars.
note: CAD not included in this aggregate score*/
comorb_all=comorb_1+comorb_2+comorb_3+comorb_4+comorb_5+comorb_6+
comorb_7+comorb_8+comorb_9+comorb_10+comorb_11+comorb_12+comorb_13+
comorb_14+comorb_15+comorb_16+comorb_17+comorb_18+comorb_19+comorb_20+
comorb_21+comorb_22+comorb_23+comorb_24+comorb_25+comorb_26+comorb_27+
comorb_28+comorb_29+comorb_30+comorb_31;
run;


proc sort data=comorbidity_&range2. nodupkey;
by BID_hrs_21 id;
run;

/*merges with list of s's with xwalk id, dod & ffs mc 6m before R's death*/
proc sql;
create table ids_w_xwalk_&range2._1(drop=BID_hrs_212 id2) as
select a.bid_hrs_21,a.id,b.* 
from spo_mc_i.index a 
left join
comorbidity_&range2.(rename=(BID_hrs_21=BID_hrs_212) rename=(id=id2))  b
on trim(left(a.bid_hrs_21))=trim(left(b.BID_hrs_212)) and
	a.id=b.id2;
quit;

/*if comorbidity=null, set to zero for this group with the ffs mc 6m*/
data elix_&range1._&range2;
set ids_w_xwalk_&range2._1;
array list comorb_1-comorb_32 comorb_all;
do over list;
	if list=. then list=0;
	end;

label comorb_1 ="Congestive Heart Failure";
label comorb_2 ="Cardiac Arrhythmias";
label comorb_3 ="Valvular Disease";
label comorb_4 ="Pulmonary Circulation Disorders";
label comorb_5 ="Peripheral Vascular Disorders";
label comorb_6 ="Hypertension";
label comorb_7 ="Paralysis";
label comorb_8 ="Other Neurological Disorders";
label comorb_9 ="Chronic Pulmonary Disease";
label comorb_10 ="Diabetes, uncomplicated";
label comorb_11 ="Diabetes, complicated";
label comorb_12 ="Hypothyroidism";
label comorb_13 ="Renal Failure";
label comorb_14 ="Liver Disease";
label comorb_15 ="Peptic Ulcer Disease excluding bleeding";
label comorb_16 ="AIDS";
label comorb_17 ="Lymphoma";
label comorb_18 ="Metastatic Cancer";
label comorb_19 ="Solid Tumor without Metastisis";
label comorb_20 ="Rheumatoid Arthritis/Collagen Vascular Diseases";
label comorb_21 ="Coagulopathy";
label comorb_22 ="Obesity";
label comorb_23 ="Weight Loss";
label comorb_24 ="Fluid and Electrolyte Disorders";
label comorb_25 ="Blood Loss Anemia";
label comorb_26 ="Deficiency Anemias";
label comorb_27 ="Alcohol Abuse";
label comorb_28 ="Drug Abuse";
label comorb_29 ="Psychoses";
label comorb_30 ="Depression";
label comorb_31 ="Dementia";
label comorb_32 ="Coronary Artery Disease";

run;

data test;
set elix_&range1._&range2;
run;

/*calls rename macro*/
%rename(WORK,TEST,&range1._&range2);

/*rename r&s BID variables*/
data elix_&range1._&range2._2
	(rename =(id_&range1._&range2=id)
	rename =(bid_hrs_21_&range1._&range2=bid_hrs_21));
set test;
keep bid_hrs_21_&range1._&range2 id_&range1._&range2 comorb:;
run;

proc sort data=elix_&range1._&range2._2;
by bid_hrs_21 id;
run;

%mend;

/*run macro to get elixhauser comorbidities 6, 12, 24m pre and post death
resulting datasets are spo_int.elix_0d_x#m_2
x = n=before, p=after death
# = 6, 12, or 24 for time window (months) 
have id and bid_hrs_21 to merge back to dataset*/
%elixhauser(range1=0d, range2=n6m);
%elixhauser(range1=0d, range2=n12m);
%elixhauser(range1=0d, range2=n24m);

%elixhauser(range1=0d, range2=p6m);
%elixhauser(range1=0d, range2=p12m);
%elixhauser(range1=0d, range2=p24m);


/*combine the 6 sets of variables into a single dataset
then merge this into main hrs spouse dataset*/
data spo_mc_i.elix_all;
merge elix_0d_n6m_2 elix_0d_n12m_2 elix_0d_n24m_2
elix_0d_p6m_2 elix_0d_p12m_2 elix_0d_p24m_2;
by bid_hrs_21 id;
run;



H="get medicare costs by month"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/


/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(source=,equ=,name=);
data spo_mc_i.&source._meet_&name.;
set spo_mc_i.mp_meet_&name.;
if (trim(left(SSLSSNF)))&equ.="N";
run;
%mend;

%mp(source=ip,equ=~,name=24m);
%mp(source=ip,equ=~,name=p24m);
%mp(source=snf,equ=,name=24m);
%mp(source=snf,equ=,name=p24m);

%macro mp_index_dt(source=);
*get claims that overlap with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if index_date=admit_date and admit_date~=disch_date;
admit_on_index_date=1;
run;


data &source._meet_both;
set spo_mc_i.&source._meet_24m;
if index_date=disch_date and admit_date=disch_date;
admit_on_index_date=1;
disch_on_index_date=1;
run;




data &source._cost;
set &source._meet_admit &source._meet_both;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
&source._paid_by_mc_index_dt=(1/(disch_date-admit_date+1))*&source._paid_by_mc;
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc_index_dt) as &source._paid_by_mc_index_dt,
sum(admit_on_index_date) as &source._admit_dod, sum(disch_on_index_date) as &source._disch_dod
from &source._cost group by BID_HRS_21,id;
quit;

%mend;
%mp_index_dt(source=ip);
%mp_index_dt(source=snf);


%macro claims_index_dt(source=);
*get claims that start with date of death;

data &source._meet_admit;
set spo_mc_i.&source._meet_24m;
if index_date=admit_date; 
run;



data &source._cost;
set &source._meet_admit;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc_index_dt=rate*(pmt_amt);
run;

proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc_index_dt) as &source._paid_by_mc_index_dt
from &source._cost group by BID_HRS_21,id;
quit;

%mend;

%claims_index_dt(source=op);
%claims_index_dt(source=pb);
%claims_index_dt(source=hh);
%claims_index_dt(source=hs);
%claims_index_dt(source=dm);

data mc_costs_doda;
merge ip_pay snf_pay op_pay pb_pay hh_pay hs_pay dm_pay ;
bid_hrs_21=bid_hrs_21;
by BID_hrs_21 id;
run;


data mc_costs_dod;
set mc_costs_doda;
tot_paid_by_mc_index_dt=ip_paid_by_mc_index_dt+snf_paid_by_mc_index_dt+op_paid_by_mc_index_dt +
pb_paid_by_mc_index_dt+hs_paid_by_mc_index_dt+dm_paid_by_mc_index_dt;
run;


%macro mp_claims(days_start=,days_bef_index=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=index_date-&days_bef_index;
win_stop_dt=index_date-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<=disch_date<win_stop_dt;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_stop_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before and end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>admit_date and
	disch_date>=win_stop_dt;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_stop_dt-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.bid_hrs_21,a.id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.index a
left join
 &source._pay b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id;
 quit;

proc sort data=&source._&name.; by bid_hrs_21 id; run;

%mend;



%macro claims(days_start=,days_bef_index=,source=,name=);

*first get claims lists for the specific claims type, not snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_24m;
win_start_dt=index_date-&days_bef_index;
win_stop_dt=index_date-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

/*identify claims where start of claim is within the x months prior to death*/
data spo_mc_i.&source._meet&name.;
set &source._meet;
if win_start_dt<=admit_date<win_stop_dt;
run;


/*adjust for inflation
Uses CPI for Medical Services from BLS website, accessed 5/4/2015*/
data &source._cost;
set spo_mc_i.&source._meet&name.;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;


&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,id;
quit;

/*merge into a full bid list of those s's with ffs at death*/
proc sql;
create table &source._&name. as select 
a.bid_hrs_21,a.id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.index a
left join
 &source._pay b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id;
 quit;

proc sort data=&source._&name.; by bid_hrs_21 id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro mp_claims_p(days_start=,days_aft_index=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=index_date+&days_aft_index;
win_start_dt=index_date+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>=admit_date and
	win_start_dt<disch_date<=win_end_dt;
run;

/*identify fraction of claims to be attributed to period after death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start within window but end after window*/
data &source._meet_4;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_end_dt-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start before window but end after window*/
data &source._meet_6;
set &source._meet;
if win_start_dt>=admit_date and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_7;
set &source._meet_6;
pct_xm=(win_end_dt -win_start_dt)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;
/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5 &source._meet_7;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.bid_hrs_21,a.id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.index a
left join
 &source._pay b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id;
 quit;

proc sort data=&source._&name.; by bid_hrs_21 id; run;

%mend;




/****************************************************************/
/*all claims, time periods after R's death********************/
/****************************************************************/
%macro claims_p(days_start=,days_aft_index=,source=,name=);

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source._meet_p24m;
win_end_dt=index_date+&days_aft_index;
win_start_dt=index_date+&days_start;
format admit_date disch_date win_end_dt win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data spo_mc_i.&source._meet&name.;
set &source._meet;
if win_start_dt<admit_date<=win_end_dt;
run;


/*adjust for inflation*/
data &source._cost;
set spo_mc_i.&source._meet&name.;
array list pmt_amt;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2012 then rate=1;
if year(admit_date)=2011 then rate=1.03902;
if year(admit_date)=2010 then rate=1.07086;
if year(admit_date)=2009 then rate=1.10835;
if year(admit_date)=2008 then rate=1.1439;
if year(admit_date)=2007 then rate=1.1923;
if year(admit_date)=2006 then rate=1.25586;
if year(admit_date)=2005 then rate=1.30783;
if year(admit_date)=2004 then rate=1.37027;
if year(admit_date)=2003 then rate=1.43908;
if year(admit_date)=2002 then rate=1.50337;
if year(admit_date)=2001 then rate=1.57963;
if year(admit_date)=2000 then rate=1.65519;
if year(admit_date)<=1999 then rate=1.72641;

&source._paid_by_mc=rate*(pmt_amt);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_21,id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_21,id;
quit;

/*merge into a full bid list of those s's with ffs mc at death*/
proc sql;
create table &source._&name. as select 
a.bid_hrs_21,a.id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.index a
left join
 &source._pay b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id;
 quit;

proc sort data=&source._&name.; by bid_hrs_21 id; run;

%mend;

%macro days_nesting();

%do i=1 %to 24 ;


%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=snf,  name=m&i.);
%mp_claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=ip,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=pb,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=op,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=hh,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=hs,  name=m&i.);
%claims(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), source=dm,  name=m&i.);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=snf,  name=m&i.p);
%mp_claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=ip,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=op,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=pb,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=hh,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=hs,  name=m&i.p);
%claims_p(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417), source=dm,  name=m&i.p);


%end;
%mend;

%days_nesting();




%macro merge(l=,source=,time=,p=);
data &source._&time._m1;
set &source._m1&p.;
run;

%do i=2 %to 24 ;
%let l = %eval(&i.-1) ;

data &source._&time._m&i.;
merge &source._&time._m&l. &source._m&i.&p.;
run;
%end;

data &source._&time.;
set &source._&time._m24;
run;
%mend;

%merge(source=ip,time=bef,p=);
%merge(source=ip,time=aft,p=p);
%merge(source=snf,time=bef,p=);
%merge(source=snf,time=aft,p=p);
%merge(source=op,time=bef,p=);
%merge(source=op,time=aft,p=p);
%merge(source=pb,time=bef,p=);
%merge(source=pb,time=aft,p=p);
%merge(source=hh,time=bef,p=);
%merge(source=hh,time=aft,p=p);
%merge(source=hs,time=bef,p=);
%merge(source=hs,time=aft,p=p);
%merge(source=dm,time=bef,p=);
%merge(source=dm,time=aft,p=p);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all;
merge ip_bef snf_bef op_bef pb_bef hh_bef hs_bef dm_bef 
ip_aft snf_aft op_aft pb_aft hh_aft hs_aft dm_aft;
by bid_hrs_21 id;
run;

%macro total();

data mc_costs_all2;
set mc_costs_all;
%do i=1 %to 24;
tot_paid_by_mc_m&i.=ip_paid_by_mc_m&i. + snf_paid_by_mc_m&i. + op_paid_by_mc_m&i. + 
pb_paid_by_mc_m&i. + hh_paid_by_mc_m&i. + hs_paid_by_mc_m&i. + dm_paid_by_mc_m&i.;
tot_paid_by_mc_m&i.p=ip_paid_by_mc_m&i.p + snf_paid_by_mc_m&i.p + op_paid_by_mc_m&i.p + 
pb_paid_by_mc_m&i.p + hh_paid_by_mc_m&i.p + hs_paid_by_mc_m&i.p + dm_paid_by_mc_m&i.p;
%end;
run;
%mend;

%total();

data mc_costs_all3;
merge mc_costs_all2 mc_costs_dod;
by  bid_hrs_21 id;
run;

/*save permanent dataset*/
data spo_mc_i.mc_costs_monthly;
set mc_costs_all3;
run;



H="other utilization by month"




/*additional outcome variables

Spouse - monthly pre and post R's death:
Hospital # visits
Hospital nights
# ED visits
# OP visits*/


/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2012$, monthly, 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

proc sort data=spo_mc_i.index out=index1a nodupkey;
by bid_hrs_21 index_year;
run;



/*****************************************************************************/
/*get admissions and ip ed visits from ip claims monthly pre R's death*/
/*****************************************************************************/




%macro pre_admissions(days_start=,days_bef_index=,suffix=,su=);

/*pull list of ip claims from all medpar claims x days pre-death*/
data ip_meet_&suffix._1a;
set spo_mc_i.ip_meet_24m(where=(trim(left(SSLSSNF))~="N"));
win_start_dt=index_date-&days_bef_index;
win_stop_dt=index_date-&days_start;
format admit_date disch_date win_start_dt win_stop_dt date9.;
run;

data ip_meet_&suffix._1;
set ip_meet_&suffix._1a;
if win_start_dt<=admit_date<=win_stop_dt or 
win_start_dt<=disch_date<=win_stop_dt;
run;

data ip_&suffix._2;
set ip_meet_&suffix._1;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;


/*truncate stays where the admit is before x days pre- R's death
or discharge is after R's death so can get accurate LOS*/
admit_date2=admit_date;
disch_date2=disch_date;
if admit_date<win_start_dt then do;
	admit_date2=win_start_dt;
	admit_trunc=1;
	end;
if win_stop_dt <disch_date then do;
	disch_date2=win_stop_dt;
	disch_trunc=1;	
	end;
adj_los=disch_date2-admit_date2;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*first, check if mental health is the admitting diagnosis*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;



proc sort data=ip_&suffix._2a;
by BID_hrs_21 id;
run;

proc sql;
create table ip_&suffix._3a as select distinct BID_hrs_21,id,
/*total ICU days*/
sum(icu_days) as icu_days_&suffix. label="total icu days &suffix.",
/*total Hospital LOS*/
sum(adj_los) as n_hospd_&suffix. label="total hospital days &suffix."
from ip_&suffix._2a group by BID_hrs_21,id;
quit;

data ip_&suffix._2b;
set ip_&suffix._2a;
if win_start_dt<=admit_date<win_stop_dt;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;
run;

proc sql;
create table ip_&suffix._3b as select distinct BID_hrs_21,id,
/*count of IP admissions, all types*/
count(*) as n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."
 from ip_&suffix._2b group by BID_hrs_21,id;
quit;

proc sql;
create table ip_&suffix._3 as select *
from ip_&suffix._3a a 
left join ip_&suffix._3b b
on a.bid_hrs_21=b.bid_hrs_21;
quit;

data ip_&suffix.;
set ip_&suffix._3;
if icu_days_&suffix.>n_hospd_&suffix. then icu_days_&suffix.=n_hospd_&suffix.;
run;




proc sort data=ip_&suffix.; by bid_hrs_21 id; run;

%mend;

/*****************************************************************************/
/*get admissions and ip ed visits from ip claims monthly post R's death*/
/*****************************************************************************/
%macro post_admissions(days_start=,days_aft_index=,suffix=);

/*pull list of ip claims from all medpar claims x days post-death*/
data ip_meet_&suffix._1a;
set spo_mc_i.ip_meet_p24m;
win_stop_dt=index_date+&days_aft_index;
win_start_dt=index_date+&days_start;
format admit_date disch_date win_stop_dt win_start_dt date9.;
run;

data ip_meet_&suffix._1;
set ip_meet_&suffix._1a;
if win_start_dt<=admit_date<=win_stop_dt or 
win_start_dt<=disch_date<=win_stop_dt;
run;

data ip_&suffix._2;
set ip_meet_&suffix._1;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;


/*truncate stays where the admit is before R's death
or discharge is after the x days after R's death so can get accurate LOS*/
admit_date2=admit_date;
disch_date2=disch_date;
if admit_date<win_start_dt then do;
	admit_date2=win_start_dt;
	admit_trunc=1;
	end;
if win_stop_dt<disch_date then do;
	disch_date2=win_stop_dt;
	disch_trunc=1;	
	end;
adj_los=disch_date2-admit_date2;
if disch_date-admit_date=0 then adj_los=1;
run;

/*determine if mental health dx is present in the IP claim*/
data ip_&suffix._2a;
set ip_&suffix._2;
/*determine if mental health dx is admitting dx for hospitalization*/
adm_mental_ill=0;

/*dx list from the AHRQ CCS Multi dx Tool, 2015, for Mental Illness Level 1 category*/
	if (substr(ad_dgns,1,3)='290' or
		substr(ad_dgns,1,3)='291' or
		substr(ad_dgns,1,3)='292' or
		substr(ad_dgns,1,3)='293' or
		substr(ad_dgns,1,3)='294' or
		substr(ad_dgns,1,3)='295' or
		substr(ad_dgns,1,3)='296' or
		substr(ad_dgns,1,3)='297' or
		substr(ad_dgns,1,3)='298' or
		substr(ad_dgns,1,3)='299' or
		substr(ad_dgns,1,3)='300' or
		substr(ad_dgns,1,3)='301' or
		substr(ad_dgns,1,3)='302' or
		substr(ad_dgns,1,3)='303' or
		substr(ad_dgns,1,3)='304' or
		substr(ad_dgns,1,3)='305' or
		substr(ad_dgns,1,3)='306' or
		substr(ad_dgns,1,3)='307' or
		substr(ad_dgns,1,3)='308' or
		substr(ad_dgns,1,3)='309' or
		substr(ad_dgns,1,3)='310' or
		substr(ad_dgns,1,3)='311' or
		substr(ad_dgns,1,3)='312' or
		substr(ad_dgns,1,3)='313' or
		substr(ad_dgns,1,3)='314' or
		substr(ad_dgns,1,3)='315' or
		substr(ad_dgns,1,3)='316' or
		substr(ad_dgns,1,3)='317' or
		substr(ad_dgns,1,3)='318' or
		substr(ad_dgns,1,3)='319' or
		substr(ad_dgns,1,4)='3310' or
		substr(ad_dgns,1,4)='3311' or
		substr(ad_dgns,1,4)='3312' or
		substr(ad_dgns,1,5)='33182' or
		substr(ad_dgns,1,5)='33392' or
		substr(ad_dgns,1,4)='3575' or
		substr(ad_dgns,1,4)='4255' or
		substr(ad_dgns,1,4)='5353' or
		substr(ad_dgns,1,4)='5710' or
		substr(ad_dgns,1,4)='5711' or
		substr(ad_dgns,1,4)='5712' or
		substr(ad_dgns,1,4)='5713' or
		substr(ad_dgns,1,4)='6483' or
		substr(ad_dgns,1,4)='6484' or
		substr(ad_dgns,1,4)='6555' or
		substr(ad_dgns,1,5)='76071' or
		substr(ad_dgns,1,5)='76072' or
		substr(ad_dgns,1,5)='76073' or
		substr(ad_dgns,1,5)='76075' or
		substr(ad_dgns,1,4)='7795' or
		substr(ad_dgns,1,4)='7903' or
		substr(ad_dgns,1,3)='797' or 
		substr(ad_dgns,1,4)='9650' or
		substr(ad_dgns,1,4)='9800' or
		substr(ad_dgns,1,3)='E95' or
		substr(ad_dgns,1,3)='V11' or
		substr(ad_dgns,1,4)='V154' or
		substr(ad_dgns,1,5)='V1582' or
		substr(ad_dgns,1,3)='V40' or
		substr(ad_dgns,1,5)='V6284' or
		substr(ad_dgns,1,5)='V6285' or
		substr(ad_dgns,1,5)='V6542' or
		substr(ad_dgns,1,4)='V663' or
		substr(ad_dgns,1,4)='V673' or
		substr(ad_dgns,1,4)='V701' or
		substr(ad_dgns,1,4)='V702' or
		substr(ad_dgns,1,4)='V710' or
		substr(ad_dgns,1,3)='V79') 
		and adm_mental_ill=0 
		then adm_mental_ill=1;*set to 1 if not flagged already;

	   /*now check if mental illness is any of the diagnoses present for the claim*/
any_dx_mental_ill=0;
array dx DGNS_CD01-DGNS_CD25 ;
do over dx;
	if (substr(dx,1,3)='290' or
		substr(dx,1,3)='291' or
		substr(dx,1,3)='292' or
		substr(dx,1,3)='293' or
		substr(dx,1,3)='294' or
		substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,3)='299' or
		substr(dx,1,3)='300' or
		substr(dx,1,3)='301' or
		substr(dx,1,3)='302' or
		substr(dx,1,3)='303' or
		substr(dx,1,3)='304' or
		substr(dx,1,3)='305' or
		substr(dx,1,3)='306' or
		substr(dx,1,3)='307' or
		substr(dx,1,3)='308' or
		substr(dx,1,3)='309' or
		substr(dx,1,3)='310' or
		substr(dx,1,3)='311' or
		substr(dx,1,3)='312' or
		substr(dx,1,3)='313' or
		substr(dx,1,3)='314' or
		substr(dx,1,3)='315' or
		substr(dx,1,3)='316' or
		substr(dx,1,3)='317' or
		substr(dx,1,3)='318' or
		substr(dx,1,3)='319' or
		substr(dx,1,4)='3310' or
		substr(dx,1,4)='3311' or
		substr(dx,1,4)='3312' or
		substr(dx,1,5)='33182' or
		substr(dx,1,5)='33392' or
		substr(dx,1,4)='3575' or
		substr(dx,1,4)='4255' or
		substr(dx,1,4)='5353' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5711' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='6483' or
		substr(dx,1,4)='6484' or
		substr(dx,1,4)='6555' or
		substr(dx,1,5)='76071' or
		substr(dx,1,5)='76072' or
		substr(dx,1,5)='76073' or
		substr(dx,1,5)='76075' or
		substr(dx,1,4)='7795' or
		substr(dx,1,4)='7903' or
		substr(dx,1,3)='797' or 
		substr(dx,1,4)='9650' or
		substr(dx,1,4)='9800' or
		substr(dx,1,3)='E95' or
		substr(dx,1,3)='V11' or
		substr(dx,1,4)='V154' or
		substr(dx,1,5)='V1582' or
		substr(dx,1,3)='V40' or
		substr(dx,1,5)='V6284' or
		substr(dx,1,5)='V6285' or
		substr(dx,1,5)='V6542' or
		substr(dx,1,4)='V663' or
		substr(dx,1,4)='V673' or
		substr(dx,1,4)='V701' or
		substr(dx,1,4)='V702' or
		substr(dx,1,4)='V710' or
		substr(dx,1,3)='V79') 
		and any_dx_mental_ill=0 
		then any_dx_mental_ill=1;*set to 1 if not flagged already;
	end;

run;


proc sort data=ip_&suffix._2a;
by BID_hrs_21 id;
run;

proc sql;
create table ip_&suffix._3a as select distinct BID_hrs_21,id,
/*total ICU days*/
sum(icu_days) as icu_days_&suffix. label="total icu days &suffix.",
/*total Hospital LOS*/
sum(adj_los) as n_hospd_&suffix. label="total hospital days &suffix."
from ip_&suffix._2a group by BID_hrs_21,id;
quit;

data ip_&suffix._2b;
set ip_&suffix._2a;
if win_start_dt<admit_date<=win_stop_dt;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;
run;

proc sql;
create table ip_&suffix._3b as select distinct BID_hrs_21,id,
/*count of IP admissions, all types*/
count(*) as n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix.",
/*count of admissions for mental illness, per admitting dx*/
count(case when adm_mental_ill=1 then adm_mental_ill else . end) as n_mental_ill_adm_dx_ip_&suffix. 
	label="total n of admissions admit dx=mental illness &suffix.",
/*count of admissions for mental illness, per any dx code*/
count(case when any_dx_mental_ill=1 then any_dx_mental_ill else . end) as n_mental_ill_any_dx_ip_&suffix. 
	label="total n of admissions with any dx of mental illness &suffix."
 from ip_&suffix._2b group by BID_hrs_21,id;
quit;

proc sql;
create table ip_&suffix._3 as select *
from ip_&suffix._3a a 
left join ip_&suffix._3b b
on a.bid_hrs_21=b.bid_hrs_21;
quit;

data ip_&suffix.;
set ip_&suffix._3;
if icu_days_&suffix.>n_hospd_&suffix. then icu_days_&suffix.=n_hospd_&suffix.;
run;



proc sort data=ip_&suffix.; by bid_hrs_21 id; run;

%mend;



/*****************************************************************************/
/*get outpatient visits and ed use from op claims monthly pre and post R's death*/
/*****************************************************************************/
%macro op(days=,suffix=);

data op_meet_&suffix.;
set spo_mc_i.op_meet&suffix.(keep=bid_hrs_21 id admit_date disch_date 
	index_date RVCNTR01-RVCNTR45);
run;

proc sort data=op_meet_&suffix.; by bid_hrs_21 id admit_date; run;

data ed_op_&suffix._1;
set op_meet_&suffix.;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;



proc sql;
create table op_&suffix. as select distinct bid_hrs_21,id,
count(case when ed_op=1 then ed_op else . end)
	as n_ed_op_visits_&suffix. label="n of OP ED visits &suffix.",
count(*) as n_op_visits_&suffix. label="n OP visits &suffix."
	from ed_op_&suffix._1 group by bid_hrs_21,id;
quit;


proc sort data=op_&suffix.; by bid_hrs_21 id; run;

%mend;

%macro claims_nesting();

%do i=1 %to 24 ;
%pre_admissions(days_start=floor((&i.-1)*30.417),days_bef_index=floor(&i.*30.417), suffix=m&i.,su=m&i.);
%post_admissions(days_start=floor((&i.-1)*30.417),days_aft_index=floor(&i.*30.417),suffix=m&i.p);
%op(suffix=m&i.);
%op(suffix=m&i.p);
%end;
%mend;
%claims_nesting();

data ip_meet_24m;
set spo_mc_i.ip_meet_24m;
run;

%pre_admissions(days_start=-1,days_bef_index=0,suffix=dod,su=_24m);
proc sql;
create table op_meet_dod1 as select * from
index1a a 
left join medi.op_2000_2012 b
on a.bid_hrs_21=b.bid_hrs_21 and a.index_date=b.admit_date;
quit;

data op_meet_dod;
set op_meet_dod1(keep=bid_hrs_21 id admit_date disch_date 
	index_date RVCNTR01-RVCNTR45);
run;
data op_meet_doda;
set op_meet_dod(where=(admit_date=index_date));
run;
proc sort data=op_meet_doda; by bid_hrs_21 id admit_date; run;

data ed_op_dod_1;
set op_meet_doda;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;


proc sql;
create table op_0 as select distinct bid_hrs_21,id,
count(case when ed_op=1 then ed_op else . end)
	as n_ed_op_visits_dod label="n of OP ED visits dod",
count(*) as n_op_visits_dod label="n OP visits dod"
	from ed_op_dod_1 group by bid_hrs_21,id;
quit;


proc sort data=op_0; by bid_hrs_21 id; run;

data ip_0;
set ip_dod;
run;

proc sort data=ip_0; by bid_hrs_21 id; run;
%macro claims_all(source=,);
data &source._all_1;
merge &source._0 &source._m1 &source._m1p;
by bid_hrs_21 id;
run;


%do i=2 %to 24 ;
%let l=%eval(&i-1);
data &source._all_&i.;
merge &source._all_&l. &source._m&i. &source._m&i.p;
by bid_hrs_21 id;
run;
%end;

data &source._all;
set &source._all_24;
run;

%mend;

%claims_all(source=ip);
%claims_all(source=op);

/*now bring in to list of obs with ffs medicare at R's death*/
proc sql;
create table add_ip(drop=id2) as select 
a.bid_hrs_21,a.id,b.*
from spo_mc_i.index a
left join
ip_all(rename=(id=id2)) b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id2;
 quit;

proc sql;
create table spo_mc_i.op_ip_monthly(drop=id2) as select *
from add_ip a
left join
op_all(rename=(id=id2)) b
 on trim(left(a.bid_hrs_21))=trim(left(b.bid_hrs_21)) and a.id=b.id2;
 quit;



H="merge hrs info & death date"
/*Get spouse's n1, n2, and p1 core interviews
and s's exit interview and restricted data*/

/*******************************************************************/
/*******************************************************************/
/******         Spouse n1 interview                         ********/ 
/*******************************************************************/
/*******************************************************************/
data index1a;
set spo_mc_i.index;
run;

data core;
set hrs_cln.core_00_to_12;
run;
/*get list of all spouse core interviews before r's death date*/
proc sql;
create table s_n1_before_index
as select b.*,a.id
 from index1a a 
 inner join
core b
  on a.id=b.id and a.index_date>b.c_ivw_date;
  quit;

proc sort data=s_n1_before_index ;
by id c_ivw_date;
run;

/*just keep the n1 core interview for the spouse
**3021 interviews*/
data core_n1;
set s_n1_before_index;
by id c_ivw_date;
if last.id;
run;

proc freq;
table core_year;
run;

/*******************************************************************/
/*******************************************************************/
/******         Spouse n2 interview                         ********/ 
/*******************************************************************/
/*******************************************************************/
proc sql;
create table s_n2_before_index
as select b.*,a.id
 from core_n1 a 
 inner join
core b
  on a.id=b.id and a.c_ivw_date>b.c_ivw_date;
  quit;

proc sort data=s_n2_before_index ;
by id c_ivw_date;
run;

/*just keep the n2 core interview for the spouse
**2938 interviews*/
data core_n2;
set s_n2_before_index;
by id c_ivw_date;
if last.id;
run;

proc freq;
table core_year;
run;


/*******************************************************************/
/*******************************************************************/
/******         Spouse p1 interview                         ********/ 
/*******************************************************************/
/*******************************************************************/

/*get list of all spouse core interviews after r's death date*/
proc sql;
create table s_p1_core_after_index
as select b.*,a.id
 from index1a a 
 inner join
core b
  on a.id=b.id and a.index_date<b.c_ivw_date;
  quit;

proc sort data=s_p1_core_after_index ;
by id c_ivw_date;
run;

/*just keep the p1 core interview for the spouse
**2682 interviews*/
data core_p1;
set s_p1_core_after_index;
by id c_ivw_date;
if first.id;
run;

proc freq;
table core_year;
run;


/*******************************************************************/
/*******************************************************************/
/******         Spouse restricted data, add xwalk id        ********/ 
/*******************************************************************/
/*******************************************************************/

data restricted1;
set hrs_cln.restr_tracker_v2012;
run;

/*replace id with character id so restricted dataset can be merged in
to the exit dataset*/
data restricted2;
set restricted1;
length id_new $9 hhid $6 pn $3;
id_new=hhid||pn;
drop id;
rename id_new=id;
run;

/*get restricted dataset that is just decedents*/
proc sql;
create table restricted as select * from
restricted2 where id in (select id from index1a);
quit;


/*******************************************************************/
/*******************************************************************/
/******         Exit interview                       ********/ 
/*******************************************************************/
/*******************************************************************/

data exit_1;
set hrs_cln.exit_02_to_12_dt;
run;

/*First rename variables*/
%macro rename2(lib,dsn,pre);
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "Before Renaming All Variables";
run;
proc sql noprint;
select nvar into :num_vars
from dictionary.tables
where libname="&LIB" and
memname="&DSN";
select distinct(name) into :var1-
:var%TRIM(%LEFT(&num_vars))
from dictionary.columns
where libname="&LIB" and
memname="&DSN" ;
quit;
run;
proc datasets library=&LIB;
modify &DSN;
rename
%do i=1 %to &num_vars;

&&var&i=&&var&i.&&pre.
%end;
;
quit;
run;
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "After Renaming All Variables";
run;
%mend ;

%rename2(WORK,CORE_P1,_p1);
%rename2(WORK,CORE_N1,_n1);
%rename2(WORK,CORE_N2,_n2);

%rename2(WORK,RESTRICTED,_e);
%rename2(WORK,EXIT_1,_x);




/*s's p1 core*/
data core_p1_a;
set core_P1;
rename id_p1 = id; 
run;

proc sort data=core_p1_a nodupkey;
by id;
run;

/*s's n1 core*/
data core_n1_a;
set core_N1;
rename id_n1 = id;
run;

proc sort data=core_n1_a nodupkey;
by id;
run;

/*s's n2 core*/
data core_n2_a;
set core_N2;
rename id_n2 = id;
run;

proc sort data=core_n2_a nodupkey;
by id;
run;

/*s's restricted (no id in this dataset)*/
data restricted_a;
set restricted;
rename id_e = id ;
run;

proc sort data=restricted_a nodupkey;
by id;
run;

/*s's exit (no id in this dataset)*/
data exit_1_a1;
set EXIT_1;
rename id_x = id; 
run;

proc sql;
create table exit_1_a as select * from 
index1a a 
left join
exit_1_a1 b
on a.id=b.id;
quit;

proc sort data=exit_1_a nodupkey;
by id;
run;

/*merge datasets*/
/*Step 1, merge r's interviews with exit/restricted dataset*/
/*Sort r's exit and restricted dataset including r and s xwalk ids*/
proc sort data=index1a out=index2;
by id;
run;

data allhrs;
merge index2 core_n1_a core_n2_a core_p1_a exit_1_a restricted_a;
by id;
run;

/*now get death date from Karen's dataset*/
data death;
set hrs_cln.death_date_2012;
run;

proc sql;
create table spo_mc_i.hrs as select a.*,b.death_all from
allhrs a 
left join 
death b 
on a.id=b.id;
quit;



H="regional data"
/*get zip code for index year*/

data index1;
set spo_mc_i.index;
run;

data trackera;
set hrs_cln.restr_tracker_v2012(keep=id hhid pn zip:stateusps:);
if id~=.;
rename zip10_2010=ZIP10;
drop zip10_2000 zip92-zip96 stateusps92-stateusps96;
drop id;
run;

data trackerb(drop=hhid pn);
set trackera;
id=hhid || pn;
ZIP01=ZIP00;
zip03=zip02;
zip05=zip04;
zip07=zip08;
zip09=zip08;
zip11=ZIP10;
stateusps01=stateusps00;
stateusps03=stateusps02;
stateusps05=stateusps04;
stateusps07=stateusps08;
stateusps09=stateusps08;
stateusps11=stateusps10;
run;

data trackerc;
set trackerb;
if zip00='' then zip00=zip98;
if zip02='' then zip02=zip00;
if zip04='' then zip04=zip02;
if zip06='' then zip06=zip04;
if zip08='' then zip08=zip06;
if zip10='' then zip10=zip08;
if zip12='' then zip12=zip10;
if zip01='' then zip01=zip02;
if zip03='' then zip03=zip04;
if zip05='' then zip05=zip06;
if zip07='' then zip07=zip08;
if zip09='' then zip09=zip10;
if zip11='' then zip11=zip12;
if stateusps00='' then stateusps00=stateusps98;
if stateusps02='' then stateusps02=stateusps00;
if stateusps04='' then stateusps04=stateusps02;
if stateusps06='' then stateusps06=stateusps04;
if stateusps08='' then stateusps08=stateusps06;
if stateusps10='' then stateusps10=stateusps08;
if stateusps12='' then stateusps12=stateusps10;
if stateusps01='' then stateusps01=stateusps02;
if stateusps03='' then stateusps03=stateusps04;
if stateusps05='' then stateusps05=stateusps06;
if stateusps07='' then stateusps07=stateusps08;
if stateusps09='' then stateusps09=stateusps10;
if stateusps11='' then stateusps11=stateusps12;
run;

proc sort data=trackerc out=tracker;
by id;
run;

proc transpose data=tracker out=tracker1;
by id;
var zip00-zip12;
run;

data tracker2(keep=id zip index_year);
set tracker1(rename=(col1=zip1));
index_year=input(substr(_name_,4),5.)+2000;
zip=zip1+0;
run;

proc transpose data=tracker out=tracker3;
by id;
var stateusps00-stateusps12;
run;

data tracker4(keep=id stateusps index_year);
set tracker3(rename=(col1=stateusps));
index_year=input(substr(_name_,10),5.)+2000;
run;

proc sql;
create table zip as select * from
index1 a 
left join tracker2 b
on a.id=b.id and a.index_year=b.index_year
left join tracker4 c
on a.id=c.id and a.index_year=c.index_year;
quit;

data zip_cb;
set dartm.xtract(keep=zip5 cbsa state metrodiv);
if metrodiv~='' then cbsa=metrodiv;
zip_n=zip5+0;
cbsa_n=cbsa+0;
/*If zip code is not missing, add state code*/
if zip_n~=.;
state_n=state+0;
run;

proc sort data=zip_cb out=zip_cb2 nodupkey;
by zip_n cbsa_n;
run;

/*note several zip codes have multiple cbsa*/
/*create dataset with just one entry for each zip code
8029 zip codes have more than one cbsa code
Just use the first one when sort*/
proc sort data=zip_cb2 out=cbsa_zip_final nodupkey;
by zip_n;
run;

*Check to see zip codes in a cbsa code for Rochester, NY;
proc sql;
select zip_n, cbsa from cbsa_zip_final
where cbsa_n in (40380);
quit;



/*bring in 2012 wage index file*/
data wage_index;
set dart_wi.wage_index_2012;
run;

/*for zip codes with no cbsa, wage index is left missing
there are also many cbsas with missing wage index*/
proc sql;
create table zip_cbsa_wage_index as
select a.*,b.wage_index_2012 from
cbsa_zip_final a
left join
wage_index b
on a.cbsa_n=b.cbsa_n;
quit;

/*Check for and remove duplicates by zip, keep first entry*/
proc sort data=zip_cbsa_wage_index out=zip_cbsa_wage_index2 nodupkey;
by zip_n;
run;

/******************************************************************/
/* Merge the wage index into the interview dataset by the cleaned zip */
/******************************************************************/

proc sql;
create table zip_wi as select a.*,b.wage_index_2012 from 
zip a 
left join
zip_cbsa_wage_index2 b
on a.zip=b.zip_n;
quit;


/*n=76792 ivws are missing the wage index when matched just by zip*/
data miss_wi;
set zip_wi;
if wage_index_2012 =.;
run;

/******************************************************************/
/* Bring in  WI by state if missing by zip (b/c not in a metro area) */
/******************************************************************/
proc sort data=wage_index out=wage_index3 nodupkey;
by state_in_wage_index;
run;

data wage_index4; set wage_index3; if state_in_wage_index~='';
run;


/*Merges in wage index if there's one for the state but was missing for the zip*/
proc sql;
create table zip_wi_2
as select a.*,coalesce(a.wage_index_2012,b.wage_index_2012) as wage_index_2012_2
from
zip_wi a
left join
wage_index4 b
on a.stateusps=b.ST;
quit;

/*check for missing values*/
proc means;
var wage_index_2012 wage_index_2012_2;
run;



data spo_mc_i.zip_wi;
set zip_wi_2;
/* create census regions */
if stateusps in ('CT','ME','MA','NH','RI','VT','NJ','NY','PA') then REGION=1;
   else if stateusps in ('IN','IL','MI','OH','WI','IA','KS','MN','MO','NE','ND','SD') then REGION=2;
   else if stateusps in ('DE','DC','FL','GA','MD','NC','SC','VA','WV','AL','KY','MS','TN',
        'AR','LA','OK','TX' ) then REGION=3;
   else if stateusps in ('AZ','CO','ID','NM','MT','UT','NV','WY','AK','CA','HI','OR','WA') then REGION=4;
/*create census divisions */
if stateusps in ('CT','ME','MA','NH','RI','VT') then DIVISION=1;
   else if stateusps in ('NJ','NY','PA') then DIVISION=2;
   else if stateusps in ('IN','IL','MI','OH','WI') then DIVISION=3;
   else if stateusps in ('IA','KS','MN','MO','NE','ND','SD') then DIVISION=4;
   else if stateusps in ('DE','DC','FL','GA','MD','NC','SC','VA','WV') then DIVISION=5;
   else if stateusps in ('AL','KY','MS','TN') then DIVISION=6;
   else if stateusps in ('AR','LA','OK','TX' ) then DIVISION=7;
   else if stateusps in ('AZ','CO','ID','NM','MT','UT','NV','WY') then DIVISION=8;
   else if stateusps in ('AK','CA','HI','OR','WA') then DIVISION=9;

/* create medicaid eligibility groupings: =>138% or <138% */
if stateusps in ('AL','AK','FL','GA','ID','KS','LA','ME','MS','MO','MT','NE','NC',
        'OK','SC','SD','TN','TX','UT','VA','WI','WY') then MEDICAID_138=0;
   else if stateusps in ('AR','AZ','CA','CO','CT','DE','DC','HI','IN','IL','IA',
        'KY','MA','MI','MN','MD','NH','ND','NM','NV','NJ','NY','OH','OR','PA',
        'RI','VT','WV','WA') then MEDICAID_138=1;
label region='Census Region: 1=NE,2=MW,3=S,4=W';
label division='Census Division';
label medicaid_138='Medicaid eligibility GE 138% FPL';
run;



H="combine all and export to stata"
proc sort data=spo_mc_i.hrs out=hrs;
by id;
run;

proc sort data=spo_mc_i.mc_costs_monthly out=costs;
by id;
run;

proc sort data=spo_mc_i.elix_all out=elix;
by id;
run;

proc sort data=spo_mc_i.continuous_ffs out=ffs;
by id;
run;

proc sort data=spo_mc_i.op_ip_monthly out=util;
by id;
run;

proc sort data=spo_mc_i.zip_wi out=wi;
by id; 
run;

data spouse_claims_comparison;
merge hrs costs elix ffs util wi;
by id;
run;

proc export data=spouse_claims_comparison
outfile="E:\data\spouse_claims\data\int_data\spouse_claims_comparison.dta" replace;
run;

H="variable setup in stata"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\2-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'

use spouse_claims_comparison.dta
*********************************************************
gen age=(index_date-birth_date)/365.25

//temporary patch to get total index_dt spending (claims admit_dt index_dt)

foreach y in tot ip snf op pb hh hs dm {
	replace `y'_paid_by_mc_index_dt=0 if `y'_paid_by_mc_index_dt==.
}
replace tot_paid_by_mc_index_dt=ip_paid_by_mc_index_dt+ ///
 snf_paid_by_mc_index_dt+op_paid_by_mc_index_dt + ///
 pb_paid_by_mc_index_dt+hs_paid_by_mc_index_dt+dm_paid_by_mc_index_dt


gen inscope_n_mos=cont_ffs_n_mos
gen inscope_p_mos=cont_ffs_p_mos

foreach x in tot ip snf op pb hh hs dm {
	forvalues i=1/24 {
		replace `x'_paid_by_mc_m`i'=. if inscope_n_mos<`i'
		replace `x'_paid_by_mc_m`i'p=. if inscope_p_mos<`i'

}
}

foreach x in n_ip_admit_ n_hospd_ n_op_visits_ {
	forvalues i=1/24 {
		replace `x'm`i'=. if inscope_n_mos<`i'
		replace `x'm`i'p=. if inscope_p_mos<`i'
		replace `x'm`i'=0 if inscope_n_mos>=`i'&`x'm`i'==.
		replace `x'm`i'p=0 if inscope_p_mos>=`i'&`x'm`i'p==.

}
}

//spouse medicare spending variables
local mcsp tot_paid_by_mc_ ip_paid_by_mc_ snf_paid_by_mc_ op_paid_by_mc_ ///
pb_paid_by_mc_ hh_paid_by_mc_ hs_paid_by_mc_ dm_paid_by_mc_

//replace wage index=1 if wage index is missing
gen wage_index_missing=wage_index_2012_2==.
replace wage_index_2012_2=1 if wage_index_2012_2==.
//monthly
forvalues i=1/24 {
	foreach v in `mcsp' {
		gen `v'wi_m`i'=`v'm`i'/wage_index_2012_2
		gen `v'wi_m`i'p=`v'm`i'p/wage_index_2012_2
}
}
//at death
foreach v in `mcsp' {	
		replace `v'index_dt=0 if `v'index_dt==.
		gen `v'wi_index_dt=`v'index_dt/wage_index_2012_2
}

local sutil n_ip_admit_ n_hospd_ n_op_visits_ 
local rutil r_n_ip_admit_ r_n_hospd_ r_n_op_visits_

foreach x in `sutil' {
	foreach p in "" "p" {
		forvalues i= 1(3)24 {
			gen `x'm_`i'_to_`=`i'+2'`p'=0 if `x'm`i'`p'!=.
			foreach j in 0 1 2  {
				replace `x'm_`i'_to_`=`i'+2'`p'=`x'm_`i'_to_`=`i'+2'`p'+ ///
				 `x'm`=`i'+`j''`p' if `x'm`=`i'+`j''`p'!=.
}
}
}
replace `x'm_1_to_3=`x'm_1_to_3 + `x'dod if `x'dod!=.
}

//note--this is a patch; needs to be changed in the sas program-get mc claims lists
replace n_ip_admit_m_1_to_3=n_ip_admit_m_1_to_3 +ip_admit_dod if ip_admit_dod!=.

foreach x in tot ip snf op pb hh hs dm {
	forvalues i= 1(3)24 {
		gen `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'=`x'_paid_by_mc_wi_m`i' 
		foreach j in 1 2  {
			replace `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'= ///
			 `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'+`x'_paid_by_mc_wi_m`=`i'+`j'' ///
			 if `x'_paid_by_mc_wi_m`=`i'+`j''!=.
}

		gen `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p=`x'_paid_by_mc_wi_m`i'p 
		foreach j in 1 2 {
			replace `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p= ///
			 `x'_paid_by_mc_wi_m_`i'_to_`=`i'+2'p +`x'_paid_by_mc_wi_m`=`i'+`j''p ///
			 if `x'_paid_by_mc_wi_m`=`i'+`j''p!=.

}
}
	replace `x'_paid_by_mc_wi_m_1_to_3=`x'_paid_by_mc_wi_m_1_to_3+ ///
	 `x'_paid_by_mc_wi_index_dt if `x'_paid_by_mc_wi_index_dt!=.

}

forvalues i=1/24 {
	foreach p in "" "p" {
		gen ip_admit_ind_m`i'`p'=n_ip_admit_m`i'`p'>=1 if n_ip_admit_m`i'`p'!=.
}
}
replace ip_admit_ind_m1=1 if ip_admit_dod==1

forvalues i=1(3)24 {
	foreach p in "" "p" {
		gen ip_admit_ind_m_`i'_to_`=`i'+2'`p'=n_ip_admit_m_`i'_to_`=`i'+2'`p'>=1 ///
		 if n_ip_admit_m_`i'_to_`=`i'+2'`p'!=.
}
}


*********************************************************
/*
//create indicator variables for S any hospitalization, hosp due to mental illness,
//ICU use, and ED use
foreach t in 6m 12m 18m 24m p6m p12m p18m p24m{
	gen icu_ind_`t'=1 if icu_days_`t'>0 & icu_days_`t'!=.
	replace icu_ind_`t'=0 if icu_days_`t'==0
	la var icu_ind_`t' "S Any ICU use `t'"
	la var icu_days_`t' "S ICU days `t'"
	
	gen admit_ind_`t'=1 if n_ip_admit_`t'>0 & n_ip_admit_`t'!=.
	replace admit_ind_`t'=0 if n_ip_admit_`t'==0
	la var admit_ind_`t' "S Any Hospitalization `t'"
	la var n_ip_admit_`t' "S Number hospitalizations `t'"
	
	la var n_hospd_`t' "S Hospital days `t'"
	
	gen ed_ind_`t'=1 if n_ed_`t'>0 & n_ed_`t'!=.
	replace ed_ind_`t'=0 if n_ed_`t'==0
	la var ed_ind_`t' "S Any ED use `t'"
	la var  n_ed_`t' "S Number ED visits `t'"
	
	la var n_op_visits_`t' "S Number Outpatient visits `t'"

	gen admit_mental_ill_ind_`t'=1 if n_mental_ill_adm_dx_ip_`t'>0 & n_mental_ill_adm_dx_ip_`t'!=.
	replace admit_mental_ill_ind_`t'=0 if n_mental_ill_adm_dx_ip_`t'==0
	la var admit_mental_ill_ind_`t' "S Any mental illness hospital admit (adm dx) `t'"
	
	gen ip_any_dx_mental_ill_ind_`t'=1 if n_mental_ill_any_dx_ip_`t'>0 & n_mental_ill_any_dx_ip_`t'!=.
	replace ip_any_dx_mental_ill_ind_`t'=0 if n_mental_ill_any_dx_ip_`t'==0
	la var ip_any_dx_mental_ill_ind_`t' "S Any mental illness dx from IP claim (any dx) `t'"	
}
*/
**************************************************************************
//create variables for s spending, utilization in 6-12m, 12m-18m, 18m-24m windows
//for plotting spending over time

//check id for duplicates
sort id
quietly by id : gen dup2 = cond(_N==1,0,_n)
tab dup2 //2 instances with spouse with more than one partner
gen female=gender==2


//add age index
gen s_age=index_year-birthyr
merge m:1 s_age using s_age_index_2011

forvalues i=1(3)10 {
	foreach x in tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
		gen tot_paid_wi_age_m_`i'_to_`=`i'+2'=`x'/s_age_index_n0
		gen tot_paid_wi_age_m_`i'_to_`=`i'+2'p=`x'p/s_age_index_p1
}
}
forvalues i=13(3)24 {
	foreach x in tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' {
		gen tot_paid_wi_age_m_`i'_to_`=`i'+2'=`x'/s_age_index_n1
		gen tot_paid_wi_age_m_`i'_to_`=`i'+2'p=`x'p/s_age_index_p2
}
}

************************************************************
//save this dataset
save E:\data\spouse_claims\data\final_data\spouse_claims_comparison_clean.dta, replace

*********************************************************
log close


H="sample derivation"
/*General data setup for the spouse dataset
Limited to decedents with FFS MC 6m prior to death, partner at time of death,
with spouse mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\final_data

log using `logpath'\2-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'

use spouse_claims_comparison_clean.dta
**************************************

gen yes=1
gen alive=death_all>index_date
replace has_xwalk=0 if alive==0
replace ffs_at_index=0 if has_xwalk==0
gen has_core=c_ivw_date_n1!=. & ffs_at_index==1
label var yes "N with index date 2000-2012"
label var alive "Alive at index date"
label var has_core "with n1 core interview"
label var has_xwalk "with Medicare xwalk"
label var ffs_at_index_dt "with FFS Medicare at index date"

mat sample=J(5,3,.)
local r=1
local c=1

foreach i in !=. ==0 ==1 {
	preserve
	keep if female`i'
	foreach x in yes alive has_xwalk ffs_at_index_dt has_core  {
		sum yes if `x'==1
		mat sample[`r',`c']=r(N)
		local r=`r'+1
}
	local c=`c'+1
	local r=1
	restore
}

mat rownames sample=yes alive has_xwalk ffs_at_index_dt has_core
frmttable using "`logpath'\comparison_sample_derivation.rtf", ///
statmat(sample) title("Sample derivation, comparison group") replace ///
ctitles("" "N Total" "N Males" "N Females") varlabels sdec(0) ///
note(Index date is the date at which R is 76.78 if female and 79.29 if male)

keep if ffs_at_index==1
save spouse_claims_comparison_sample.dta, replace


H="three-month spending & utilization"
/*General data setup for the dataset
Limited to decedents with FFS MC 6m prior to Index Date, partner at time of Index Date,
with mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\final_data


cd `projdatapath'

use spouse_claims_comparison_sample.dta
cd `logpath'\graphs\comparison
keep if ffs_a>0
//note-you can use these next lines to drop the top 3% of pre-Index Date_spenders
/*
gen perstime=s_cont_ffs_n_mos
replace perstime=24 if perstime>24
gen npt=s_tot_paid_by_mc_24m/perstime
gen pperstime=s_cont_ffs_p_mos
replace pperstime=24 if ppers>24
gen ppt=s_tot_paid_by_mc_p24m/pperstime
gen pt=npt+ppt
gsort -npt
drop if _n<50
*/


forvalues n=1(3)24 {
	gen tot_ffs_n`n'=tot_paid_by_mc_wi_m_`n'_to_`=`n'+2' if inscope_n_mos>=`n'
	gen tot_ffs_p`n'=tot_paid_by_mc_wi_m_`n'_to_`=`n'+2'p if inscope_p_mos>=`n'
	egen ffs_tot`n'=mean(tot_ffs_n`n')
	egen ffs_tot`=`n'+25'=mean(tot_ffs_p`n')
	egen m_ffs_tot`n'=mean(tot_ffs_n`n') if female==0
	egen m_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if female==0
	egen f_ffs_tot`n'=mean(tot_ffs_n`n') if female==1
	egen f_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if female==1
	egen s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24
	egen s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 
	egen f_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & female==1  
	egen f_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & female==1 
	egen m_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & female==0 
	egen m_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & female==0 

}

keep id *ffs_tot* female 

reshape long ffs_tot tot_ffs f_ffs_tot m_ffs_tot s_ffs_tot m_s_ffs_tot ///
f_s_ffs_tot, i(id) j(t)

gen time=-(t+2)/3 if t<=24
replace time=(t-23)/3 if t>=24

label define time -8 "21-24m" -7 "19-21" -6 "16-18" -5 "13-15" -4 "9-12" ///
 -3 "7-9" -2 "4-6" -1 "0-3" 8 "21-24m" 7 "19-21" 6 "16-18" 5 "13-15" 4 "9-12" ///
 3 "7-9" 2 "4-6" 1 "0-3" 
label values time time
collapse m_s_ffs_tot f_s_ffs_tot ffs_tot f_ffs_tot m_ffs_tot s_ffs_tot, by(time)
label var ffs_tot "Total MC Spending, all in scope"
label var f_ffs_tot "Total MC Spending, females"
label var m_ffs_tot "Total MC Spending, males"
label var s_ffs_tot "Total MC Spending, 24m Survivors only"
gen before=time if time<0
gen after=time if time>0

foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
 xline(0) xtitle("months from index Date")title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender ") legend(label(1 "Males") ///
label(2 "Females")) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_gender`x'.gph, replace
graph export mc_costs_comparison_gender_tot3months.pdf, replace

}

foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) (lfit m_`x' before) (lfit m_`x' after) ///
(lfit f_`x' before) (lfit f_`x' after), ///
 xline(0) xtitle("months from index Date")title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender ") legend(label(1 "Males") ///
label(2 "Females")) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_gender`x'.gph, replace
graph export mc_costs_comparison_gender_tot3months_prepost.pdf, replace

}

foreach x in s_ffs_tot {
twoway (connected m_`x' time) (connected f_`x' time) /*(lfit m_`x' time) (lfit f_`x' time)*/, ///
xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
note("WI Adjusted to 2012 $" "24m survivors only") subtitle("by gender ") legend(label(1 "Males") ///
label(2 "Females")) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_gender`x'.gph, replace
graph export mc_costs_comparison_gender_survivors3months.pdf, replace
}


twoway (connected ffs_tot time) /*(lfit ffs_tot time)*/, ///
xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500) ///
note("WI Adjusted to 2012 $") subtitle("all respondents") legend(label(1 "Mean Spending"))
graph save mc_costs_comparison_all, replace
graph export mc_costs_comparison_all3months.pdf, replace

twoway (connected s_ffs_tot time) /*(lfit s_ffs_tot time)*/, ///
 xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel)  yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500) ///
note("WI Adjusted to 2012 $" "24m Survivors only") legend(label(1 "Mean Spending"))
graph save mc_costs_comparison_24m_survivors, replace
graph export mc_costs_comparison_24m_survivors3months.pdf, replace


H="comparison and spouse-same graphs"
/*General data setup for the dataset
Limited to decedents with FFS MC 6m prior to Index Date, partner at time of Index Date,
with mc id*/

capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\final_data


cd `projdatapath'

use spouse_claims_comparison_sample.dta
cd `logpath'\graphs\comparison
keep if ffs_a>0
//note-you can use these next lines to drop the top 3% of pre-Index Date_spenders
/*
gen perstime=s_cont_ffs_n_mos
replace perstime=24 if perstime>24
gen npt=s_tot_paid_by_mc_24m/perstime
gen pperstime=s_cont_ffs_p_mos
replace pperstime=24 if ppers>24
gen ppt=s_tot_paid_by_mc_p24m/pperstime
gen pt=npt+ppt
gsort -npt
drop if _n<50
*/


forvalues n=1(3)24 {
	gen tot_ffs_n`n'=tot_paid_by_mc_wi_m_`n'_to_`=`n'+2' if inscope_n_mos>=`n'
	gen tot_ffs_p`n'=tot_paid_by_mc_wi_m_`n'_to_`=`n'+2'p if inscope_p_mos>=`n'
	egen ffs_tot`n'=mean(tot_ffs_n`n')
	egen ffs_tot`=`n'+25'=mean(tot_ffs_p`n')
	egen m_ffs_tot`n'=mean(tot_ffs_n`n') if female==0
	egen m_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if female==0
	egen f_ffs_tot`n'=mean(tot_ffs_n`n') if female==1
	egen f_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if female==1
	egen s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24
	egen s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 
	egen f_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & female==1  
	egen f_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & female==1 
	egen m_s_ffs_tot`n'=mean(tot_ffs_n`n') if inscope_p_mos>=24 & female==0 
	egen m_s_ffs_tot`=`n'+25'=mean(tot_ffs_p`n') if inscope_p_mos>=24 & female==0 

}

keep id *ffs_tot* female 

reshape long ffs_tot tot_ffs f_ffs_tot m_ffs_tot s_ffs_tot m_s_ffs_tot ///
f_s_ffs_tot, i(id) j(t)

gen time=-(t+2)/3 if t<=24
replace time=(t-23)/3 if t>=24

label define time -8 "21-24m" -7 "19-21" -6 "16-18" -5 "13-15" -4 "9-12" ///
 -3 "7-9" -2 "4-6" -1 "0-3" 8 "21-24m" 7 "19-21" 6 "16-18" 5 "13-15" 4 "9-12" ///
 3 "7-9" 2 "4-6" 1 "0-3" 
label values time time
collapse m_s_ffs_tot f_s_ffs_tot ffs_tot f_ffs_tot m_ffs_tot s_ffs_tot, by(time)
label var ffs_tot "Total MC Spending, all in scope"
label var f_ffs_tot "Total MC Spending, females"
label var m_ffs_tot "Total MC Spending, males"
label var s_ffs_tot "Total MC Spending, 24m Survivors only"
gen before=time if time<0
gen after=time if time>0
gen source="comparison"
append using "E:\data\spouse_claims\data\int_data\spouse_claims_collapsed.dta"
foreach x in ffs_tot  {
twoway (connected m_`x' time if source=="spouse") (connected f_`x' time if source=="spouse") ///
(connected m_`x' time if source=="comparison") (connected f_`x' time if source=="comparison") , ///
 xline(0) xtitle("months from index Date")title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender ") legend(label(1 "Male Spouses") ///
label(2 "Female Spouses") label(3 "Male Comparison") label(4 "Female Comparison")) ///
yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_spouse_gender`x'.gph, replace
graph export mc_costs_comparison_spouse_gender_tot3months.pdf, replace

}
/*
foreach x in ffs_tot  {
twoway (connected m_`x' time) (connected f_`x' time) (lfit m_`x' before) (lfit m_`x' after) ///
(lfit f_`x' before) (lfit f_`x' after), ///
 xline(0) xtitle("months from index Date")title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
 note("WI Adjusted to 2012 $") subtitle("by gender ") legend(label(1 "Males") ///
label(2 "Females")) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_spouse_gender`x'.gph, replace
graph export mc_costs_comparison_spouse_gender_tot3months_prepost.pdf, replace

}
*/
foreach x in s_ffs_tot {
twoway (connected m_`x' time if source=="spouse") (connected f_`x' time if source=="spouse") ///
(connected m_`x' time if source=="comparison") (connected f_`x' time if source=="comparison") , ///
xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) ///
note("WI Adjusted to 2012 $" "24m survivors only") subtitle("by gender ") ///
legend(label(1 "Male Spouses") ///
label(2 "Female Spouses") label(3 "Male Comparison") label(4 "Female Comparison")) ///
yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500)
graph save mc_costs_comparison_spouse_gender`x'.gph, replace
graph export mc_costs_comparison_spouse_gender_survivors3months.pdf, replace
}


twoway (connected ffs_tot time if source=="spouse") (connected ffs_tot time if source=="comparison"),  ///
xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel) yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500) ///
note("WI Adjusted to 2012 $") subtitle("all respondents") legend(label(1 "Mean Spending Spouses") ///
label(2 "Mean Spending Comparison"))
graph save mc_costs_comparison_spouse_all, replace
graph export mc_costs_comparison_spouse_all3months.pdf, replace

twoway (connected s_ffs_tot time if source=="spouse") (connected s_ffs_tot time if source=="comparison"), ///
 xline(0) xtitle("months from index Date") title("Mean Medicare Costs By Time from Index Date, 3month intervals") ///
 xlab(-8 -4 -1 1 4 8, valuelabel)  yscale(range(1500 3500))  ylabel(1500 2000 2500 3000 3500) ///
note("WI Adjusted to 2012 $" "24m Survivors only") legend(label(1 "Mean Spending Spouses") ///
label(2 "Mean Spending Comparison"))
graph save mc_costs_comparison_spouse_24m_survivors, replace
graph export mc_costs_comparison_spouse_24m_survivors3months.pdf, replace


H="three-month tables"
/*three month tables 
variables are tot_paid_by_mc_
			  n_ip_admit_
			  n_op_visits_
			  n_hospd_
we want N if !=., N if !=0, mean, old 6m vars for total and gender*/


capture log close

clear all
set more off

//Server file paths
local logpath E:\data\spouse_claims\logs\graphs\comparison
local projdatapath E:\data\spouse_claims\data\final_data

log using `logpath'\comparison_3month_tables.txt, text replace

cd `projdatapath'

use spouse_claims_comparison_clean.dta, clear
gen cont_ffs__mos=cont_ffs_n_mos
keep if ffs_at_index_dt==1
preserve
foreach x in tot_paid_by_mc_wi_ n_ip_admit_ n_op_visits_ {
	foreach p in "" "p" {
		mat spending`p'=J(8,6,.)
		local r=1
		local c=1

		gen `x'`p'=0
		forvalues i=1(3)24 {
			qui sum `x'm_`i'_to_`=`i'+2'`p' if cont_ffs_`p'_mos>=`i'
			mat spending`p'[`r',1]=r(mean)
			mat spending`p'[`r',2]=r(N)
			qui sum `x'm_`i'_to_`=`i'+2'`p' if `x'm_`i'_to_`=`i'+2'`p'!=0 & cont_ffs_`p'_mos>=`i'
			mat spending`p'[`r',3]=r(mean)
			mat spending`p'[`r',4]=r(N)
			qui replace `x'`p'=`x'`p'+`x'm_`i'_to_`=`i'+2'`p' if `x'm_`i'_to_`=`i'+2'`p'!=.
			qui sum `x'`p'
			mat spending`p'[`r',5]=r(mean)
			local r=`r'+1
}
		local r=2

		/*foreach n in 6 12 18 24 {
			qui sum `x'`p'`n'm 
			mat spending`p'[`r',6]=r(mean)
			local r=`r'+2
}
*/
	mat rownames spending`p'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"

}
	if "tot_paid_by_mc_wi_"=="`x'" {
		local this replace
}
	else {
		local this addtable
}
	frmttable using `logpath'\3month_spending_util_tables, `this' statmat(spending) title("`x' 24m prior to index date") ///
	 ctitles("" "Mean" "N" "Mean if !=0" "N" "Cumulative") sdec(2,0,2,0,2) 
	 
	frmttable using `logpath'\3month_spending_util_tables, addtable statmat(spendingp) title("`x' , 24m after index date") ///
	 ctitles("" "Mean" "N" "Mean if !=0" "N" "Cumulative") sdec(2,0,2,0,2) 
}

restore
preserve
mat ip=J(8,5,.)
mat ipaft=J(8,5,.)

local r=1 
local c=1
gen yes=1
gen ever=0
forvalues i=1(3)24 {
	sum yes if cont_ffs_n_mos>=`i'
	mat ip[`r',1]=r(N)
	sum ip_admit_ind_m_`i'_to_`=`i'+2' if cont_ffs_n_mos>=`i'
	mat ip[`r',2]=r(N)*r(mean)
	mat ip[`r',3]=r(mean)*100
	replace ever=1 if ip_admit_ind_m_`i'_to_`=`i'+2'==1
	sum ever
	mat ip[`r',4]=r(mean)*100
	sum ever if cont_ffs_n_mos>=`i'
	mat ip[`r',5]=r(mean)*100
	local r=`r'+1
}

replace ever=0
local r=1

forvalues i=1(3)24 {
	sum yes if cont_ffs_p_mos>=`i'
	mat ipaft[`r',1]=r(N)
	sum ip_admit_ind_m_`i'_to_`=`i'+2'p if cont_ffs_p_mos>=`i'
	mat ipaft[`r',2]=r(N)*r(mean)
	mat ipaft[`r',3]=r(mean)*100
	replace ever=1 if ip_admit_ind_m_`i'_to_`=`i'+2'p==1
	sum ever
	mat ipaft[`r',4]=r(mean)*100
	sum ever if cont_ffs_p_mos>=`i'
	mat ipaft[`r',5]=r(mean)*100
	local r=`r'+1
}

foreach a in "" "aft" {
	mat rownames ip`a'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"
}
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ip) ///
title("Indicator IP admission prior to index date") sdec(0,0,2) replace ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to index date)
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ipaft) ///
title("Indicator IP admission after index date") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to index date)

mat ip=J(8,5,.)
mat ipaft=J(8,5,.)

local r=1 
local c=1
replace ever=0
keep if inscope_p_mos>=24

forvalues i=1(3)24 {
	sum yes if cont_ffs_n_mos>=`i'
	mat ip[`r',1]=r(N)
	sum ip_admit_ind_m_`i'_to_`=`i'+2' if cont_ffs_n_mos>=`i'
	mat ip[`r',2]=r(N)*r(mean)
	mat ip[`r',3]=r(mean)*100
	replace ever=1 if ip_admit_ind_m_`i'_to_`=`i'+2'==1
	sum ever
	mat ip[`r',4]=r(mean)*100
	sum ever if cont_ffs_n_mos>=`i'
	mat ip[`r',5]=r(mean)*100
	local r=`r'+1
}

replace ever=0
local r=1

forvalues i=1(3)24 {
	sum yes if cont_ffs_p_mos>=`i'
	mat ipaft[`r',1]=r(N)
	sum ip_admit_ind_m_`i'_to_`=`i'+2'p if cont_ffs_p_mos>=`i'
	mat ipaft[`r',2]=r(N)*r(mean)
	mat ipaft[`r',3]=r(mean)*100
	replace ever=1 if ip_admit_ind_m_`i'_to_`=`i'+2'p==1
	sum ever
	mat ipaft[`r',4]=r(mean)*100
	sum ever if cont_ffs_p_mos>=`i'
	mat ipaft[`r',5]=r(mean)*100
	local r=`r'+1
}

foreach a in "" "aft" {
	mat rownames ip`a'="0-3" "3-6" "6-9" "9-12" "12-15" "15-18" "18-21" "21-24"
}
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ip) ///
title("Indicator IP admission prior to index date" "24m survivors only") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to index date)
	
frmttable using `logpath'\3month_ip_admit_ind, statmat(ipaft) ///
title("Indicator IP admission after index date" "24m survivors only") sdec(0,0,2) addtable ///
ctitles("" "N in scope" "N Yes" "% Yes" "% Cumul" "% Cumul in scope") ///
note(In scope defined as continuous fee for service Medicare at the ///
point of period closest to index date)


H="med mean range"
use E:\data\spouse_claims\data\int_data\spouse_claims_v1, clear
*keep if s_cont_ffs_n>=24 & s_cont_ffs_p>=24

forvalues i=1(3)24 {
	foreach g in 0 1 {
		sum s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' if s_female==`g', d
		gen median`g'f`i'=r(p50)
		gen firstq`g'f`i'=r(p25)
		gen lastq`g'f`i'=r(p75)
		gen iqr`g'f`i'="`=r(p25)'--`=r(p75)'"
		sum s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p if s_female==`g', d
		gen median`g'f`i'p=r(p50)
		gen firstq`g'f`i'p=r(p25)
		gen lastq`g'f`i'p=r(p75)
		gen iqr`g'f`i'p="`=r(p25)'--`=r(p75)'"
}		
}

mat medrange=J(16,8,.)
local r=1
local c=2

foreach g in 0 1 {
	forvalues i=22(-3)1 {
		sum s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2' if s_female==`g', d
		mat medrange[`r',`c'-1]=r(mean)
		mat medrange[`r',`c']=r(p50)
		mat medrange[`r',`c'+1]=r(p25)
		mat medrange[`r',`c'+2]=r(p75)
		local r=`r'+1
}
	forvalues i=1(3)24 {
		sum s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p if s_female==`g', d
		mat medrange[`r',`c'-1]=r(mean)
		mat medrange[`r',`c']=r(p50)
		mat medrange[`r',`c'+1]=r(p25)
		mat medrange[`r',`c'+2]=r(p75)
		local r=`r'+1
}
	local c=6
	local r=1
}

mat rownames medrange="-8" "-7" "-6" "-5" "-4" "-3" "-2" "-1" " 1" " 2" " 3" " 4" " 5" " 6" " 7" " 8"

mat dcols=(0,0,0,1,0,0,0,1)

frmttable using "E:/data/spouse_claims/logs/mean_med_range_table_3months", ///
statmat(medrange) ctitles("Period" "Mean" "Men Median" "25th-75th percentiles" ///
"Mean" "Female Median" "25th-75th percentiles") doubles(dcols) replace ///
title("Quarterly spending by gender, 24m before and after R death")


H="glm on three-month spending"
capture log close
clear all


local datapath "E:/data/spouse_claims/data/int_data"
local logpath "E:/data/spouse_claims/logs"

cd `datapath'

use spouse_claims_v1.dta


drop if s_age==65
local rx r_age r_networth_adj2012_n1 r_nhres_n1 r_advdir_x r_dexp_x ///
r_adl_independent_core_n1 r_cc_3_alzhdmta_n12mn6m r_cc_6_chrnkidn_n12mn6m r_cc_ami_isch_n12mn6m ///
r_cc_8_chf_n12mn6m r_cc_9_diabetes_n12mn6m r_cc_7_copd_n12mn6m ///
r_cc_16_strketia_n12mn6m r_cc_cncr_chronic_n12mn6m r_cc_15_ra_oa_n12mn6m ///
r_cc_13_depressn_n12mn0 

sum `rx'


local region hci_index hospital_beds specialists
sum `region'
gen ind_ip_admit_12m=s_n_ip_admit_12m>0
label var ind_ip_admit_12m "Indicator any IP admission 12m pre R's death"
local sx s_age s_female s_hisp_e s_black_e  ///
s_hseduc s_srh_pf_n1 s_imprelig_vimp_n1 ///
s_psych_overall_hrs_n1  s_adl_independent_core_n1 ///
s_comorb_all_0d_n12m s_medicaid_n1
ebalance s_female `sx' , maxiter(50) gen(weight)
sum `sx' 

forvalues i=1(3)24 {
gen paid`i'=s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'
gen paid`=`i'+24'=s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p
gen paidage`i'=s_tot_paid_wi_age_m_`i'_to_`=`i'+2'
gen paidage`=`i'+24'=s_tot_paid_wi_age_m_`i'_to_`=`i'+2'p
gen admit`i'=s_n_ip_admit_m_`i'_to_`=`i'+2'
gen admit`=`i'+24'=s_n_ip_admit_m_`i'_to_`=`i'+2'p
}


forvalues i=1(6)48 {
	foreach x in paid paidage {
		gen `x'6m`i'=`x'`i'
		replace `x'6m`i'=`x'6m`i'+`x'`=`i'+3' if `x'`=`i'+3'!=.
}
}
/*
forvalues 25(6)49 {
	foreach x in paid paidage {
		gen `x'6m`i'=`x'`i'
		replace `x'6m`i'=`x'6m`i'+`x'`=`i'+3' if `x'`=`i'+3'!=.
}
}
*/
foreach i in 1 13 25 37 {
	foreach x in paid paidage {
		gen `x'12m`i'=`x'6m`i'
		replace `x'12m`i'=`x'12m`i'+`x'6m`=`i'+6' if `x'6m`=`i'+6'!=.
}
}

foreach x in paid paidage {
	foreach y in "" 6m 12m {
		gen dif`x'`y'=`x'`y'25-`x'`y'1
}
}


keep s_id r_id r_death_date_e r_death_year admit* `rx' `sx' `region' paid* weight

reshape long paid paidage paidage6m paidage12m ///
 paid6m paid12m admit, i(s_id) j(time)

replace time=(time+2)
replace time=(-time/3)+9 if time<=24 
replace time=time/3 if time>24
gen timebef=-time+9
replace timebef=0 if time>8
gen timeaft=time-8
replace timeaft=0 if time<9 
gen post=time>8

xtset s_id time
replace admit=1 if admit>0 & admit!=.
gen ladmit=L.admit
gen lpaid=L.paid
local sx s_age s_hisp_e s_black_e  ///
s_hseduc s_srh_pf_n1 s_adl_independent_core_n1 ///
s_comorb_all_0d_n12m s_medicaid_n1 

label var paid "Total Paid by MC"
label var paidage "Total Paid, age adj"
/*
preserve 
gen interaction=time*s_female
glm paid6m `sx'  post interaction i.r_death_year s_female, cluster(s_id) link(log) fam(gamma) eform
outreg, stats(e_b p) keep(post interaction s_female `sx' ) varlabels

reg paid6m `sx'  post interaction i.r_death_year s_female, cluster(s_id) 
outreg,merge stats(b p) keep(post interaction s_female `sx' ) varlabels

glm paid6m `sx'  post interaction i.r_death_year s_female, cluster(s_id) link(log) fam(gamma) eform
outreg, merge stats(e_b p) keep(post interaction s_female `sx' ) varlabels

reg paid12m `sx'  post interaction i.r_death_year s_female, cluster(s_id) 
outreg,merge stats(b p) keep(post interaction s_female `sx' ) varlabels

outreg using `logpath'\glm_spending_by_gender_other.rtf, replace replay ///
title("Medicare Expenditures by Gender, 2yr pre/post R death") ///
note("GLM with log link, family gamma, and cluster standard errors" ///
"OLS with cluster standard errors")

keep if time>4 & time<13
glm paid6m `sx'  post interaction i.r_death_year s_female, cluster(s_id) link(log) fam(gamma) eform
outreg, stats(e_b p) keep(post interaction s_female `sx' ) varlabels

reg paid6m `sx'  post interaction i.r_death_year s_female, cluster(s_id) 
outreg,merge stats(b p) keep(post interaction s_female `sx' ) varlabels

glm paid12m `sx'  post interaction i.r_death_year s_female, cluster(s_id) link(log) fam(gamma) eform
outreg, merge stats(e_b p) keep(post interaction s_female `sx') varlabels

reg paid12m `sx'  post interaction i.r_death_year s_female, cluster(s_id) 
outreg,merge stats(b p) keep(post interaction s_female `sx') varlabels 

outreg using `logpath'\glm_spending_by_gender_other.rtf, addtable replay ///
title("Medicare Expenditures by Gender, 1yr pre/post R death") ///
note("GLM with log link, family gamma, and cluster standard errors" ///
"OLS with cluster standard errors")

restore
*/
gen interaction=post*s_female


glm paid `sx' post interaction s_female time i.r_death_year, ///
 cluster(s_id) link(log) fam(gamma) eform
 outreg
glm paid `sx' post interaction s_female ladmit time i.r_death_year, ///
 cluster(s_id) link(log) fam(gamma) eform
 outreg, merge
glm paid `sx' post interaction s_female lpaid time i.r_death_year, ///
 cluster(s_id) link(log) fam(gamma) eform
outreg, merge

H="more glm"
cd "E:\data\spouse_claims\data"

use "int_data\spouse_claims_v1.dta", clear

local sx s_age s_female s_hisp_e s_black_e  ///
s_hseduc s_srh_pf_n1 s_adl_independent_core_n1 ///
s_comorb_all_0d_n12m s_medicaid_n1 

keep s_id r_id `sx' r_s_death_* r_death_* s_tot_paid* s_cont_ffs* s_death*
gen spouse=1
label define spouse 1 "spouse" 0 "comp"
append using "final_data\spouse_claims_comparison_sample.dta"
replace spouse=0 if spouse==.
destring id, gen(id2)
duplicates report id2
replace id2=s_id if s_id!=.
duplicates report id2
duplicates tag id2, gen(dup)
drop if dup==1 & spouse==0
gen mtod=floor((death_all-index_date)/30)
replace r_s_death_mos=mtod if r_s_death_mos==.
replace r_death_year=index_year if r_death_year==.

local xs age female hisp_e black_e hseduc srh_pf_n1 adl_independent_core_n1 ///
comorb_all_0d_n12m medicaid_n1 cont_ffs_p cont_ffs_n
gen hseduc=degree>1 if degree!=.
foreach x of varlist `xs' tot_paid_by_mc_wi_m* tot_paid_wi_age* {
replace s_`x'=`x' if s_`x'==.
}

keep if s_cont_ffs_n>=12
drop if s_cont_ffs_p<=12 & s_cont_ffs_p<=r_s_death_mos 
forvalues i=1(3)24 {
gen paid`i'=s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'
gen paid`=`i'+24'=s_tot_paid_by_mc_wi_m_`i'_to_`=`i'+2'p
gen paidage`i'=s_tot_paid_wi_age_m_`i'_to_`=`i'+2'
gen paidage`=`i'+24'=s_tot_paid_wi_age_m_`i'_to_`=`i'+2'p
}


forvalues i=1(6)48 {
	foreach x in paid paidage {
		gen `x'6m`i'=`x'`i'
		replace `x'6m`i'=`x'6m`i'+`x'`=`i'+3' if `x'`=`i'+3'!=.
}
}

foreach i in 1 13 25 37 {
	foreach x in paid paidage {
		gen `x'12m`i'=`x'6m`i'
		replace `x'12m`i'=`x'12m`i'+`x'6m`=`i'+6' if `x'6m`=`i'+6'!=.
}
}

foreach x in paid paidage {
	foreach y in "" 6m 12m {
		gen dif`x'`y'=`x'`y'25-`x'`y'1
}
}


keep id2 r_death_date_e r_s_death_* r_death_year ///
s_cont_ffs_p s_cont_ffs_n dif* `sx' paid* spouse s_id

reshape long paid paidage paidage6m paidage12m ///
 paid6m paid12m admit, i(id2) j(time)

replace time=(time+2)
replace time=(-time/3)+9 if time<=24 
replace time=time/3 if time>24
gen timebef=-time+9
replace timebef=0 if time>8
gen timeaft=time-8
replace timeaft=0 if time<9 
gen post=time>8
gen paidbins=.
forvalues i=1/4000 {
replace paidbins=`i' if paid12m<`i'*100 & paidbins==.
}
gen paidbins2=floor(paid12m/100)+1
xtset id2 time

gen interaction=post*spouse
gen age2=s_age^2
local sx s_female s_age age2 s_hisp_e s_black_e  ///
s_hseduc s_srh_pf_n1 s_adl_independent_core_n1 ///
s_comorb_all_0d_n12m s_medicaid_n1 


label var paid "Total Paid by MC"
label var paidage "Total Paid, age adj"
replace s_comorb_all_0d=3 if s_comorb_all_0d>3


*preserve 
*keep if timebef==1 | timeaft==1
foreach x of local sx {
drop if `x'==.
}

*drop if paidage12m==.
by id2, sort: drop if _N==1/*
glm paid spouse post interaction `sx' i.r_death_year, fa(gamma) ///
 link(log) cluster(id2) 
outreg, keep(spouse post interaction)
*outreg, merge keep(spouse post interaction) stats(e_b e_ci)
*margins, dydx(*) post
*outreg, merge keep(spouse post interaction) stats(b)
glm paid spouse post interaction `sx' i.r_death_year if s_female==0, fa(gamma) ///
 link(log) cluster(id2)
outreg, merge keep(spouse post interaction)
glm paid spouse post interaction `sx' i.r_death_year if s_female==1, fa(gamma) ///
 link(log) cluster(id2)
outreg, merge keep(spouse post interaction)*/
glm paid spouse post interaction `sx' i.r_death_year, fa(gamma) ///
link(log) cluster(id2)
outreg
glm paidbins spouse post interaction `sx' i.r_death_year, fa(gamma) ///
link(log) cluster(id2)
outreg, merge
glm paidbins spouse post interaction `sx' i.r_death_year, fa(igauss) ///
link(log) cluster(id2)
outreg, merge

outreg using "E:\data\spouse_claims\logs\glm_result.rtf", replay replace

/*
keep if s_female==1
qui glm paid spouse post interaction `sx' i.r_death_year if post==0, fa(gamma) ///
 link(log) cluster(id2) 
outreg
qui glm paid spouse post interaction `sx' i.r_death_year if post==1, fa(gamma) ///
 link(log) cluster(id2) 
outreg, merge



H="construct matched comparison group"
clear all

local datapath "E:\data\spouse_claims\data\int_data"

cd `datapath'

use spouse_claims_v1

keep if s_cont_ffs_n_mos>=12 
keep if s_cont_ffs_p_mos>=12 | s_cont_ffs_p_mos>=r_s_death_mos
gen hhidpn=s_hhid_n1+s_pn_n1
replace hhidpn=s_hhid_n2+s_pn_n2 if hhidpn==""

keep r_id s_id r_age s_age* s_adl_independent_core* s_srh_pf_* s_race ///
s_comor*hrs_* s_c_ivw_date* s_female s_black  s_white s_hisp_eth_e s_core_year* ///
r_death_date_e s_couple* s_death_date_e hhidpn
rename s_age s_age_at_death
gen core_year=s_core_year_n1 if r_death_date_e-s_c_ivw_date_n1>365
replace core_year=s_core_year_n2 if r_death_date_e-s_c_ivw_date_n1<=365
gen n1n2=core_year==s_core_year_n1 if core_year!=.
replace n1n2=2 if core_year==s_core_year_n2 & core_year!=.
drop if core_year==.

foreach x in age adl_independent_core srh_pf comor_in_hrs comor_c_hrs couple  {
	gen `x'=.
	foreach i in 1 2 {
		replace `x'=s_`x'_n`i' if n1n2==`i'
}
}

rename age age_at_core

rename s_* *
rename id s_id
gen id=hhidpn
gen ss=1

merge 1:1 id core_year using "E:\data\serious_ill\int_data\core_ids_1yr_criteria_5.dta", ///
 keepusing(*id hisp* white* black* female age_at_core core_year adl_independent_core srh_pf ///
 comor_c_hrs couple  married ressp)
drop if core_year==2012
/*append using "E:\data\serious_ill\int_data\core_ids_1yr_criteria_5.dta"*/
merge m:1 id using "E:\data\hrs_cleaned\death_date_2012.dta", keepusing(death_all) gen(m2)
keep *id hisp* white* black* female age_at_core core_year adl_independent_core srh_pf ///
 comor_c_hrs couple ss *death_date_e death_all married ressp n1n2


gen agecat=1 if age_at_core>=63

replace agecat=2 if age_at_core>67
replace agecat=3 if age_at_core>72
replace agecat=4 if age_at_core>77
replace agecat=5 if age_at_core>82
replace agecat=6 if age_at_core>87

merge 1:1 id core_year using "E:\data\serious_ill\int_data\core_ids_1yr_criteria_5.dta", gen(m3) ///
keep(match master)
drop if xwalk_yes==0
/*
replace agecat=2 if age_at_core>72
replace agecat=3 if age_at_core>82
*/

replace s_id=hhidpn if ss==.
gen morp=couple==1 | married==1 | resspo==1
drop if morp==0

local matchvars core_year female black hisp adl_independent_core srh_pf ///
comor_c_hrs
replace black=black_e if black==.
drop hisp
rename hisp_eth hisp
replace hisp=hisp_eth_e if hisp==.
foreach x of local matchvars {
di "`x'"
sum `x' if ss==1 & `x'!=.

drop if `x'==.
}

by s_id, sort: egen eversp=sum(ss)
gen syear=core_year if ss==1
by s_id, sort: egen score=sum(syear)
drop if eversp==1 & ss==. //& score<=core_year 
drop score syear
replace ss=0 if ss==.

egen this=group(`matchvars')
levelsof this if ss==1, local(levels)
gen match=0
gen m_unmarried=0
foreach l of local levels {
	replace match=1 if this==`l' & morp==1
	replace m_unmarried=1 if this==`l' & morp==0
}

*keep if match==1
by this, sort: egen index_date=min(r_death_date_e)
replace match=0 if death_all<index_date 
by this, sort: egen num=sum(match)
by this, sort: egen num_ss=sum(ss)
gen dif=(num-num_ss)/num_ss
replace match=0 if dif==0
drop index_date

gen negyr=-core_year
gen matched=0
gen index_date=.

gen age0=age_at_core
gen age1=age_at_core+1
gen age4=age_at_core+2
gen age5=age_at_core+3
gen age8=age_at_core+4
gen age9=age_at_core+5
gen age2=age_at_core-1
gen age3=age_at_core-2
gen age6=age_at_core-3
gen age7=age_at_core-4
gen age10=age_at_core-5

forvalues i=1/10 {
	replace age`i'=age_at_core if ss==0
}

gen match_round=.

set seed 77
gen x=uniform()
sort x 
sort dif

levelsof negyr, local(levels)

forvalues i=0/10 {
	di "`i'"
	local matchvars age`i' this
	foreach l of local levels {
		sum matched if ss & negyr==`l'
		if r(mean)<1 {
			psmatch2 ss `matchvars' if negyr==`l' & matched==0, ///
			 caliper(0.0000000001) noreplacement
			by id, sort: egen ym=sum(_w)
			drop if _w==. & ym==1
			replace matched=1 if _w!=.
			replace _n1=_id if _n1==.
			by _n1, sort: egen ind_dt=max(r_death_date_e)
			replace index_date=ind_dt if index_date==.
			replace match_round=`i' if match_round==. & _w!=.
			drop ind_dt _w ym
}
}
}


H="get list of every married person at every interview wave"
use "E:\data\hrs_public_2012\rand2012\family\StataSE\rndfamr_c.dta", clear
keep hhidpn s*hhidpn hhid pn
rename s*hhidpn shhidpn* 
reshape long shhidpn , i(hhidpn) j(round)
gen core_year=round*2+1990
rename hhidpn r_id
rename shhidpn s_id
sort r_id core_year
xtset r_id core_year, delta(2)
replace s_id=L.s_id if L.s_id==F.s_id & missing(s_id)
gen knownspouse=s_id & !missing(s_id)
keep if core_year>=1998
drop round
tempfile this
keep if knownspouse
save `this'
drop s* knownspouse
rename (r_id hhid pn) (s_id s_hhid s_pn)
merge 1:m s_id core_year using `this', nogen keep(match using)
replace r_id=s_id if missing(r_id) 
replace s_id=. if !knownspouse
tempfile this 
save `this'
use "E:\data\serious_ill\int_data\core_ids_1yr_criteria_5.dta", clear
//get cesd, will be used for outcome in pscore
replace cesd_tot=2 if missing(cesd_tot)
sort id core_year
by id: gen cesd_tot_p1=cesd_tot[_n+1]
replace female=gender-1 if female==.
replace hisp=hisp_eth if hisp_eth!=.
gen region=inlist(state_wave,"CT","ME","MA","NH","RI","VT","NJ","NY","PA")
replace region=2 if inlist(state_wave,"IN","IL","MI","OH","WI" ) | ///
inlist(state_wave,"IA","KS","MN","MO","NE","ND","SD")
replace region=3 if inlist(state_wave,"DE","DC","FL","GA","MD","SC","NC") | ///
inlist(state_wave,"VA","WV","AL","KY","MS","TN") 
replace region=3 if inlist(state_wave,"AR","LA","OK","TX")
replace region=4 if inlist(state_wave,"AZ","CO","ID","NM","MT") | ///
inlist(state_wave,"UT","NV","WY","AK","CA","HI","OR","WA")
gen northeast=region==1
gen midwest=region==2
gen south=region==3
gen west=region==4

gen age_cat=1 if age_at_core<=70
replace age_cat=2 if age_at<=75 & age_cat==.
replace age_cat=3 if age_at<=80 & age_cat==.
replace age_cat=4 if age_at<=85 & age_cat==.
replace age_cat=5 if age_at<=90 & age_cat==.
replace age_cat=6 if age_at>=95 & age_cat==.
*replace age_cat=7 if age_at>95 & age_cat==.
drop if age_at_core<65
tab age_cat, gen(age_cat)
tab comor_c, gen(comorb_cat)
replace comorb_cat3=1 if comorb_cat4==1
local matchvars age_cat female black hisp adl_independent_core ///
srh_pf srh_g srh_ve region northeast midwest south west ///
age_cat1 age_cat2 age_cat3 age_cat4 age_cat5 age_cat6
local comorb cancer_hrs lung_hrs heart_hrs chf_hrs stroke_hrs memory_hrs ///
htn_hrs dm_hrs psych_hrs comorb_cat1 comorb_cat2 comorb_cat3 

destring id, gen(r_id)
keep r_id c_ivw_date core_year `matchvars' `comorb' age_at_core ressp comor_c_hrs cesd_tot* 

foreach x in `matchvars' `comorb' comor_c_hrs age_at_core {
	rename `x' r_`x'
}
describe
tempfile temp2
save `temp2'

rename r_* s_*
rename c_ivw_date s_c_ivw_date
tempfile temp3
save `temp3'
use `this', clear
merge 1:1 r_id core_year using `temp2', keep(match) gen(rmatch)
merge 1:1 s_id core_year using `temp3', keep(match master) gen(smatch)
gen id=hhid+pn
merge m:1 id using "E:\data\hrs_cleaned\death_date_2012.dta", ///
keepusing(death_all) keep(match master) nogen
rename death_all r_death_date
replace id=s_hhid+s_pn
merge m:1 id using "E:\data\hrs_cleaned\death_date_2012.dta", ///
 keepusing(death_all) keep(match master) nogen
replace id=hhid+pn
rename death_all s_death_date
gen s_death_year=year(s_death_date)
sort r_id core_year
gen survives_spouse=r_death_date>s_death_date if s_death_date!=.
drop if s_death_date<c_ivw_date
gen cy=core_year if c_ivw<s_death_date & !missing(s_death_date)
by r_id s_id, sort: egen lcy=max(cy)
gen ind_n1_ivw=core_year==lcy
replace ind_n1_ivw=0 if survives==0
drop cy lcy
/*
tempfile this
save `this'
keep id
duplicates drop*/
gen n=1

foreach x in r s {
	foreach y in `matchvars' `comorb' {
		local match `match' `x'_`y'
}
}
di "`match'"
sum `match'
foreach x in `match' {
sum n if `x'==.
}

drop if r_region==0
gen same=r_region==s_region
drop if same==0

local region northeast midwest south west
foreach x in `region' region {
	drop s_`x'
	rename r_`x' `x'
}
rename s_* sp_*
rename r_* s_*
rename sp_* r_*
*preserve
local match r_comorb_cat1 r_comorb_cat2 r_comorb_cat3 r_adl_independent_core ///
r_srh_pf r_srh_g r_srh_ve s_age_cat1 s_age_cat2 s_age_cat3 s_age_cat4 s_age_cat5 s_age_cat6 ///
s_comorb_cat1 s_comorb_cat2 s_comorb_cat3  ///
s_female s_black s_hisp s_adl_independent_core s_srh_pf s_srh_g ///
s_srh_ve 
/*
local match r_age_cat ///
r_comorb_cat1 r_comorb_cat2 r_comorb_cat3 ///
r_female r_black r_hisp r_adl_independent_core ///
r_srh_pf r_age_cat ///
s_comorb_cat1 s_comorb_cat2 s_comorb_cat3  ///
s_adl_independent_core s_srh_pf 
*/
local match r_comorb_cat1 r_comorb_cat2 r_comorb_cat3 r_adl_independent_core ///
r_srh_pf r_srh_g r_srh_ve s_age_at_core ///
s_comorb_cat1 s_comorb_cat2 s_comorb_cat3  ///
s_female s_black s_hisp s_adl_independent_core s_srh_pf s_srh_g ///
s_srh_ve 
capture drop pscore *
capture drop lp 
capture drop weight 
capture drop support 
capture drop ip_bloc
capture drop x

drop if !ressp 
drop if core_year<2000
levelsof core_year , local(levels)
//propensity score generation

//first sort data randomly
set seed 2001
gen x=uniform()
sort x

gen weight=.
gen support=.

capture log close
log using "E:\data\spouse_claims\logs\control_ps_test.txt", text replace

foreach l of local levels {
qui di `l'
//generate pscore variable 
qui pscore ind_n1_ivw `match' `region' if core_year==`l', pscore(pscore`l') ///
blockid(ip_block) logit //detail

*psgraph, treated(ind_n1_ivw) pscore(pscore`l')
qui di "NOW"
*******************************************************************
//implement radius matching
gen lp=ln(pscore`l'/(1-pscore`l'))
sum lp

sca cal_ps1=r(sd)*0.02
sca list cal_ps1
local caliper cal_ps1

//rule of thumb 0.2*sd, try 0.02* sd
qui psmatch2 ind_n1_ivw if core_year==`l',outcome(cesd_tot_p1) pscore(pscore`l') n(1) ///
noreplace caliper(`=`caliper'') logit
replace support=1 if _sup==1
replace weight=_weight if weight==.
capture drop ip_block pscore* lp
}
di "1 to 1, no replacement"
pstest `match' `region' core_year,treated(ind) both hist mweight(weight)
*cem `match' `region' core_year, treatment(ind_n1_ivw)
forvalues n=1(2)5 {
replace weight=.
replace support=.
foreach l of local levels {
qui di `l'
//generate pscore variable 
qui pscore ind_n1_ivw `match' `region' if core_year==`l', pscore(pscore`l') ///
blockid(ip_block) logit //detail

*psgraph, treated(ind_n1_ivw) pscore(pscore`l')
qui di "NOW"
*******************************************************************
//implement radius matching
gen lp=ln(pscore`l'/(1-pscore`l'))
sum lp

sca cal_ps1=r(sd)*0.02
sca list cal_ps1
local caliper cal_ps1

//rule of thumb 0.2*sd, try 0.02* sd
qui psmatch2 ind_n1_ivw if core_year==`l',outcome(cesd_tot_p1) pscore(pscore`l') n(`n') ///
caliper(`=`caliper'') logit ties
replace support=1 if _sup==1
replace weight=_weight if weight==.
capture drop ip_block pscore* lp
}
replace _weight=weight
di "`n' to 1 with replacement"
pstest `match' `region' core_year,treated(ind) both hist 
*cem `match' `region' core_year, treatment(ind_n1_ivw)
graph save "E:\data\spouse_claims\logs\control_ps_test_`n'_to_1", replace
graph export "E:\data\spouse_claims\logs\control_ps_test_`n'_to_1.pdf", replace
}
log close

teffects nnmatch (`match' `region' core_year) (ind_n), ematch(`match')

