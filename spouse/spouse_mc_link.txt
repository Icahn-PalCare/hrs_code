= V4 Outline MultiLine NoSorting TabWidth=30

H="Spouse with Medicare linkage"
Starts with dataset created for the spousal depression outcomes project
created in the file spouse_2010.txt
This ds is created in the "Create additional variables" tab of spouse_2010.txt

This has the Spouse Medicare xwalk id already linked in (s_bid_hrs and s_xwalk_yes)

But now this code adds variables derived from the spouse claims

/*data from spouse_2010.txt code - starting point for this work*/
libname spo_fnl 'E:\data\spouse\final_data';

/*data for this project with spouse medicare variables added in*/
libname spo_mc_i 'E:\data\spouse_claims\data\int_data';
libname spo_mc_f 'E:\data\spouse_claims\data\final_data';

/*2000-2010 medicare claims*/
libname medi 'E:\data\cms_DUA_25000_2010';

H="FFS determination for spouse"
/*determine Spouse ffs medicare before R's death using the 
claims denominator files

Several sets of variables created, looking back 6m, 12m, 18m, 24m from R's death
*/

/*sort claims denominator file*/
proc sort data=medi.dn_2000_2010 out=dn_2000_20102  nodupkey;
by BID_HRS_19 year;
run;

/*assign death year using merged dataset with all r and s info
drop variables not needed for finding insurance status
just keep in those observations where s has a medicare xwalk id*/
proc contents data=spo_fnl.spouse_data; run;
proc freq data=spo_fnl.spouse_data; table s_xwalk_yes; run;

/*use R dod from claims if missing in the HRS dataset*/
data r_sp;
set spo_fnl.spouse_data(keep=r_death_date_e r_id r_bid_hrs r_xwalk_yes s_id s_bid_hrs 
	s_xwalk_yes s_age r_claims_dod);
if s_xwalk_yes=1;
r_dod_hrs_claims = r_death_date_e;
r_dod_use_claims=0;
if r_death_date_e=. & r_claims_dod~=. then do;
	r_dod_hrs_claims=r_claims_dod;
	r_dod_use_claims=1;
	end;
r_dod_missing_yes=0;
if r_dod_hrs_claims=. then r_dod_missing_yes=1;
r_death_year=year(r_dod_hrs_claims);
r_death_month=month(r_dod_hrs_claims);
run;

proc freq; table r_death_month r_death_year r_dod_missing_yes r_dod_use_claims; run;

*keep a version with only those with dod;
data r_sp2;
set r_sp;
if r_dod_missing_yes=0;
run;

proc sort data=r_sp2 nodupkey; by r_id; run;
proc freq; table s_xwalk_yes; run;

/*get denominator file for just death year for those with xwalk id only*/
proc sql;
create table s_dn_death_y as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a inner join
dn_2000_20102 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_19))
and a.r_death_year=b.year;
quit;

proc freq data=s_dn_death_y;
table r_death_year;
run;

/*who is missing denominator file??*/
proc sql;
create table s_missing_dn as select * from r_sp2 where s_bid_hrs
not in (select BID_hrs_19 from dn_2000_20102); 
quit;

proc sql;
create table s_missing_dn_2 as select
a.*,b.buyin12,b.year,b.HMOIND12
from r_sp2 a left join
dn_2000_20102 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_19))
and a.r_death_year=b.year;
quit;

data s_missing_dn_3;
set s_missing_dn_2;
dn_missing=0;
if year=. then dn_missing=1;
run;

proc freq; table dn_missing; run;

data s_missing_dn_4;
set s_missing_dn_3;
if dn_missing=1;
run;

/*144 of the 245 missing denominator file are <65 when R dies*/
proc freq; table r_death_year s_age; run;

/*1932 spouses have denominator file linked year of R's death
cases where spouse remarried after first r's death, and then in sample when 2nd r dies*/
proc sql;
select count(distinct s_bid_hrs) from s_dn_death_y;
quit;

/*note death month is from restricted file*/
data s_dn_death_y2;
set s_dn_death_y;
if length(trim(left(buyin12)))=12 and r_death_month>0 then do;
buyin_dy=substr(trim(left(buyin12)),1,r_death_month);
hmo_dy=substr(trim(left(HMOIND12)),1,r_death_month);
end;
else do;
buyin_dy=trim(left(buyin12));
hmo_dy=trim(left(HMOIND12));
end;
format r_death_date_e date9.;
format r_dod_hrs_claims date9.;
run;
proc means n;
var r_death_month;
run;

/*Check year prior to death to backfill for death dates
in the first half of the year (since doing 6 mo look back)*/
/* 1772 have the -1 year dn file*/
proc sql;
create table s_dn_death_y_bef as select
a.r_bid_hrs,a.s_bid_hrs,a.year as death_year,
b.year as death_year_bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y a inner join
dn_2000_20102 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_19))
and 0<a.year-b.year<=1 order by s_bid_hrs,year;
quit;


/* and the year before... 1537 have the -2 year dn file*/
proc sql;
create table s_dn_death_y_2bef as select
a.r_bid_hrs,a.s_bid_hrs,a.death_year,a.death_year_bef,
b.year as death_year_2bef,
b.year,b.buyin12,b.HMOIND12
from s_dn_death_y_bef a inner join
dn_2000_20102 b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_19))
and 0<a.death_year_bef-b.year<=1 order by s_bid_hrs,year;
quit;

/*merge the insurance data for death year, -1 and -2 years into single dataset*/
proc sql;
create table s_all_insurance as select a.*,b.buyin12 as buyin_bef,b.HMOIND12 as hmo_bef from
s_dn_death_y2 a
left join
s_dn_death_y_bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;

proc sql;
create table s_all_insurance2 as select a.*,b.buyin12 as buyin_2bef,b.HMOIND12 as hmo_2bef from
s_all_insurance a
left join
s_dn_death_y_2bef b
on trim(left(a.s_bid_hrs))=trim(left(b.s_bid_hrs)) and trim(left(a.r_bid_hrs))=trim(left(b.r_bid_hrs));
quit;


/*merge death year and year before death buy-in and hmo variables
Trim so the final variable _6m is 6 months pre-death
Note: indicator variables for parts a and b and hmo are null if don't
have information for full 6 months pre-death*/
data s_all_insurance3;
set s_all_insurance2;
buyin_2y=trimn(left(buyin_2bef))||trimn(left(buyin_bef))||trimn(left(buyin_dy));
hmo_2y=trimn(left(hmo_2bef))||trimn(left(hmo_bef))||trimn(left(hmo_dy));

buyin_2y_r=reverse(trim(buyin_2y));
hmo_2y_r=reverse(trim(hmo_2y));

/*create 6 month variables*/
if length(buyin_2y_r)>5 then buyin_6m_r=substr(trim(left(buyin_2y_r)),1,6);
if length(hmo_2y_r)>5 then hmo_6m_r=substr(trim(left(hmo_2y_r)),1,6);

if length(buyin_2y_r)<6 then buyin_6m_r="";
if length(hmo_2y_r)<6 then hmo_6m_r="";

buyin_6m=reverse(trim(buyin_6m_r));
hmo_6m=reverse(trim(hmo_6m_r));

/*create indicator variable for mc coverage 6 mo. 0=no, 1=yes*/
if length(buyin_6m)=6 then do;
if indexc(buyin_6m,"0","1","2","A","B") then part_ab_6m=0;
if indexc(buyin_6m,"0","1","2","A","B")=0 then part_ab_6m=1;
end;
if length(hmo_6m)=6 then do;
if index(hmo_6m,"000000") then hmo_d_6m=0;
if index(hmo_6m,"000000")=0 then hmo_d_6m=1;
end;

/*create 12 month variables*/
if length(buyin_2y_r)>11 then buyin_12m_r=substr(trim(left(buyin_2y_r)),1,12);
if length(hmo_2y_r)>11 then hmo_12m_r=substr(trim(left(hmo_2y_r)),1,12);

if length(buyin_2y_r)<12 then buyin_12m_r="";
if length(hmo_2y_r)<12 then hmo_12m_r="";

buyin_12m=reverse(trim(buyin_12m_r));
hmo_12m=reverse(trim(hmo_12m_r));

/*create indicator variable for mc coverage 12 mo. 0=no, 1=yes*/
if length(buyin_12m)=12 then do;
if indexc(buyin_12m,"0","1","2","A","B") then part_ab_12m=0;
if indexc(buyin_12m,"0","1","2","A","B")=0 then part_ab_12m=1;
end;
if length(hmo_12m)=12 then do;
if index(hmo_12m,"000000000000") then hmo_d_12m=0;
if index(hmo_12m,"00000000000")=0 then hmo_d_12m=1;
end;

/*create 24 month variables*/
if length(buyin_2y_r)>23 then buyin_24m_r=substr(trim(left(buyin_2y_r)),1,24);
if length(hmo_2y_r)>23 then hmo_24m_r=substr(trim(left(hmo_2y_r)),1,24);

if length(buyin_2y_r)<24 then buyin_24m_r="";
if length(hmo_2y_r)<24 then hmo_24m_r="";

buyin_24m=reverse(trim(buyin_24m_r));
hmo_24m=reverse(trim(hmo_24m_r));

/*create indicator variable for mc coverage 24 mo. 0=no, 1=yes*/
if length(buyin_24m)=24 then do;
if indexc(buyin_24m,"0","1","2","A","B") then part_ab_24m=0;
if indexc(buyin_24m,"0","1","2","A","B")=0 then part_ab_24m=1;
end;
if length(hmo_24m)=24 then do;
if index(hmo_24m,"000000000000000000000000") then hmo_d_24m=0;
if index(hmo_24m,"000000000000000000000000")=0 then hmo_d_24m=1;
end;

label r_dod_hrs_claims = "R DOD from HRS or Claims";
label r_dod_use_claims = "R DOD from Claims (missing in HRS)";
label part_ab_6m = "S MC Parts A and B 6m pre R's death";
label hmo_d_6m = "S HMO 6m pre R's death";
label part_ab_12m = "S MC Parts A and B 12m pre R's death";
label hmo_d_12m = "S HMO 12m pre R's death";
label part_ab_24m = "S MC Parts A and B 24m pre R's death";
label hmo_d_24m = "S HMO 24m pre R's death";


run;

/*36 observations don't have full denominator data re insurance status
either died Before July 2000 or are missing year -1 dn file*/
proc freq;
table part_ab_6m*hmo_d_6m part_ab_12m*hmo_d_12m part_ab_24m*hmo_d_24m;
run;

data zzzztest;
set s_all_insurance3;
if part_ab_6m=.;
run;

/*bring in insurance indicators to full decedent/spouse dataset*/
proc sql;
create table spo_mc_i.r_sp_ins as select
a.*, b.r_dod_hrs_claims , b.r_dod_use_claims , 
b.part_ab_6m as s_part_ab_6m , b.hmo_d_6m as s_hmo_d_6m , 
b.part_ab_12m as s_part_ab_12m , b.hmo_d_12m as s_hmo_d_12m ,
b.part_ab_24m as s_part_ab_24m , b.hmo_d_24m as s_hmo_d_24m 
from 
spo_fnl.spouse_data a left join 
s_all_insurance3 b
on a.r_id=b.r_id;
quit;

proc freq;
table s_part_ab_6m*s_hmo_d_6m s_part_ab_12m*s_hmo_d_12m s_part_ab_24m*s_hmo_d_24m;
run;


/*export to stata to get sample size estimate table*/
proc export data=spo_mc_i.r_sp_ins
outfile="E:\data\spouse_claims\data\int_data\r_sp_ins.dta" replace;
run;


H="Sample size requiring S ffs mc"
/*sample size for Spouse claims data
Requires both R and S to have FFS MC 6m prior to R's death*/

capture log close

clear all
set mem 500m
set more off

//Amy's PC
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using "`logpath'\1-HRS_Spouse_claims_xwalk_sample.txt", text replace

cd "`projdatapath'"
use r_sp_ins.dta

//set matrix for sample size determination table
mat deced_core=J(8,1,.)

//all decedents from 2002-2010 exit interviews
sum r_exit_year_x, detail
mat deced_core[1,1]=r(N)

//check of married decedents
tab r_married_x, missing

gen n1core_ind=.
replace n1core_ind=0 if  r_core_year_n1==.
replace n1core_ind=1 if  r_core_year_n1!=.
tab n1core_ind, missing

//decedents with xwalk
sum r_exit_year_x if r_xwalk_yes==1, detail
mat deced_core[2,1]=r(N)

//with ffs mc last 6 months of life
//have parts a and b coverage and no hmo
gen byte r_ins_ind=.
replace r_ins_ind=1 if r_part_ab_6m==1 & r_hmo_d_6m==0
replace r_ins_ind=0 if r_part_ab_6m!=1 | r_hmo_d_6m!=0
tab r_ins_ind, missing

//decedents with xwalk + ffs mc last 6 months of life
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1, detail
mat deced_core[3,1]=r(N)

//decedents with xwalk + married
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_x==1, detail
mat deced_core[4,1]=r(N)

//with spouse xwalk id
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_x==1 & ///
	s_xwalk_yes==1, detail
mat deced_core[5,1]=r(N)

//add spouse has ffs medicare 6 months prior to r's death
//have parts a and b coverage and no hmo
gen byte s_ins_ind_6m=.
replace s_ins_ind_6m=1 if s_part_ab_6m==1 & s_hmo_d_6m==0
replace s_ins_ind_6m=0 if s_part_ab_6m!=1 | s_hmo_d_6m!=0
tab s_ins_ind_6m, missing

gen byte s_ins_ind_12m=.
replace s_ins_ind_12m=1 if s_part_ab_12m==1 & s_hmo_d_12m==0
replace s_ins_ind_12m=0 if s_part_ab_12m!=1 | s_hmo_d_12m!=0
tab s_ins_ind_12m, missing

gen byte s_ins_ind_24m=.
replace s_ins_ind_24m=1 if s_part_ab_24m==1 & s_hmo_d_24m==0
replace s_ins_ind_24m=0 if s_part_ab_24m!=1 | s_hmo_d_24m!=0
tab s_ins_ind_24m, missing

//with spouse ffs medicare
sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1, detail
mat deced_core[6,1]=r(N)

sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1 & s_ins_ind_12m==1, detail
mat deced_core[7,1]=r(N)

sum r_exit_year_x if r_xwalk_yes==1 & r_ins_ind==1 &  r_married_x==1 & ///
	s_xwalk_yes==1 & s_ins_ind_6m==1 & s_ins_ind_12m==1 & s_ins_ind_24m==1, detail
mat deced_core[8,1]=r(N)

mat list deced_core
	
frmttable using `logpath'\2010_sample_est , statmat(deced_core) ///
	title("2010 sample size estimate - Spouse requires Medicare link") ///
	ctitle("","n") ///
	rtitle("All decedents from exit interviews" \ "With mc xwalk id" \ ///
	"With FFS mc last 6 months of life" \ "Married at time of death" \ ///
 	"Spouse has mc xwalk id" \ "S has ffs medicare 6 months before R's death" \ ///
	"S has ffs medicare 12m before R's death" \ "S has ffs medicare 24m before R's death") ///
	sdec(0) replace

**********************************************************
log close


H="next steps notes"
Need to get the following coded up for spouses:
Elix and CC's before and after decedent's death
Medicare spending before and after decedent's death
Utilization, IP, SNF, Hospice use - before and after decedent's death
DOD indicators - died within 1 year / 2 years of spouse's death

Question - Require FFS medicare for spouse during all intervals in order to report it?
Need to determine time windows for spouse variables,
	already have FFS check 6m preceding R's death
	Maybe want to look 2 years before / 2 years after but require FFS medicare indication the whole time??
	Need to see how much that limits the sample and then decided if its a requirement??


From spouse dataset - decedents already have:
Elix last 1 year of life
CC's last 1 year of life
Other Medicare use variables
	Hospice days - last 1 and 2 years of life
	IP days - last 2 years of life
	SNF days - last 2 years of life
 

H="Get S MC claims lists 6, 12 and 24m pre and post R's death"
/*get claims lists, all claims types, for the 6m 12m and 24m before
and after R's death

get consolidated diagnosis list for each S across all claim types for the
6m 12m and 24m before and after death periods*/

/*Get pared down dataset
Limit to those where spouse has ffs medicare 6m prior to r's death
if missing the death date from the restricted dataset, use the claims dod
Keep R's HRS ID so can use to match the R/S combination later on*/
data spo_mc_i.s_r_dod;
set spo_mc_i.r_sp_ins;
if s_xwalk_yes=1 & s_part_ab_6m=1 & s_hmo_d_6m=0 ;
ind_dod_yes=0;
if r_dod_hrs_claims~=. then ind_dod_yes=1;
keep r_BID_hrs r_id s_BID_hrs r_dod_hrs_claims r_dod_use_claims ind_dod_yes;
run;

proc freq; table r_dod_use_claims ind_dod_yes; run;

*check if all obs in this dataset have both r_id (HRS) and s_bid_hrs (claims);
data miss_rid;
set spo_mc_i.s_r_dod;
if r_id=.;
run;

data miss_sid;
set spo_mc_i.s_r_dod;
if s_BID_hrs='';
run;

/**************************************************************************/
/* ************** S Claims Before R's Death  ******************************/
/**************************************************************************/
/*macro to get claims before death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_bef_death=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.r_dod_hrs_claims,b.r_id 
from medi.&source._2000_2010 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_19))=trim(left(b.s_bid_hrs))
and &days_start<=b.r_dod_hrs_claims-a.admit_date<=&days_bef_death ;
quit;

/*claims that start earlier than x time but span into x time before death*/
proc sql;
create table &source._meet_2 as select a.*,b.r_dod_hrs_claims,b.r_id 
from medi.&source._2000_2010 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_19))=trim(left(b.s_bid_hrs))
and b.r_dod_hrs_claims-a.admit_date>&days_bef_death and b.r_dod_hrs_claims-a.disch_date<=&days_bef_death;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
run;
%mend;

/*6m before death*/
%claims(days_start=0,days_bef_death=183,source=hh,suf=6m); /*home health*/
%claims(days_start=0,days_bef_death=183,source=hs,suf=6m); /*hospice*/
%claims(days_start=0,days_bef_death=183,source=mp,suf=6m); /*medpar*/
%claims(days_start=0,days_bef_death=183,source=dm,suf=6m); /*dme*/
%claims(days_start=0,days_bef_death=183,source=op,suf=6m); /*outpatient*/
%claims(days_start=0,days_bef_death=183,source=pb,suf=6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_bef_death=365,source=hh,suf=12m); /*home health*/
%claims(days_start=0,days_bef_death=365,source=hs,suf=12m); /*hospice*/
%claims(days_start=0,days_bef_death=365,source=mp,suf=12m); /*medpar*/
%claims(days_start=0,days_bef_death=365,source=dm,suf=12m); /*dme*/
%claims(days_start=0,days_bef_death=365,source=op,suf=12m); /*outpatient*/
%claims(days_start=0,days_bef_death=365,source=pb,suf=12m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_bef_death=365*2,source=hh,suf=24m); /*home health*/
%claims(days_start=0,days_bef_death=365*2,source=hs,suf=24m); /*hospice*/
%claims(days_start=0,days_bef_death=365*2,source=mp,suf=24m); /*medpar*/
%claims(days_start=0,days_bef_death=365*2,source=dm,suf=24m); /*dme*/
%claims(days_start=0,days_bef_death=365*2,source=op,suf=24m); /*outpatient*/
%claims(days_start=0,days_bef_death=365*2,source=pb,suf=24m); /*carrier*/

/**************************************************************************/
/* ************** S Claims After R's Death   ******************************/
/**************************************************************************/
/*macro to get claims after death
saves datasets for each claim type / time window to the spo_mc_i directory*/
%macro claims(days_start=,days_aft_death=,source=,suf=);

/*claims fully within x time of death date*/
proc sql;
create table &source._meet_1 as select a.*,b.r_dod_hrs_claims,b.r_id 
from medi.&source._2000_2010 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_19))=trim(left(b.s_bid_hrs))
and &days_start<=a.admit_date - b.r_dod_hrs_claims<=&days_aft_death ;
quit;

/*claims that start earlier than R's DOD but span after R's death*/
proc sql;
create table &source._meet_2 as select a.*,b.r_dod_hrs_claims,b.r_id 
from medi.&source._2000_2010 a inner join
spo_mc_i.s_r_dod b
on trim(left(a.bid_hrs_19))=trim(left(b.s_bid_hrs))
and a.admit_date<b.r_dod_hrs_claims
and &days_start<=a.disch_date - b.r_dod_hrs_claims;
quit;

data spo_mc_i.&source._meet_&suf.(compress=yes);
set &source._meet_1 &source._meet_2;
format disch_date date9.;
format admit_date date9.;
run;
%mend;

/*6m after death*/
%claims(days_start=0,days_aft_death=183,source=hh,suf=p6m); /*home health*/
%claims(days_start=0,days_aft_death=183,source=hs,suf=p6m); /*hospice*/
%claims(days_start=0,days_aft_death=183,source=mp,suf=p6m); /*medpar*/
%claims(days_start=0,days_aft_death=183,source=dm,suf=p6m); /*dme*/
%claims(days_start=0,days_aft_death=183,source=op,suf=p6m); /*outpatient*/
%claims(days_start=0,days_aft_death=183,source=pb,suf=p6m); /*carrier*/
/*12m before death*/
%claims(days_start=0,days_aft_death=365,source=hh,suf=p12m); /*home health*/
%claims(days_start=0,days_aft_death=365,source=hs,suf=p12m); /*hospice*/
%claims(days_start=0,days_aft_death=365,source=mp,suf=p12m); /*medpar*/
%claims(days_start=0,days_aft_death=365,source=dm,suf=p12m); /*dme*/
%claims(days_start=0,days_aft_death=365,source=op,suf=p12m); /*outpatient*/
%claims(days_start=0,days_aft_death=365,source=pb,suf=p12m); /*carrier*/
/*run for 24m before death*/
%claims(days_start=0,days_aft_death=365*2,source=hh,suf=p24m); /*home health*/
%claims(days_start=0,days_aft_death=365*2,source=hs,suf=p24m); /*hospice*/
%claims(days_start=0,days_aft_death=365*2,source=mp,suf=p24m); /*medpar*/
%claims(days_start=0,days_aft_death=365*2,source=dm,suf=p24m); /*dme*/
%claims(days_start=0,days_aft_death=365*2,source=op,suf=p24m); /*outpatient*/
%claims(days_start=0,days_aft_death=365*2,source=pb,suf=p24m); /*carrier*/

/**************************************************************************/
/* ********************* S Diagnosis Lists   ******************************/
/**************************************************************************/

%macro dx_time_range(range1=, range2=, suf=);
/*pulls just dx codes from carrier claims*/
data pb_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.pb_meet_&suf.(keep=bid_hrs_19 r_id PDGNS_CD DGNS_CD1-DGNS_CD12 );
array dx PDGNS_CD DGNS_CD1-DGNS_CD12;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=pb_last_&range2._dx out=pb_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*outpatient claims*/
data op_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.op_meet_&suf.(keep=bid_hrs_19 r_id PDGNS_CD DGNSCD01-DGNSCD25  );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=op_last_&range2._dx out=op_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*medpar claims*/
data mp_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.mp_meet_&suf.(keep=bid_hrs_19 r_id AD_DGNS DGNS_CD01-DGNS_CD25 );
array dx D_DGNS DGNS_CD01-DGNS_CD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=mp_last_&range2._dx out=mp_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*dme claims*/
data dm_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.dm_meet_&suf.(keep=bid_hrs_19 r_id PDGNS_CD DGNS_CD1-DGNS_CD12 );
array dx PDGNS_CD DGNS_CD1-DGNS_CD12 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=dm_last_&range2._dx out=dm_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*home health agency*/
data hh_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.hh_meet_&suf.(keep=bid_hrs_19 r_id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hh_last_&range2._dx out=hh_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*hospice*/
data hs_last_&range2._dx(keep=bid_hrs_19 r_id diag);
set spo_mc_i.hs_meet_&suf.(keep=bid_hrs_19 r_id PDGNS_CD DGNSCD01-DGNSCD25 );
array dx PDGNS_CD DGNSCD01-DGNSCD25 ;
do over dx;
diag=dx ;
output;
end;
run;
proc sort data=hs_last_&range2._dx out=hs_last_&range2._dx2 nodupkey;
by bid_hrs_19 r_id diag;
run;

/*set diag variable length = 7 chars since that's the max length from the mc claims
Need to do this because length varies across the different mc claim types*/
data hs_last_&range2._dx3;
length diag $7;
set hs_last_&range2._dx2;
run;
data hh_last_&range2._dx3;
length diag $7;
set hh_last_&range2._dx2;
run;
data mp_last_&range2._dx3;
length diag $7;
set mp_last_&range2._dx2;
run;
data dm_last_&range2._dx3;
length diag $7;
set dm_last_&range2._dx2;
run;
data op_last_&range2._dx3;
length diag $7;
set op_last_&range2._dx2;
run;
data pb_last_&range2._dx3;
length diag $7;
set pb_last_&range2._dx2;
run;

data dx_all_last_&range2.;
set hs_last_&range2._dx3
hh_last_&range2._dx3
mp_last_&range2._dx3
dm_last_&range2._dx3
op_last_&range2._dx3
pb_last_&range2._dx3;
run;

proc sort data=dx_all_last_&range2.(where=(diag~="")) out=spo_mc_i.dx_&range1._&range2 nodupkey;
by bid_hrs_19 r_id diag;
run;

%mend;

/*run macro to create data files spo_mc_i.dx_0d_n6m spo_mc_i.dx_0d_n12m and spo_mc_i.dx_0d_n24m */
%dx_time_range(range1=0d, range2=n6m, suf=6m);
%dx_time_range(range1=0d, range2=n12m, suf=12m);
%dx_time_range(range1=0d, range2=n24m, suf=24m);

/*run for dx lists after R's death*/
%dx_time_range(range1=0d, range2=p6m, suf=p6m);
%dx_time_range(range1=0d, range2=p12m, suf=p12m);
%dx_time_range(range1=0d, range2=p24m, suf=p24m);

*check all obs have r_id and bid_hrs_19 (s mc id);
data miss_rid;
set spo_mc_i.dx_0d_n6m;
if r_id=.;
run;

data miss_sid;
set spo_mc_i.dx_0d_n6m;
if bid_hrs_19='';
run;

H="Get S Elixhauser comorbidities"
/*creates indicators for each of the Elixhauser comorbidities
based on the dx codes lists 6, 12, and 24m before and after R's death

resulting dataset is spo_mc_i.hrs_elix*/

/*rename macro - called within the elixhauser macro
to add time suffix to variables

lib=library
dsn=dataset name
pre=suffix to be added to all of the variable names
*/

%macro rename(lib,dsn,pre);
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "Before Renaming All Variables";
run;

proc sql noprint;
select nvar into :num_vars
from dictionary.tables
where libname="&LIB" and
memname="&DSN";
select distinct(name) into :var1-
:var%TRIM(%LEFT(&num_vars))
from dictionary.columns
where libname="&LIB" and
memname="&DSN";
quit;
run;

proc datasets library=&LIB;
modify &DSN;
rename
%do i=1 %to &num_vars;
&&var&i=&&var&i.._&pre 
%end;
;
quit;
run;
options pageno=1 nodate;
proc contents data=&lib..&dsn;
title "After Renaming All Variables";
run;
%mend rename;



/*Elixhauser index macro
Note includes additional 2 comorbidities: Dementia and Coronary Artery Disease*/

%macro elixhauser(range1=, range2=);

data dx_31_comor_&range2;
set spo_mc_i.dx_&range1._&range2(rename=(diag=dx_0));
dx=trim(left(dx_0));

if dx~="" then do;

comorbi_1=0;
comorbi_2=0;
comorbi_3=0;
comorbi_4=0;
comorbi_5=0;
comorbi_6=0;
comorbi_7=0;
comorbi_8=0;
comorbi_9=0;
comorbi_10=0;
comorbi_11=0;
comorbi_12=0;
comorbi_13=0;
comorbi_14=0;
comorbi_15=0;
comorbi_16=0;
comorbi_17=0;
comorbi_18=0;
comorbi_19=0;
comorbi_20=0;
comorbi_21=0;
comorbi_22=0;
comorbi_23=0;
comorbi_24=0;
comorbi_25=0;
comorbi_26=0;
comorbi_27=0;
comorbi_28=0;
comorbi_29=0;
comorbi_30=0;
*end of intialize of 30 binary variables;
*add dementia and CAD;
dementia=0;
cad=0;

*do over dx;
	*Congestive Heart Failure;
	if (substr(dx,1,5)='39891' or
		substr(dx,1,5)='40211' or
		substr(dx,1,5)='40291' or
		substr(dx,1,5)='40411' or
		substr(dx,1,5)='40413' or
		substr(dx,1,5)='40491' or
		substr(dx,1,5)='40493' or
		substr(dx,1,3)='428') 
		and comorbi_1=0 
		then comorbi_1=1;*add one binary variables here.;
	*Cardiac Arrhythmias;
	if (substr(dx,1,5)='42610' or
		substr(dx,1,5)='42611' or
		substr(dx,1,5)='42613' or
		substr(dx,1,4)='4262' or
		substr(dx,1,4)='4263' or
		substr(dx,1,4)='4264' or
		substr(dx,1,5)='42650' or
		substr(dx,1,5)='42651' or
		substr(dx,1,5)='42652' or
		substr(dx,1,5)='42653' or
		substr(dx,1,4)='4266' or
		substr(dx,1,4)='4267' or
		substr(dx,1,4)='4268' or
		substr(dx,1,4)='4270' or
		substr(dx,1,4)='4272' or
		substr(dx,1,5)='42731' or
		substr(dx,1,5)='42760' or
		substr(dx,1,4)='4279' or
		substr(dx,1,4)='7850' or
		substr(dx,1,4)='V450' or
		substr(dx,1,4)='V533')
			and comorbi_2=0 
		then comorbi_2=1;
	* Valvular Disease ;
	if (substr(dx,1,5)='09320' or
		substr(dx,1,5)='09321' or
		substr(dx,1,5)='09322' or
		substr(dx,1,5)='09323' or
		substr(dx,1,5)='09324' or
		substr(dx,1,3)='394' or
		substr(dx,1,3)='395' or
		substr(dx,1,3)='396' or
		substr(dx,1,4)='3970' or
		substr(dx,1,4)='3971' or
		substr(dx,1,4)='4240' or
		substr(dx,1,4)='4241' or
		substr(dx,1,4)='4242' or
		substr(dx,1,4)='4243' or
		substr(dx,1,4)='4244' or
		substr(dx,1,4)='4245' or
		substr(dx,1,4)='4246' or
		substr(dx,1,4)='4247' or
		substr(dx,1,4)='4248' or
		substr(dx,1,5)='42490' or
		substr(dx,1,5)='42491' or
		substr(dx,1,4)='7463' or
		substr(dx,1,4)='7464' or
		substr(dx,1,4)='7465' or
		substr(dx,1,4)='7466' or
		substr(dx,1,4)='V422' or
		substr(dx,1,5)='V433')
			and comorbi_3=0 
		then comorbi_3=1;
	*Pulmonary Circulation Disorders;
	if (substr(dx,1,3)='416' or
		substr(dx,1,4)='4179')
			and comorbi_4=0 
		then comorbi_4=1;
	*Peripheral Vascular Disorders;
	if (substr(dx,1,3)='440' or
		substr(dx,1,4)='4412' or
		substr(dx,1,4)='4414' or
		substr(dx,1,4)='4417' or
		substr(dx,1,4)='4419' or
		substr(dx,1,4)='4431' or
		substr(dx,1,4)='4432' or
		substr(dx,1,4)='4438' or
		substr(dx,1,4)='4439' or
		substr(dx,1,4)='4471' or
		substr(dx,1,4)='5571' or
		substr(dx,1,4)='5579' or
		substr(dx,1,4)='V434')
			and comorbi_5=0 
		then comorbi_5=1;
	*Hypertension;
	if ((substr(dx,1,4)='4011' or
		substr(dx,1,4)='4019')) or
	   ((substr(dx,1,5)='40210' or
		substr(dx,1,5)='40290' or
		substr(dx,1,5)='40410' or
		substr(dx,1,5)='40490' or
		substr(dx,1,5)='40511' or
		substr(dx,1,5)='40519' or
		substr(dx,1,5)='40591' or
		substr(dx,1,5)='40599')) 
			and comorbi_6=0 
		then comorbi_6=1;
	*Paralysis;	
	if (substr(dx,1,4)='3420' or
		substr(dx,1,5)='34210' or
		substr(dx,1,5)='34211' or
		substr(dx,1,5)='34212' or
		substr(dx,1,4)='3429' or
		substr(dx,1,3)='343' or
		substr(dx,1,3)='344')
			and comorbi_7=0 
		then comorbi_7=1;
	*Other Neurological Disorders;
	if (substr(dx,1,4)='3319' or
		substr(dx,1,4)='3320' or
		substr(dx,1,4)='3334' or
		substr(dx,1,4)='3335' or
		substr(dx,1,3)='334' or
		substr(dx,1,3)='335' or
		substr(dx,1,3)='340' or
		substr(dx,1,4)='3411' or
		substr(dx,1,4)='3418' or
		substr(dx,1,4)='3419' or
		substr(dx,1,5)='34500' or
		substr(dx,1,5)='34501' or
		substr(dx,1,5)='34510' or
		substr(dx,1,5)='34511' or
		substr(dx,1,4)='3454' or
		substr(dx,1,5)='34550' or
		substr(dx,1,5)='34551' or
		substr(dx,1,4)='3458' or
		substr(dx,1,5)='34590' or
		substr(dx,1,5)='34591' or
		substr(dx,1,4)='3481' or
		substr(dx,1,4)='3483' or
		substr(dx,1,4)='7803' or
		substr(dx,1,4)='7843') 
			and comorbi_8=0 
		then comorbi_8=1;	
	*Chronic Pulmonary Disease;
	if (substr(dx,1,3)='490' or
		substr(dx,1,3)='491' or
		substr(dx,1,3)='492' or
		substr(dx,1,4)='4930' or
		substr(dx,1,4)='4931' or
		substr(dx,1,4)='4932' or
		substr(dx,1,4)='4938' or
		substr(dx,1,5)='49390' or
		substr(dx,1,5)='49391' or
		substr(dx,1,3)='494' or
		substr(dx,1,3)='495' or
		substr(dx,1,3)='496' or
		substr(dx,1,3)='497' or
		substr(dx,1,3)='498' or
		substr(dx,1,3)='499' or
		substr(dx,1,3)='500' or
		substr(dx,1,3)='501' or
		substr(dx,1,3)='502' or
		substr(dx,1,3)='503' or
		substr(dx,1,3)='504' or
		substr(dx,1,3)='505' or
		substr(dx,1,4)='5064') 
			and comorbi_9=0 
		then comorbi_9=1;	
	*Diabetes, uncomplicated;
	if (substr(dx,1,4)='2500' or
		substr(dx,1,4)='2501' or
		substr(dx,1,4)='2502' or
		substr(dx,1,4)='2503') 
			and comorbi_10=0 
		then comorbi_10=1;
	*Diabetes, complicated;
	if (substr(dx,1,4)='2504' or
		substr(dx,1,4)='2505' or
		substr(dx,1,4)='2506' or
		substr(dx,1,4)='2507' or
		substr(dx,1,4)='2509') 
			and comorbi_11=0 
		then comorbi_11=1;
	*Hypothyroidism;
	if (substr(dx,1,3)='243' or
		substr(dx,1,4)='2440' or
		substr(dx,1,4)='2441' or
		substr(dx,1,4)='2442' or
		substr(dx,1,4)='2448' or
		substr(dx,1,4)='2449') 	
			and comorbi_12=0 
		then comorbi_12=1;
	*Renal Failure;
	if (substr(dx,1,5)='40311' or
		substr(dx,1,5)='40391' or
		substr(dx,1,5)='40412' or
		substr(dx,1,5)='40492' or
		substr(dx,1,3)='585' or
		substr(dx,1,3)='586' or
		substr(dx,1,4)='V420' or
		substr(dx,1,4)='V451' or
		substr(dx,1,4)='V560' or
		substr(dx,1,4)='V568') 
			and comorbi_13=0 
		then comorbi_13=1;
	*Liver Disease;
	if (substr(dx,1,5)='07032' or
		substr(dx,1,5)='07033' or
		substr(dx,1,5)='07054' or
		substr(dx,1,4)='4560' or
		substr(dx,1,4)='4561' or
		substr(dx,1,5)='45620' or
		substr(dx,1,5)='45621' or
		substr(dx,1,4)='5710' or
		substr(dx,1,4)='5712' or
		substr(dx,1,4)='5713' or
		substr(dx,1,4)='5714' or
		substr(dx,1,4)='5715' or
		substr(dx,1,4)='5716' or
		substr(dx,1,4)='5718' or
		substr(dx,1,4)='5719' or
		substr(dx,1,4)='5723' or
		substr(dx,1,4)='5728' or
		substr(dx,1,4)='V427') 
			and comorbi_14=0 
		then comorbi_14=1;
	*Peptic Ulcer Disease excluding bleeding;
	if (substr(dx,1,5)='53170' or
		substr(dx,1,5)='53190' or
		substr(dx,1,5)='53270' or
		substr(dx,1,5)='53290' or
		substr(dx,1,5)='53370' or
		substr(dx,1,5)='53390' or
		substr(dx,1,5)='53470' or
		substr(dx,1,5)='53490' or
		substr(dx,1,5)='V1271') 
			and comorbi_15=0 
		then comorbi_15=1;
	*AIDS;
	if (substr(dx,1,3)='042' or
		substr(dx,1,3)='043' or
		substr(dx,1,3)='044') 
			and comorbi_16=0 
		then comorbi_16=1;
	*Lymphoma;
	if (substr(dx,1,3)='200' or
		substr(dx,1,4)='201' or
		substr(dx,1,4)='2020' or
		substr(dx,1,4)='2021' or
		substr(dx,1,4)='2022' or
		substr(dx,1,4)='2023' or
		substr(dx,1,4)='2025' or
		substr(dx,1,4)='2026' or
		substr(dx,1,4)='2027' or
		substr(dx,1,4)='2028' or
		substr(dx,1,4)='2029' or
		substr(dx,1,4)='2030' or
		substr(dx,1,4)='2038' or
		substr(dx,1,4)='2386' or
		substr(dx,1,4)='2733' or
		substr(dx,1,4)='V1071' or
		substr(dx,1,4)='V1072' or
		substr(dx,1,4)='V1079')
			and comorbi_17=0 
		then comorbi_17=1;
	*Metastatic Cancer;
	if (substr(dx,1,3)='196' or
		substr(dx,1,3)='197' or
		substr(dx,1,3)='198' or
		substr(dx,1,4)='199') 
			and comorbi_18=0 
		then comorbi_18=1;	
	*Solid Tumor without Metastisis;
	if (substr(dx,1,2)='14' or
		substr(dx,1,2)='15' or
		substr(dx,1,2)='16' or
		substr(dx,1,3)='170' or
		substr(dx,1,3)='171' or
		substr(dx,1,3)='172' or
		substr(dx,1,3)='174' or
		substr(dx,1,3)='175' or
		substr(dx,1,3)='179' or
		substr(dx,1,2)='18' or
		substr(dx,1,3)='190' or
		substr(dx,1,3)='191' or
		substr(dx,1,3)='192' or
		substr(dx,1,3)='193' or
		substr(dx,1,3)='194' or
		substr(dx,1,3)='195' or
		substr(dx,1,3)='V10')
			and comorbi_19=0 
		then comorbi_19=1;
	*Rheumatoid Arthritis/Collagen Vascular Diseases;
	if (substr(dx,1,4)='7010' or
		substr(dx,1,3)='710' or
		substr(dx,1,3)='714' or
		substr(dx,1,3)='720' or
		substr(dx,1,3)='725') 
			and comorbi_20=0 
		then comorbi_20=1;
	*Coagulopathy;
	if (substr(dx,1,3)='286' or
		substr(dx,1,4)='2871' or
		substr(dx,1,4)='2873' or
		substr(dx,1,4)='2874' or
		substr(dx,1,4)='2875') 
			and comorbi_21=0 
		then comorbi_21=1;
	*Obesity;
	if (substr(dx,1,4)='2780')  
			and comorbi_22=0 
		then comorbi_22=1;
	*Weight Loss;
	if (substr(dx,1,3)='260' or
		substr(dx,1,3)='261' or
		substr(dx,1,3)='262' or
		substr(dx,1,3)='263') 
			and comorbi_23=0 
		then comorbi_23=1;	
	*Fluid and Electrolyte Disorders;
	if (substr(dx,1,3)='276') 
			and comorbi_24=0 
		then comorbi_24=1;
	*Blood Loss Anemia;
	if (substr(dx,1,4)='2800') 
			and comorbi_25=0 
		then comorbi_25=1;
	*Deficiency Anemias;
	if (substr(dx,1,4)='2801' or
		substr(dx,1,4)='2808' or
		substr(dx,1,4)='2809' or
		substr(dx,1,4)='2859') 
			and comorbi_26=0 
		then comorbi_26=1;
	*Alcohol Abuse;
	if (substr(dx,1,4)='2911' or
		substr(dx,1,4)='2912' or
		substr(dx,1,4)='2915' or
		substr(dx,1,4)='2918' or
		substr(dx,1,4)='2919' or
		substr(dx,1,4)='3039' or
		substr(dx,1,4)='3050' or
		substr(dx,1,4)='V113') 
			and comorbi_27=0 
		then comorbi_27=1;
	*Drug Abuse;
	if (substr(dx,1,4)='2920' or
		substr(dx,1,5)='29282' or
		substr(dx,1,5)='29283' or
		substr(dx,1,5)='29284' or
		substr(dx,1,5)='29289' or
		substr(dx,1,4)='2929' or
		substr(dx,1,3)='304' or
		substr(dx,1,4)='3052' or
		substr(dx,1,4)='3053' or
		substr(dx,1,4)='3054' or
		substr(dx,1,4)='3055' or
		substr(dx,1,4)='3056' or
		substr(dx,1,4)='3057' or
		substr(dx,1,4)='3058' or
		substr(dx,1,4)='3059')
			and comorbi_28=0 
		then comorbi_28=1;	
	*Psychoses;
	if (substr(dx,1,3)='295' or
		substr(dx,1,3)='296' or
		substr(dx,1,3)='297' or
		substr(dx,1,3)='298' or
		substr(dx,1,4)='2991') 
			and comorbi_29=0 
		then comorbi_29=1;
	*Depression;
	if (substr(dx,1,4)='3004' or
		substr(dx,1,5)='30112' or
		substr(dx,1,4)='3090' or
		substr(dx,1,4)='3091' or
		substr(dx,1,3)='311')
			and comorbi_30=0 
		then comorbi_30=1;


	*Dementia;
	if (substr(dx,1,4) in ('3310','3311','3312','2900','2901',
             '2902','2903','2912','2948','2949') or
		substr(dx,1,5) in ('29410','29411','29040','29041','29042','29043')) 
		and dementia=0 
          then dementia=1;

	*CAD coronary artery disease;
	if (substr(dx,1,4) in ('4140','4142','4143','4148','4149') or 
		substr(dx,1,3) in ('410','411','412','413') or
		substr(dx,1,5) in ('V4581','V4582'))
		and cad=0 
          then cad=1;

/* CAD list
410.00-410.92
411.0-411.89
412
413.0-413.9
414.00-414.07
414.2
414.3
414.8
414.9
V45.81
V45.82 */

end;
run;


/*check sums of each comorbidity for each ID*/
proc sql;
create table com_test1_&range2 as
select distinct BID_hrs_19, r_id,
sum(comorbi_1) as com_1,
sum(comorbi_2) as com_2,
sum(comorbi_3) as com_3,
sum(comorbi_4) as com_4,
sum(comorbi_5) as com_5,
sum(comorbi_6) as com_6,
sum(comorbi_7) as com_7,
sum(comorbi_8) as com_8,
sum(comorbi_9) as com_9,
sum(comorbi_10) as com_10,
sum(comorbi_11) as com_11,
sum(comorbi_12) as com_12,
sum(comorbi_13) as com_13,
sum(comorbi_14) as com_14,
sum(comorbi_15) as com_15,
sum(comorbi_16) as com_16,
sum(comorbi_17) as com_17,
sum(comorbi_18) as com_18,
sum(comorbi_19) as com_19,
sum(comorbi_20) as com_20,
sum(comorbi_21) as com_21,
sum(comorbi_22) as com_22,
sum(comorbi_23) as com_23,
sum(comorbi_24) as com_24,
sum(comorbi_25) as com_25,
sum(comorbi_26) as com_26,
sum(comorbi_27) as com_27,
sum(comorbi_28) as com_28,
sum(comorbi_29) as com_29,
sum(comorbi_30) as com_30,
sum(dementia) as com_31,
sum(cad) as com_32
from dx_31_comor_&range2
group by BID_hrs_19, r_id;
quit;

/*define comorbidities as binary indicators*/
data comorbidity_&range2.(keep=BID_hrs_19 r_id 
	s_comorb_1-s_comorb_32 s_comorb_all);
set com_test1_&range2;
array list_com com_1-com_30 com_31 com_32;
array list_com_bin s_comorb_1-s_comorb_30 s_comorb_31 s_comorb_32;

/*note this defines comorbidity 31 = dementia & 32 = cad*/
do over list_com;
  list_com_bin=0;

  if list_com>0 then do;
    list_com_bin=1;
   end;

end;

/*define aggregate comorbidity as sum of 30 individual indicator vars.
note: CAD not included in this aggregate score*/
s_comorb_all=s_comorb_1+s_comorb_2+s_comorb_3+s_comorb_4+s_comorb_5+s_comorb_6+
s_comorb_7+s_comorb_8+s_comorb_9+s_comorb_10+s_comorb_11+s_comorb_12+s_comorb_13+
s_comorb_14+s_comorb_15+s_comorb_16+s_comorb_17+s_comorb_18+s_comorb_19+s_comorb_20+
s_comorb_21+s_comorb_22+s_comorb_23+s_comorb_24+s_comorb_25+s_comorb_26+s_comorb_27+
s_comorb_28+s_comorb_29+s_comorb_30+s_comorb_31;
run;


proc sort data=comorbidity_&range2. nodupkey;
by BID_hrs_19 r_id;
run;

/*merges with list of s's with xwalk id, dod & ffs mc 6m before R's death*/
proc sql;
create table ids_w_xwalk_&range2._1(drop=BID_hrs_192 r_id2) as
select a.s_bid_hrs,a.r_id,b.* 
from spo_mc_i.s_r_dod a 
left join
comorbidity_&range2.(rename=(BID_hrs_19=BID_hrs_192) rename=(r_id=r_id2))  b
on trim(left(a.s_bid_hrs))=trim(left(b.BID_hrs_192)) and
	a.r_id=b.r_id2;
quit;

/*if comorbidity=null, set to zero for this group with the ffs mc 6m*/
data spo_mc_i.elix_&range1._&range2;
set ids_w_xwalk_&range2._1;
array list s_comorb_1-s_comorb_32 s_comorb_all;
do over list;
	if list=. then list=0;
	end;

label s_comorb_1 ="Congestive Heart Failure";
label s_comorb_2 ="Cardiac Arrhythmias";
label s_comorb_3 ="Valvular Disease";
label s_comorb_4 ="Pulmonary Circulation Disorders";
label s_comorb_5 ="Peripheral Vascular Disorders";
label s_comorb_6 ="Hypertension";
label s_comorb_7 ="Paralysis";
label s_comorb_8 ="Other Neurological Disorders";
label s_comorb_9 ="Chronic Pulmonary Disease";
label s_comorb_10 ="Diabetes, uncomplicated";
label s_comorb_11 ="Diabetes, complicated";
label s_comorb_12 ="Hypothyroidism";
label s_comorb_13 ="Renal Failure";
label s_comorb_14 ="Liver Disease";
label s_comorb_15 ="Peptic Ulcer Disease excluding bleeding";
label s_comorb_16 ="AIDS";
label s_comorb_17 ="Lymphoma";
label s_comorb_18 ="Metastatic Cancer";
label s_comorb_19 ="Solid Tumor without Metastisis";
label s_comorb_20 ="Rheumatoid Arthritis/Collagen Vascular Diseases";
label s_comorb_21 ="Coagulopathy";
label s_comorb_22 ="Obesity";
label s_comorb_23 ="Weight Loss";
label s_comorb_24 ="Fluid and Electrolyte Disorders";
label s_comorb_25 ="Blood Loss Anemia";
label s_comorb_26 ="Deficiency Anemias";
label s_comorb_27 ="Alcohol Abuse";
label s_comorb_28 ="Drug Abuse";
label s_comorb_29 ="Psychoses";
label s_comorb_30 ="Depression";
label s_comorb_31 ="Dementia";
label s_comorb_32 ="Coronary Artery Disease";

run;

data test;
set spo_mc_i.elix_&range1._&range2;
run;

/*calls rename macro*/
%rename(WORK,TEST,&range1._&range2);

/*rename r&s BID variables*/
data spo_mc_i.elix_&range1._&range2._2
	(rename =(r_id_&range1._&range2=r_id)
	rename =(s_BID_hrs_&range1._&range2=s_BID_hrs));
set test;
keep s_BID_hrs_&range1._&range2 r_id_&range1._&range2 s_comorb:;
run;

proc sort data=spo_mc_i.elix_&range1._&range2._2;
by s_bid_hrs r_id;
run;

%mend;

/*run macro to get elixhauser comorbidities 6, 12, 24m pre and post death
resulting datasets are spo_int.elix_0d_x#m_2
x = n=before, p=after death
# = 6, 12, or 24 for time window (months) 
have r_id and s_bid_hrs to merge back to dataset*/
%elixhauser(range1=0d, range2=n6m);
%elixhauser(range1=0d, range2=n12m);
%elixhauser(range1=0d, range2=n24m);

%elixhauser(range1=0d, range2=p6m);
%elixhauser(range1=0d, range2=p12m);
%elixhauser(range1=0d, range2=p24m);

proc freq data=spo_mc_i.elix_0d_n12m_2;
table comorb:;
run;

/*combine the 6 sets of variables into a single dataset
then merge this into main hrs spouse dataset*/
data elix_all;
merge spo_mc_i.elix_0d_n6m_2 spo_mc_i.elix_0d_n12m_2 spo_mc_i.elix_0d_n24m_2
spo_mc_i.elix_0d_p6m_2 spo_mc_i.elix_0d_p12m_2 spo_mc_i.elix_0d_p24m_2;
by s_bid_hrs r_id;
run;

/*merge comorbidities into HRS dataset
for observations with no mc xwalk, the comorbidities are left as null*/
proc sql;
create table spo_mc_i.hrs_elix(drop=s_bid_hrs2 r_id2)
as select a.*,b.*
from 
spo_mc_i.r_sp_ins a 
left join
elix_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

/*5437 do not have s with ffs medicare 6m before R's death so missing*/
proc freq data=spo_mc_i.hrs_elix;
table s_comorb: ;
run;


H="Convert dx list to dot format for cc's"
/*export lists of diagnosis codes to Stata*/
%macro exp(su=);
proc export data=spo_mc_i.dx_0d_&su.
outfile="E:\data\spouse_claims\data\int_data\dx_0d_&su..dta" replace;
run;
%mend;

%exp(su=n6m);
%exp(su=n12m);
%exp(su=n24m);
%exp(su=p6m);
%exp(su=p12m);
%exp(su=p24m);

/*******************************************************************/
/*put the sas data to stata in to dot format
This is STATA code*/
/*******************************************************************/
set more off

foreach s in n6m n12m n24m p6m p12m p24m{
	use "E:\data\spouse_claims\data\int_data\dx_0d_`s'.dta",clear

//convert diagnosis codes to string variables, tostring diag,gen(icd9_c)
	gen new=ltrim(diag)
	icd9 check new,gen(icd9_c)
	replace new="" if icd9_c>0 
// convert into dot format (ex 12.1 instead of 121)
	icd9 clean new,dots 

	replace diag=new
	drop icd9_c new

	save "E:\data\spouse_claims\data\int_data\dx_0d_`s'_2.dta",replace
//save to csv to import into sas (sas won't import stata13 .dta files
	outsheet using "E:\data\spouse_claims\data\int_data\dx_0d_`s'_2.csv", comma replace
}


H="Get S data warehouse chronic conditions"
/*begin of chronic 21 conditions.
Determines presence of 21 chronic conditions 6,12,24m pre and post R's death

Note this pulls from a list of icd-9 codes associated with each of the chronic
conditions.

Dataset created is spo_mc_i.hrs_elix_cc
*/

/*bring in formatted Stata datasets of dx codes*/

%macro imp(su=);
proc import datafile="E:\data\spouse_claims\data\int_data\dx_0d_&su._2.csv"
out=dx_0d_&su._2 DBMS=csv replace;
getnames=yes;
run;
%mend;

%imp(su=n6m);
%imp(su=n12m);
%imp(su=n24m);
%imp(su=p6m);
%imp(su=p12m);
%imp(su=p24m);

/*bring in excel list of dx codes associated with each chronic condition*/
proc import datafile='E:\data\spouse\ref_data\chronic_21_condition_icd9.xls'
out=icd9_21_chronic dbms=xls replace;
run;

proc contents data=icd9_21_chronic;
run;

/*creates macro variables of each of the chronic conditions listing of dx codes*/
proc sql;
select icd_9 into :chronic_desc1-:chronic_desc21 from icd9_21_chronic;
quit;
%put &chronic_desc10;
%put &chronic_desc5;

/*******************************************************************/
/*Generate chronic conditions indicator variables using dx
codes 12 months pre-death */
/*******************************************************************/

/*macro to create indicator variables for 21 chronic conditions
resulting files have spouse chronic conditions using dx codes 6, 12, and 24m
before and after R's death*/

%macro cc(start=,predeath=);

/*initialize the chronic conditions variables*/
data list_&start._&predeath._dx;
set dx_&start._&predeath._2;
array list s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM
;
do over list ;
list=0;
end;

diag_string=diag;

/* for dx codes that begin with numbers, process chronic cond variables*/
if anydigit(substr(trim(left(diag_string)),1,1))=1 then do;
diag=diag_string+0;

if diag in (&chronic_desc1) then s_CC_1_AMI=1;
if diag in (&chronic_desc2)  then s_CC_2_ALZH=1;
if diag in (&chronic_desc3)  then s_CC_3_ALZHDMTA=1;
if diag in (&chronic_desc4) then s_CC_4_ATRIALFB=1;
if diag in (&chronic_desc5) then s_CC_5_CATARACT=1;
if diag in (&chronic_desc6) then s_CC_6_CHRNKIDN=1;
if diag in (&chronic_desc7) then s_CC_7_COPD=1;
if diag in (&chronic_desc8) then s_CC_8_CHF=1;
if diag in (&chronic_desc9) then s_CC_9_DIABETES=1;
if diag in (&chronic_desc10) then s_CC_10_GLAUCOMA=1;
if diag in (&chronic_desc11) then s_CC_11_HIPFRAC=1;
if diag in (&chronic_desc12) then s_CC_12_ISCHMCHT=1;
if diag in (&chronic_desc13) then s_CC_13_DEPRESSN=1;
if diag in (&chronic_desc14) then s_CC_14_OSTEOPRS=1;
if diag in (&chronic_desc15) then s_CC_15_RA_OA=1;
if diag in (&chronic_desc16) then s_CC_16_STRKETIA=1;
if diag in (&chronic_desc17) then s_CC_17_CNCRBRST=1;
if diag in (&chronic_desc18) then s_CC_18_CNCRCLRC=1;
if diag in (&chronic_desc19) then s_CC_19_CNCRPRST=1;
if diag in (&chronic_desc20) then s_CC_20_CNCRLUNG=1;
if diag in (&chronic_desc21) then s_CC_21_CNCREndM=1;
end;

/*deal with dx codes that start with letters
Only two of them in the list we have to worry about*/
if anydigit(substr(trim(left(diag_string)),1,1))=0 then do;
if trim(left(diag_string)) in ("V431") then s_CC_5_CATARACT=1;
if trim(left(diag_string)) in ("V801") then s_CC_10_GLAUCOMA=1;
end;

run;

/*aggregate all chronic condition variables by bid*/
proc sql;
create table bid_dx_&start._&predeath.(rename=(bid_hrs_19=bid)) as
select distinct bid_hrs_19,r_id,
sum(s_CC_1_AMI) as s_CC_1_AMI,
sum(s_CC_2_ALZH) as s_CC_2_ALZH,
sum(s_CC_3_ALZHDMTA) as s_CC_3_ALZHDMTA,
sum(s_CC_4_ATRIALFB) as s_CC_4_ATRIALFB,
sum(s_CC_5_CATARACT) as s_CC_5_CATARACT,
sum(s_CC_6_CHRNKIDN) as s_CC_6_CHRNKIDN,
sum(s_CC_7_COPD) as s_CC_7_COPD,
sum(s_CC_8_CHF) as s_CC_8_CHF,
sum(s_CC_9_DIABETES) as s_CC_9_DIABETES,
sum(s_CC_10_GLAUCOMA) as s_CC_10_GLAUCOMA,
sum(s_CC_11_HIPFRAC) as s_CC_11_HIPFRAC,
sum(s_CC_12_ISCHMCHT) as s_CC_12_ISCHMCHT,
sum(s_CC_13_DEPRESSN) as s_CC_13_DEPRESSN,
sum(s_CC_14_OSTEOPRS) as s_CC_14_OSTEOPRS,
sum(s_CC_15_RA_OA) as s_CC_15_RA_OA,
sum(s_CC_16_STRKETIA) as s_CC_16_STRKETIA,
sum(s_CC_17_CNCRBRST) as s_CC_17_CNCRBRST,
sum(s_CC_18_CNCRCLRC) as s_CC_18_CNCRCLRC,
sum(s_CC_19_CNCRPRST) as s_CC_19_CNCRPRST,
sum(s_CC_20_CNCRLUNG) as s_CC_20_CNCRLUNG,
sum(s_CC_21_CNCREndM) as s_CC_21_CNCREndM

from list_&start._&predeath._dx group by bid_hrs_19,r_id;
quit;


/*merges with table of spouses w/ ffs mc 6m before r's death*/
 proc sql;
 create table bid_dx_&start._&predeath.2(drop=bid r_id2) as 
select a.s_bid_hrs,a.r_id,b.* 
 from spo_mc_i.s_r_dod a
 left join
  bid_dx_&start._&predeath.(rename=(r_id=r_id2)) b 
on trim(left(a.s_bid_hrs))=trim(left(b.bid)) and
	a.r_id=b.r_id2;
 quit;

/*convert to chronic condition vars. to binary variables*/
 data bid_dx_&start._&predeath.3;
 set bid_dx_&start._&predeath.2;
 array list s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM
;
do over list ;
if list>0 then list=1;
if list<=0 then list=0;
end;

/*create aggregated indicators*/
s_CC_AMI_isch=s_CC_1_AMI|s_CC_12_ISCHMCHT;
s_CC_alzheim=s_CC_2_ALZH|s_CC_3_ALZHDMTA;
s_CC_cncr_chronic=s_CC_17_CNCRBRST | s_CC_18_CNCRCLRC | s_CC_19_CNCRPRST | s_CC_20_CNCRLUNG | 
	s_CC_21_CNCREndM ;

/*label variables*/
label s_CC_1_AMI="AMI"
s_CC_2_ALZH="Alzheimer's disease"
s_CC_3_ALZHDMTA="Alzheimer's or Dementia"
s_CC_4_ATRIALFB="Atrial fibrillation"
s_CC_5_CATARACT="Cataract"
s_CC_6_CHRNKIDN="Chronic kidney disease"
s_CC_7_COPD="COPD"
s_CC_8_CHF="CHF"
s_CC_9_DIABETES="Diabetes"
s_CC_10_GLAUCOMA="Glaucoma"
s_CC_11_HIPFRAC="Hip fracture"
s_CC_12_ISCHMCHT="Ischemic heart disease"
s_CC_13_DEPRESSN="Depression"
s_CC_14_OSTEOPRS="Osteoporosis"
s_CC_15_RA_OA="Arthritis"
s_CC_16_STRKETIA="Stroke/TIA"
s_CC_17_CNCRBRST="Breast cancer"
s_CC_18_CNCRCLRC="Colorectal cancer"
s_CC_19_CNCRPRST="Prostate cancer"
s_CC_20_CNCRLUNG="Lung cancer"
s_CC_21_CNCREndM="Endometrial cancer"
s_CC_AMI_isch="AMI or Ischemic heart failure"
s_CC_alzheim="Alzheimer's or dementia"
s_CC_cncr_chronic="Cancer, all types"
;
run;


proc means;
var s_CC_1_AMI
s_CC_2_ALZH
s_CC_3_ALZHDMTA
s_CC_4_ATRIALFB
s_CC_5_CATARACT
s_CC_6_CHRNKIDN
s_CC_7_COPD
s_CC_8_CHF
s_CC_9_DIABETES
s_CC_10_GLAUCOMA
s_CC_11_HIPFRAC
s_CC_12_ISCHMCHT
s_CC_13_DEPRESSN
s_CC_14_OSTEOPRS
s_CC_15_RA_OA
s_CC_16_STRKETIA
s_CC_17_CNCRBRST
s_CC_18_CNCRCLRC
s_CC_19_CNCRPRST
s_CC_20_CNCRLUNG
s_CC_21_CNCREndM;
run;

/************************************************************/
/*rename the cc variables with suffix for time period*/
/************************************************************/

/*creates dataset to use in the rename macro below*/
data test;
set bid_dx_&start._&predeath.3;
run;

/*rename macro to add _n12mn0 suffix to the chronic conditions variable names
Data file is still work.test but variables renamed after running this macro*/
%rename(WORK,TEST,&predeath.);

/*Changes name of bid_hrs variables so no suffix*/
data spo_mc_i.chronic_21_&predeath._0;
set test;
r_id=r_id_&predeath.;
s_bid_hrs=s_bid_hrs_&predeath.;
drop r_id_&predeath. s_bid_hrs_&predeath.;
run;

proc sort data=spo_mc_i.chronic_21_&predeath._0;
by s_bid_hrs r_id;
run;

%mend;

%cc(start=0d,predeath=n6m);
%cc(start=0d,predeath=n12m);
%cc(start=0d,predeath=n24m);

%cc(start=0d,predeath=p6m);
%cc(start=0d,predeath=p12m);
%cc(start=0d,predeath=p24m);
/*so resulting datastets are spo_mc_i.chronic_21_x#n_0 
x: n=pre p=post death
#: 6, 12, or 24m time period
merge to main dataset using r_id and s_bid_hrs*/

proc freq data=spo_mc_i.chronic_21_n6m_0;
table s_cc_alzheim_n6m s_cc_cncr_chronic_n6m;
run;

proc freq data=spo_mc_i.chronic_21_p24m_0;
table s_cc_alzheim_p24m s_cc_cncr_chronic_p24m;
run;


/************************************************************/
/*Merge into HRS dataset with elix already added */
/************************************************************/

/*first merge the cc datasets together*/
data cc_all;
merge spo_mc_i.chronic_21_n6m_0 spo_mc_i.chronic_21_n12m_0
spo_mc_i.chronic_21_n24m_0 spo_mc_i.chronic_21_p6m_0
spo_mc_i.chronic_21_p12m_0 spo_mc_i.chronic_21_p24m_0;
by s_bid_hrs r_id;
run;

/*merge chronic conditions into main spouse dataset
for observations with no s with ffs mc 6m pre-death, keep cc's as missing*/
proc sql;
create table spo_mc_i.hrs_elix_cc(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix a 
left join
cc_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

proc means data=spo_mc_i.hrs_elix_cc;
vars s_cc_:;
run;




H="Get S Medicare Costs"
/*get spouse medicare costs by claim type and total, adjusted for inflation
to 2010$, 6m 12m and 24m before and after R's death

begins with claims lists from "Get S MC claims lists..." section

final dataset is spo_mc_i.hrs_elix_cc_pay*/

/****************************************************************/
/*medpar claims, time periods before R's death*******************/
/****************************************************************/
/*macro for medpar claims, splits into costs for snf and ip claims
for time periods before r's death*/
%macro mp(days_start=,days_bef_death=,source=,equ=,name=);
%let source0=mp;

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source0._meet_&name.;
if (trim(left(SSLSSNF))&equ.="N");
win_start_dt=r_dod_hrs_claims-&days_bef_death;
format admit_date disch_date win_start_dt date9.;
run;

/*identify claims where entire claim is within the x months prior to death*/
data &source._meet_1;
set &source._meet;
if win_start_dt<=admit_date<=r_dod_hrs_claims and
	win_start_dt<=disch_date<=r_dod_hrs_claims;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if win_start_dt>admit_date and
	win_start_dt<=disch_date<=r_dod_hrs_claims;
run;

/*identify fraction of claims to be attributed to period before death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-win_start_dt+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;

run;

/*claims where start within window but end after R's death*/
data &source._meet_4;
set &source._meet;
if win_start_dt<=admit_date<=r_dod_hrs_claims and
	disch_date>r_dod_hrs_claims;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(r_dod_hrs_claims-admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2010 then rate=1;
if year(admit_date)=2009 then rate=1.0350;
if year(admit_date)=2008 then rate=1.06823;
if year(admit_date)=2007 then rate=1.11347;
if year(admit_date)=2006 then rate=1.17287;
if year(admit_date)=2005 then rate=1.22119;
if year(admit_date)=2004 then rate=1.27983;
if year(admit_date)=2003 then rate=1.34381;
if year(admit_date)=2002 then rate=1.40392;
if year(admit_date)=2001 then rate=1.47492;
if year(admit_date)=2000 then rate=1.54589;
if year(admit_date)<=1999 then rate=1.61195;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_19,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_19,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_19)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%mp(days_start=0,days_bef_death=(183),source=snf,equ=,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=snf,equ=,name=12m );
%mp(days_start=0,days_bef_death=(2*365.25),source=snf,equ=,name=24m );
%mp(days_start=0,days_bef_death=(183),source=ip,equ=~,name=6m );
%mp(days_start=0,days_bef_death=(365.25),source=ip,equ=~,name=12m );
%mp(days_start=0,days_bef_death=(2*365.25),source=ip,equ=~,name=24m );


proc means data=snf_6m; var snf_paid_by_mc_6m;run;

/*merge the 3 datasets with before snf costs*/
data snf_bef;
merge snf_6m snf_12m snf_24m;
by s_BID_hrs r_id; 
run;

proc means data=snf_bef; var snf_paid_by_mc_: ;run;

data ip_bef;
merge ip_6m ip_12m ip_24m;
by s_BID_hrs r_id; 
run;

proc means data=ip_bef; var ip_paid_by_mc_: ;run;

/****************************************************************/
/*medpar claims, time periods after R's death********************/
/****************************************************************/
%macro mp_p(days_start=,days_aft_death=,source=,equ=,name=);
%let source0=mp;

*first get claims lists for the specific claims type, snf or ip;
data &source._meet;
set spo_mc_i.&source0._meet_&name.;
if (trim(left(SSLSSNF))&equ.="N");
win_end_dt=r_dod_hrs_claims+&days_aft_death;
format admit_date disch_date win_end_dt date9.;
run;

/*identify claims where entire claim is within the x months after death*/
data &source._meet_1;
set &source._meet;
if r_dod_hrs_claims<=admit_date<=win_end_dt and
	r_dod_hrs_claims<=disch_date<=win_end_dt;
run;

/*identify claims where start before window but end during window*/
data &source._meet_2;
set &source._meet;
if r_dod_hrs_claims>admit_date and
	r_dod_hrs_claims<=disch_date<=win_end_dt;
run;

/*identify fraction of claims to be attributed to period after death
by just using the fraction of time that was included in the time window*/
data &source._meet_3;
set &source._meet_2;
pct_xm=(disch_date-r_dod_hrs_claims+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*claims where start within window but end after window*/
data &source._meet_4;
set &source._meet;
if r_dod_hrs_claims<=admit_date<=win_end_dt and
	disch_date>win_end_dt ;
run;

/*again fraction to attribute to window*/
data &source._meet_5;
set &source._meet_4;
pct_xm=(win_end_dt -admit_date+1)/(disch_date-admit_date+1);
array list pmt_amt passthru;
do over list;
if list=. then list=0;
/*scale the partial claims by the time within the x month period*/
list=list*pct_xm;
end;
run;

/*merge claims into single dataset, adjust for inflation*/
data &source._cost;
set &source._meet_1 &source._meet_3 &source._meet_5;
array list pmt_amt passthru;
do over list;
if list=. then list=0;
end;

if year(admit_date)>=2010 then rate=1;
if year(admit_date)=2009 then rate=1.0350;
if year(admit_date)=2008 then rate=1.06823;
if year(admit_date)=2007 then rate=1.11347;
if year(admit_date)=2006 then rate=1.17287;
if year(admit_date)=2005 then rate=1.22119;
if year(admit_date)=2004 then rate=1.27983;
if year(admit_date)=2003 then rate=1.34381;
if year(admit_date)=2002 then rate=1.40392;
if year(admit_date)=2001 then rate=1.47492;
if year(admit_date)=2000 then rate=1.54589;
if year(admit_date)<=1999 then rate=1.61195;

&source._paid_by_mc=rate*(pmt_amt+passthru);
run;

*calculates total of mc charges for the claim type by hrs bid;
proc sql;
create table &source._pay as select distinct bid_hrs_19,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc 
from &source._cost group by BID_HRS_19,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select 
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name.
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_19)) and a.r_id=b.r_id;
 quit;

proc sort data=&source._&name.; by s_BID_hrs r_id; run;

%mend;

%mp_p(days_start=0,days_aft_death=(183),source=snf,equ=,name=p6m );
%mp_p(days_start=0,days_aft_death=(365.25),source=snf,equ=,name=p12m );
%mp_p(days_start=0,days_aft_death=(2*365.25),source=snf,equ=,name=p24m );
%mp_p(days_start=0,days_aft_death=(183),source=ip,equ=~,name=p6m );
%mp_p(days_start=0,days_aft_death=(365.25),source=ip,equ=~,name=p12m );
%mp_p(days_start=0,days_aft_death=(2*365.25),source=ip,equ=~,name=p24m );


proc means data=snf_p6m; var snf_paid_by_mc_p6m;run;

/*merge the 3 datasets with after snf costs*/
data snf_aft;
merge snf_p6m snf_p12m snf_p24m;
by s_BID_hrs r_id; 
run;

proc means data=snf_aft n mean median min max; var snf_paid_by_mc_: ;run;

data ip_aft;
merge ip_p6m ip_p12m ip_p24m;
by s_BID_hrs r_id; 
run;

proc means data=ip_aft n mean median min max; var ip_paid_by_mc_: ;run;

/****************************************************************/
/*other claim types, time periods before and after R's death*****/
/****************************************************************/
/*macro to calculate totals for the claims that are not in medpar files*/
%macro all_other(source=,name=);

/*just keep relevant variables*/
data &source._meet;
set spo_mc_i.&source._meet_&name.(keep=admit_date disch_date BID_hrs_19 pmt_amt r_dod_hrs_claims r_id);
format admit_date disch_date date9.;
run;

/*Adjust for inflation*/
data &source._meet2;
set &source._meet;
/*adjust to 2010 dollars*/
if year(admit_date)>=2010 then rate=1;
if year(admit_date)=2009 then rate=1.0350;
if year(admit_date)=2008 then rate=1.06823;
if year(admit_date)=2007 then rate=1.11347;
if year(admit_date)=2006 then rate=1.17287;
if year(admit_date)=2005 then rate=1.22119;
if year(admit_date)=2004 then rate=1.27983;
if year(admit_date)=2003 then rate=1.34381;
if year(admit_date)=2002 then rate=1.40392;
if year(admit_date)=2001 then rate=1.47492;
if year(admit_date)=2000 then rate=1.54589;
if year(admit_date)<=1999 then rate=1.61195;

&source._paid_by_mc=rate*(pmt_amt);
run;

/*Calculate total mc payments by ID*/
proc sql;
create table &source._pay as select distinct BID_hrs_19,r_id,
sum(&source._paid_by_mc) as &source._paid_by_mc
from &source._meet2 group by BID_hrs_19,r_id;
quit;

/*merge into a full bid list of those s's with ffs mc 6m or more*/
proc sql;
create table &source._&name. as select
a.s_bid_hrs,a.r_id,coalesce(b.&source._paid_by_mc,0) as &source._paid_by_mc_&name. 
from spo_mc_i.s_r_dod a
left join
 &source._pay b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_19)) and a.r_id=b.r_id;
 quit;

 proc sort data=&source._&name ;
 by s_BID_hrs r_id;
 run;
 %mend;

 %all_other(source=op,name=6m);
 %all_other(source=op,name=12m);
 %all_other(source=op,name=24m);
 %all_other(source=op,name=p6m);
 %all_other(source=op,name=p12m);
 %all_other(source=op,name=p24m);

 %all_other(source=pb,name=6m);
 %all_other(source=pb,name=12m);
 %all_other(source=pb,name=24m);
 %all_other(source=pb,name=p6m);
 %all_other(source=pb,name=p12m);
 %all_other(source=pb,name=p24m);

 %all_other(source=hh,name=6m);
 %all_other(source=hh,name=12m);
 %all_other(source=hh,name=24m);
 %all_other(source=hh,name=p6m);
 %all_other(source=hh,name=p12m);
 %all_other(source=hh,name=p24m);

 %all_other(source=hs,name=6m);
 %all_other(source=hs,name=12m);
 %all_other(source=hs,name=24m);
 %all_other(source=hs,name=p6m);
 %all_other(source=hs,name=p12m);
 %all_other(source=hs,name=p24m);

 %all_other(source=dm,name=6m);
 %all_other(source=dm,name=12m);
 %all_other(source=dm,name=24m);
 %all_other(source=dm,name=p6m);
 %all_other(source=dm,name=p12m);
 %all_other(source=dm,name=p24m);

%macro merge(source=,su=,name=);
data &source._&name.;
merge &source._&su.6m &source._&su.12m &source._&su.24m;
by s_BID_hrs r_id;
run;

proc means n mean median min max; var &source._paid_by_mc_: ; run;
%mend;

%merge(source=op,su=,name=bef);
%merge(source=op,su=p,name=aft);
%merge(source=pb,su=,name=bef);
%merge(source=pb,su=p,name=aft);
%merge(source=hh,su=,name=bef);
%merge(source=hh,su=p,name=aft);
%merge(source=hs,su=,name=bef);
%merge(source=hs,su=p,name=aft);
%merge(source=dm,su=,name=bef);
%merge(source=dm,su=p,name=aft);

/*now merge into single dataset of MC costs and get totals for each time window*/
data mc_costs_all;
merge ip_bef snf_bef op_bef pb_bef hh_bef hs_bef dm_bef 
ip_aft snf_aft op_aft pb_aft hh_aft hs_aft dm_aft;
by s_BID_hrs r_id;
run;

%macro total(su=);
data mc_costs_all;
set mc_costs_all;
tot_paid_by_mc_&su=ip_paid_by_mc_&su + snf_paid_by_mc_&su + op_paid_by_mc_&su + 
pb_paid_by_mc_&su + hh_paid_by_mc_&su + hs_paid_by_mc_&su + dm_paid_by_mc_&su;
run;
%mend;

%total(su=6m);
%total(su=12m);
%total(su=24m);

%total(su=p6m);
%total(su=p12m);
%total(su=p24m);

/*save permanent dataset*/
data spo_mc_i.mc_costs_all;
set mc_costs_all;
run;

proc means n mean median min max; run;

/*merge costs with rest of the spouse dataset
for observations with no s with ffs mc 6m pre-death, keep costs as missing*/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc a 
left join
spo_mc_i.mc_costs_all(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;


H="Get S other Medicare utilization variables from claims"
/*additional outcome variables

Spouse - 6m 12m and 24m post R's death:
Hospital # visits
Hospital nights
# ED visits
# OP visits*/

/*****************************************************************************/
/*get admissions and ip ed visits from ip claims 6, 12 and 24m post R's death*/
/*****************************************************************************/
%macro admissions(days=,suffix=);

/*pull list of ip claims from all medpar claims x days pre-interview*/
data ip_meet_&days.;
set spo_mc_i.mp_meet_&suffix.(where=(trim(left(SSLSSNF))~="N"));
run;

data ip_&days._2;
set ip_meet_&days.;
if icarecnt=. then icarecnt=0; /*medpar intensive care day count*/
if CRNRYDAY=. then CRNRYDAY=0; /*medpar coronary day count*/
icu_days=icarecnt+CRNRYDAY;
em_urgent_admit=0; /*Urgent , emergent admissions from admission type*/
if type_adm in (1,2) then em_urgent_admit=1;
em_admit=0;
if type_adm=1 then em_admit=1;
urgent_admit=0;
if type_adm=2 then urgent_admit=1;
elect_admit=0;
if type_adm=3 then elect_admit=1;
ind_ed_charge=0; /*ED charges as another indicator of ED use*/
if ER_AMT>0 & ER_AMT~=. then ind_ed_charge=1;
if ER_AMT=0 | ER_AMT=. then ind_ed_charge=0;

/*truncate stays where the admit is more before R's death
or discharge is after the x days after R's death so can get accurate LOS*/
if admit_date<r_dod_hrs_claims then do;
	admit_date=r_dod_hrs_claims;
	admit_trunc=1;
	end;
if r_dod_hrs_claims + &days.<disch_date then do;
	disch_date=r_dod_hrs_claims + &days.;
	disch_trunc=1;	
	end;
adj_los=disch_date-admit_date;
if disch_date-admit_date=0 then adj_los=1;
run;

proc sort data=ip_&days._2;
by BID_hrs_19 r_id;
run;

proc sql;
create table ip_&days._3 as select distinct BID_hrs_19,r_id,
/*total ICU days*/
sum(icu_days) as s_icu_days_&suffix. label="total icu days &suffix.",
/*count of IP admissions, all types*/
count(*) as s_n_ip_admit_&suffix. label="total n of hospital admit &suffix.",
/*total Hospital LOS*/
sum(adj_los) as s_n_hospd_&suffix. label="total hospital days &suffix.",
/*count of admissions with any ED charges*/
count(case when ind_ed_charge=1 then ind_ed_charge else . end) as s_n_ED_ip_&suffix. 
	label="total n of ED visits with subsequent admit &suffix."

 from ip_&days._2 group by BID_hrs_19,r_id;
quit;

data ip_&days._4;
set ip_&days._3;
if s_icu_days_&suffix.>s_n_hospd_&suffix. then s_icu_days_&suffix.=s_n_hospd_&suffix.;
run;

proc freq; 
table s_icu_days_&suffix. s_n_ip_admit_&suffix. s_n_hospd_&suffix.  s_n_ED_ip_&suffix.;
run;

proc sort data=ip_&days._4; by bid_hrs_19 r_id; run;

%mend;

%admissions(days=183,suffix=p6m);
%admissions(days=365,suffix=p12m);
%admissions(days=730,suffix=p24m);

/*****************************************************************************/
/*get outpatient visits and ed use from op claims 6, 12 and 24m post R's death*/
/*****************************************************************************/
%macro op(days=,suffix=);

data op_meet_&days.;
set spo_mc_i.op_meet_&suffix.(keep=bid_hrs_19 r_id admit_date disch_date 
	r_dod_hrs_claims RVCNTR01-RVCNTR45);
run;

proc sort data=op_meet_&days.; by bid_hrs_19 r_id admit_date; run;

data ed_op_&days._1;
set op_meet_&days.;
ed_op=0;
array list RVCNTR01-RVCNTR45;
do over list;
	if list >= 450 and list < 460 and ed_op=0 then  
	ed_op = 1;
	end;
run;

proc freq;
table ed_op;
run;

proc sql;
create table ed_op_&days._2 as select distinct bid_hrs_19,r_id,
count(case when ed_op=1 then ed_op else . end)
	as s_n_ed_op_visits_&suffix. label="n of OP ED visits &suffix.",
count(*) as s_n_op_visits_&suffix. label="n OP visits &suffix."
	from ed_op_&days._1 group by bid_hrs_19,r_id;
quit;

proc freq;
table s_n_ed_op_visits_&suffix s_n_op_visits_&suffix;
run;

proc sort data=ed_op_&days._2; by bid_hrs_19 r_id; run;

%mend;

%op(days=183,suffix=p6m);
%op(days=365,suffix=p12m);
%op(days=730,suffix=p24m);

/*****************************************************************************/
/*merge IP and OP variables into main dataset*/
/*****************************************************************************/
data ip_all;
merge ip_183_4 ip_365_4 ip_730_4;
by bid_hrs_19 r_id;
run;

data op_all;
merge ed_op_183_2 ed_op_365_2 ed_op_730_2;
by bid_hrs_19 r_id;
run;

/*now bring in to list of obs with ffs medicare 6m prior to R's death*/
proc sql;
create table add_ip(drop=bid_hrs_19 r_id2) as select 
a.s_bid_hrs,a.r_id,b.*
from spo_mc_i.s_r_dod a
left join
ip_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_19)) and a.r_id=b.r_id2;
 quit;

proc sql;
create table add_op(drop=bid_hrs_19 r_id2) as select *
from add_ip a
left join
op_all(rename=(r_id=r_id2)) b
 on trim(left(a.s_BID_hrs))=trim(left(b.bid_hrs_19)) and a.r_id=b.r_id2;
 quit;

/*set to 0 if had ffs mc 6m prior to R's death*/
data spo_mc_i.op_ip;
set add_op;
array list s_icu_days_p6m s_n_ip_admit_p6m s_n_hospd_p6m s_n_ED_ip_p6m 
s_icu_days_p12m s_n_ip_admit_p12m s_n_hospd_p12m s_n_ED_ip_p12m 
s_icu_days_p24m s_n_ip_admit_p24m s_n_hospd_p24m s_n_ED_ip_p24m 
s_n_ed_op_visits_p6m s_n_op_visits_p6m s_n_ed_op_visits_p12m s_n_op_visits_p12m
s_n_ed_op_visits_p24m s_n_op_visits_p24m;
	do over list;
	if list=. then list=0;
	end;
s_n_ed_p6m=s_n_ED_ip_p6m +s_n_ed_op_visits_p6m;
label s_n_ed_p6m="S n ED Visits p6m, from IP or OP claims"; 
s_n_ed_p12m=s_n_ED_ip_p12m +s_n_ed_op_visits_p12m;
label s_n_ed_p12m="S n ED Visits p12m, from IP or OP claims"; 
s_n_ed_p24m=s_n_ED_ip_p24m +s_n_ed_op_visits_p24m;
label s_n_ed_p24m="S n ED Visits p24m, from IP or OP claims"; 
run;

/*merge into overall dataset*/
proc sql;
create table spo_mc_i.hrs_elix_cc_pay_out(drop=s_bid_hrs2 r_id2) as select *
from 
spo_mc_i.hrs_elix_cc_pay a 
left join
spo_mc_i.op_ip(rename=(s_bid_hrs=s_bid_hrs2) rename=(r_id=r_id2)) b
on a.s_bid_hrs=b.s_bid_hrs2 and a.r_id=b.r_id2;
quit;

proc means n mean median min max; var s_icu: s_n_ip_admit: s_n_hospd: s_n_op_visits: 
s_n_ed_: ;run;

/*need to drop some variables because of Stata IC limit*/
proc contents data=spo_mc_i.hrs_elix_cc_pay_out; run;

data ltdvars;
set spo_mc_i.hrs_elix_cc_pay_out;
drop zip: s_comorb_: s_ZIP: s_STATEUSPS: s_PN_: r_ZIP: r_STATEUSPS: r_PN_: comorb_: ;
run;

proc export data=ltdvars
outfile="E:\data\spouse_claims\data\int_data\hrs_elix_cc_pay_out.dta" replace;
run;


H="First look at sample characteristics"
/*sample characteristics for Spouse claims data
Requires both R and S to have FFS MC 6m prior to R's death*/

capture log close

clear all
set mem 500m
set more off

//Amy's PC
local logpath E:\data\spouse_claims\logs
local projdatapath E:\data\spouse_claims\data\int_data

log using `logpath'\2-HRS_Spouse_claims_sample_char.txt, text replace

cd `projdatapath'
use hrs_elix_cc_pay_out.dta if (r_xwalk_yes==1 & r_part_ab_6m==1 & ///
	r_hmo_d_6m==0 & r_married_x==1 & s_xwalk_yes==1 & ///
	s_part_ab_6m==1 & s_hmo_d_6m==0)
*********************************************************
tab r_exit_year_x, missing

**adjust mc spending for wage index, now its inflation and wi adjusted
**need to think about this, why so many missing wage index??
sum wage_index_2008, detail
sum hrrnum, detail

//set sample variables
gen sample_n6m = 1
gen sample_n12m = 1 if s_part_ab_12m==1 & s_hmo_d_12m==0
gen sample_n24m = 1 if s_part_ab_24m==1 & s_hmo_d_24m==0
gen sample_6m=1
gen sample_12m = 1 if s_part_ab_12m==1 & s_hmo_d_12m==0
gen sample_24m = 1 if s_part_ab_24m==1 & s_hmo_d_24m==0
gen sample_p6m = 1
gen sample_p12m = 1
gen sample_p24m = 1

//count of chronic conditions in each time period
foreach t in n6m n12m n24m p6m p12m p24m{
gen s_cc_count_`t'=s_cc_1_ami_`t'+s_cc_2_alzh_`t'+s_cc_3_alzhdmta_`t'+ ///
s_cc_4_atrialfb_`t'+s_cc_5_cataract_`t'+s_cc_6_chrnkidn_`t'+ ///
s_cc_7_copd_`t'+s_cc_8_chf_`t'+s_cc_9_diabetes_`t'+ ///
s_cc_10_glaucoma_`t'+s_cc_11_hipfrac_`t'+s_cc_12_ischmcht_`t'+ ///
s_cc_13_depressn_`t'+s_cc_14_osteoprs_`t'+s_cc_15_ra_oa_`t'+ ///
s_cc_16_strketia_`t'+s_cc_17_cncrbrst_`t'+s_cc_18_cncrclrc_`t'+ ///
s_cc_19_cncrprst_`t'+s_cc_20_cncrlung_`t'+s_cc_21_cncrendm_`t'
sum s_cc_count_`t', detail
la var s_cc_count_`t' "Count chronic conditions, mean, sd"
}
//S died within 6, 12, 24m of R's death

*********************************************************
//tables of S chronic conditions
//3 samples based on having ffs #m before R's death
local cclist s_cc_ami_isch_ s_cc_alzheim_ s_cc_4_atrialfb_ s_cc_6_chrnkidn_ ///
s_cc_7_copd_ s_cc_8_chf_ s_cc_9_diabetes_ s_cc_11_hipfrac_ s_cc_13_depressn_ ///
s_cc_14_osteoprs_ s_cc_15_ra_oa_ s_cc_16_strketia_ s_cc_cncr_chronic_

mat cc=J(1,2,.)
mat cc_n=J(1,1,.)
//looking at periods before R's death, sample restriction by S FFS MC
//then periods after R's death, same sample R&S have FFS MC 6m before death
foreach t in n6m n12m n24m p6m p12m p24m{
	foreach v in `cclist'{
		sum `v'`t' if sample_`t'==1
		mat cc[1,1]=r(mean)*r(N) //n
		mat cc[1,2]=r(mean)*100 //pct
		mat rownames cc=`v'`t'
		frmttable, statmat(cc) append(tab_cc_`t') store(tab_cc_`t') ///
			sdec(0,2) varlabels
		}
	sum s_cc_count_`t' if sample_`t'==1, detail
	mat cc[1,1]=r(mean) //mean
	mat cc[1,2]=r(sd) //sd
	mat rownames cc=s_cc_count_`t'
	frmttable, statmat(cc) append(tab_cc_`t') store(tab_cc_`t') ///
			sdec(2,2) varlabels
	
//last row - n for each column
	sum r_exit_year_x if sample_`t'==1
	mat cc_n[1,1]=r(N)
	mat rownames cc_n="N"
	frmttable, statmat(cc_n) append(tab_cc_`t') store(tab_cc_`t') ///
		sdec(0) 
}


outreg, replay(tab_cc_n6m) merge(tab_cc_n12m) store(tab_cc1)
outreg using `logpath'/2_Spouse_sample_char, replace ///
	replay(tab_cc1) merge(tab_cc_n24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "N", "percent", "N", "percent", "N", "percent") ///
	title("S chronic conditions before R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m, 12m, and 24m prior to R's death respectively.")

outreg, replay(tab_cc_p6m) merge(tab_cc_p12m) store(tab_cc2)
outreg using `logpath'/2_Spouse_sample_char, addtable ///
	replay(tab_cc2) merge(tab_cc_p24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "N", "percent", "N", "percent", "N", "percent") ///
	title("S chronic conditions after R's death") ///
	note("Sample limited to those S with FFS Medicare 6m prior" \ ///
	"to R's death for all columns")
*********************************************************
//tables of S Medicare spending
//label medicare payments variables
foreach t in 6m 12m 24m p6m p12m p24m{
la var  tot_paid_by_mc_`t' "Total Medicare Payments, all types"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  ip_paid_by_mc_`t' "Inpatient"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  snf_paid_by_mc_`t' "Skilled Nursing Facility"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  op_paid_by_mc_`t' "Outpatient"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  pb_paid_by_mc_`t' "Carrier"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  hh_paid_by_mc_`t' "Home health"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  hs_paid_by_mc_`t' "Hospice"
}
foreach t in 6m 12m 24m p6m p12m p24m{
la var  dm_paid_by_mc_`t' "Durable medical equipment"
}
local mcsp tot_paid_by_mc_ ip_paid_by_mc_ snf_paid_by_mc_ op_paid_by_mc_ ///
pb_paid_by_mc_ hh_paid_by_mc_ hs_paid_by_mc_ dm_paid_by_mc_

mat mc=J(1,2,.)
mat mc_n=J(1,1,.)
//looking at periods before R's death, sample restriction by S FFS MC
//then periods after R's death, same sample R&S have FFS MC 6m before death
foreach t in 6m 12m 24m p6m p12m p24m{
	foreach v in `mcsp'{
		sum `v'`t' if sample_`t'==1, detail
		mat mc[1,1]=r(mean) //mean
		mat mc[1,2]=r(p50) //median
		mat rownames mc=`v'`t'
		frmttable, statmat(mc) append(tab_mc_`t') store(tab_mc_`t') ///
			sdec(0) varlabels
		}
	
//last row - n for each column
	sum r_exit_year_x if sample_`t'==1
	mat mc_n[1,1]=r(N)
	mat rownames mc_n="N"
	frmttable, statmat(mc_n) append(tab_mc_`t') store(tab_mc_`t') ///
		sdec(0) 
}


outreg, replay(tab_mc_6m) merge(tab_mc_12m) store(tab_mc1)
outreg using `logpath'/2_Spouse_sample_char, addtable ///
	replay(tab_mc1) merge(tab_mc_24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "mean", "median", "mean", "median", "mean", "median") ///
	title("S Medicare Payments before R's death") ///
	note("Sample limited to those S with FFS Medicare" \ ///
	"6m, 12m, and 24m prior to R's death respectively." \ ///
	"Spending values are adjusted for inflation to 2010$")

outreg, replay(tab_mc_p6m) merge(tab_mc_p12m) store(tab_mc2)
outreg using `logpath'/2_Spouse_sample_char, addtable ///
	replay(tab_mc2) merge(tab_mc_p24m) ///
	ctitles("", "6m", "", "12m", "", "24m", "" \ ///
		"", "mean", "median", "mean", "median", "mean", "median") ///
	title("S Medicare Payments after R's death") ///
	note("Sample limited to those S with FFS Medicare 6m prior" \ ///
	"to R's death for all columns" \ ///
	"Spending values are adjusted for inflation to 2010$")
	
*********************************************************
//Spouse additional utilization measures, after R's death

**add in spouse dies

//create indicator variables for any hospitalization, ICU use, and ED use
foreach t in p6m p12m p24m{
	gen s_icu_ind_`t'=1 if s_icu_days_`t'>0 & s_icu_days_`t'!=.
	replace s_icu_ind_`t'=0 if s_icu_days_`t'==0
	la var s_icu_ind_`t' "Any ICU use, n, %"
	la var s_icu_days_`t' "ICU days, mean, sd"
	
	gen s_admit_ind_`t'=1 if s_n_ip_admit_`t'>0 & s_n_ip_admit_`t'!=.
	replace s_admit_ind_`t'=0 if s_n_ip_admit_`t'==0
	la var s_admit_ind_`t' "Any Hospitalization, n, %"
	la var s_n_ip_admit_`t' "Number hospitalizations, mean, sd"
	
	la var s_n_hospd_`n' "Hospital days, mean, sd"
	
	gen s_ed_ind_`t'=1 if s_n_ed_`t'>0 & s_n_ed_`t'!=.
	replace s_ed_ind_`t'=0 if s_n_ed_`t'==0
	la var s_ed_ind_`t' "Any ED use, n, %"
	la var  s_n_ed_`t' "Number ED visits, mean, sd"
	
	la var s_n_op_visits_`t' "Number Outpatient visits, mean, sd"
}
local util_c  s_n_ip_admit_ s_n_hospd_ s_icu_days_ s_n_ED_ip_ /// 
s_n_ed_op_visits_ s_n_op_visits_ s_n_ed_

local util_i s_admit_ind_ s_icu_ind_ s_ed_ind_
*********************************************************
log close
